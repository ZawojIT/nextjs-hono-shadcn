TITLE: Installing Payload CMS with create-payload-app
DESCRIPTION: Command to quickly scaffold a new Payload CMS application using the create-payload-app tool.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/installation.mdx#2025-04-12_snippet_0

LANGUAGE: bash
CODE:
```
npx create-payload-app
```

----------------------------------------

TITLE: Initializing Basic Payload Configuration in TypeScript
DESCRIPTION: Shows the basic structure of a Payload config file that uses the buildConfig function to create a configuration object. This is typically placed in a payload.config.ts file at the root of the project.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // Your config goes here
})
```

----------------------------------------

TITLE: Creating Documents in PayloadCMS Collection
DESCRIPTION: Shows how to create a new document in a collection with various options including locale support, access control, file uploads, and document duplication.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_3

LANGUAGE: javascript
CODE:
```
const post = await payload.create({
  collection: 'posts', // required
  data: {
    // required
    title: 'sure',
    description: 'maybe',
  },
  locale: 'en',
  fallbackLocale: false,
  user: dummyUserDoc,
  overrideAccess: true,
  showHiddenFields: false,

  // If creating verification-enabled auth doc,
  // you can optionally disable the email that is auto-sent
  disableVerificationEmail: true,

  // If your collection supports uploads, you can upload
  // a file directly through the Local API by providing
  // its full, absolute file path.
  filePath: path.resolve(__dirname, './path-to-image.jpg'),

  // Alternatively, you can directly pass a File,
  // if file is provided, filePath will be omitted
  file: uploadedFile,

  // If you want to create a document that is a duplicate of another document
  duplicateFromID: 'document-id-to-duplicate',
})
```

----------------------------------------

TITLE: Configuring Localization in Payload Config (TypeScript)
DESCRIPTION: Basic configuration for enabling localization in Payload CMS. This snippet shows how to add the localization property to the Payload config and specify supported locales.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  localization: {
    // highlight-line
    // ...
  },
})
```

----------------------------------------

TITLE: Defining Collections in Payload Config (TypeScript)
DESCRIPTION: This snippet shows how to include collection configurations in the main Payload config file. Collections are defined as an array within the buildConfig function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  collections: [
    // highlight-line
    // Your Collections go here
  ],
})
```

----------------------------------------

TITLE: Defining Navigation Global Config
DESCRIPTION: Example of defining a Global configuration for site navigation with array fields and relationship to pages collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/globals.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { GlobalConfig } from 'payload'

export const Nav: GlobalConfig = {
  slug: 'nav',
  fields: [
    {
      name: 'items',
      type: 'array',
      required: true,
      maxRows: 8,
      fields: [
        {
          name: 'page',
          type: 'relationship',
          relationTo: 'pages', // "pages" is the slug of an existing collection
          required: true,
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Using environment variables in Payload config
DESCRIPTION: Demonstrates how to access environment variables from process.env in a Payload configuration file. This allows for dynamic configuration based on environment settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/environment-vars.mdx#2025-04-12_snippet_2

LANGUAGE: ts
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  serverURL: process.env.SERVER_URL, // highlight-line
  // ...
})
```

----------------------------------------

TITLE: Configuring Filtered Relationship Options in TypeScript
DESCRIPTION: Example of configuring a relationship field with dynamic filtering options based on the relationship type. Demonstrates filtering product relationships by stock quantity and service relationships by availability.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'purchase',
      type: 'relationship',
      relationTo: ['products', 'services'],
      filterOptions: ({ relationTo, siblingData }) => {
        // returns a Where query dynamically by the type of relationship
        if (relationTo === 'products') {
          return {
            stock: { greater_than: siblingData.quantity },
          }
        }

        if (relationTo === 'services') {
          return {
            isAvailable: { equals: true },
          }
        }
      },
    },
  ],
}
```

----------------------------------------

TITLE: Creating Advanced Update Access Control Logic
DESCRIPTION: Example of defining custom update access control that allows admin users to update any document while restricting regular users to updating only their own documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Access } from 'payload'

export const canUpdateUser: Access = ({ req: { user }, id }) => {
  // Allow users with a role of 'admin'
  if (user.roles && user.roles.some((role) => role === 'admin')) {
    return true
  }

  // allow any other users to update only oneself
  return user.id === id
}
```

----------------------------------------

TITLE: Implementing Unlock Access Control in Payload CMS Collection
DESCRIPTION: This snippet demonstrates how to add unlock access control to a Payload CMS collection. It determines which users can unlock other users who may be blocked from authenticating due to failing too many login attempts.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithUnlockAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    unlock: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Verifying User Email in Payload CMS using GraphQL
DESCRIPTION: Demonstrates how to verify a user's email in Payload CMS using a GraphQL mutation. This operation requires a verification token to set the user's _verified property to true.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_12

LANGUAGE: graphql
CODE:
```
mutation {
  verifyEmail[collection-singular-label](token: "TOKEN_HERE")
}
```

----------------------------------------

TITLE: Configuring Field-level Hooks
DESCRIPTION: Example of defining field-level hooks in a Field Config. This allows for granular logic to be applied specifically to individual fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text',
  name: 'myField',
  // highlight-start
  hooks: {
    // ...
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring Media Collection with Uploads in Payload CMS
DESCRIPTION: Example configuration for a media collection with upload capabilities, including image size specifications, mime type restrictions, and custom fields. Demonstrates how to set up automatic image resizing, thumbnail generation, and file type validation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Media: CollectionConfig = {
  slug: 'media',
  upload: {
    staticDir: 'media',
    imageSizes: [
      {
        name: 'thumbnail',
        width: 400,
        height: 300,
        position: 'centre',
      },
      {
        name: 'card',
        width: 768,
        height: 1024,
        position: 'centre',
      },
      {
        name: 'tablet',
        width: 1024,
        height: undefined,
        position: 'centre',
      },
    ],
    adminThumbnail: 'thumbnail',
    mimeTypes: ['image/*'],
  },
  fields: [
    {
      name: 'alt',
      type: 'text',
    },
  ],
}
```

----------------------------------------

TITLE: Creating a Basic Payload CMS Configuration with MongoDB
DESCRIPTION: A minimal example of configuring Payload CMS with MongoDB as the database. This snippet shows how to set up required configuration properties including the secret key, database adapter, and a simple collection with a text field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { mongooseAdapter } from '@payloadcms/db-mongodb'

export default buildConfig({
  secret: process.env.PAYLOAD_SECRET,
  db: mongooseAdapter({
    url: process.env.DATABASE_URI,
  }),
  collections: [
    {
      slug: 'pages',
      fields: [
        {
          name: 'title',
          type: 'text',
        },
      ],
    },
  ],
})
```

----------------------------------------

TITLE: Creating a Custom Payload Plugin (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a custom Payload plugin that adds a 'lastModifiedBy' field to all collections. It includes field configuration, hooks, and admin UI settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { Config, Plugin } from 'payload'

export const addLastModified: Plugin = (incomingConfig: Config): Config => {
  // Find all incoming auth-enabled collections
  // so we can create a lastModifiedBy relationship field
  // to all auth collections
  const authEnabledCollections = incomingConfig.collections.filter(
    (collection) => Boolean(collection.auth),
  )

  // Spread the existing config
  const config: Config = {
    ...incomingConfig,
    collections: incomingConfig.collections.map((collection) => {
      // Spread each item that we are modifying,
      // and add our new field - complete with
      // hooks and proper admin UI config
      return {
        ...collection,
        fields: [
          ...collection.fields,
          {
            name: 'lastModifiedBy',
            type: 'relationship',
            relationTo: authEnabledCollections.map(({ slug }) => slug),
            hooks: {
              beforeChange: [
                ({ req }) => ({
                  value: req?.user?.id,
                  relationTo: req?.user?.collection,
                }),
              ],
            },
            admin: {
              position: 'sidebar',
              readOnly: true,
            },
          },
        ],
      }
    }),
  }

  return config
}
```

----------------------------------------

TITLE: Configuring Payload Cloud Storage Plugin in TypeScript
DESCRIPTION: Basic configuration example showing how to integrate the cloud storage plugin with Payload CMS. The plugin is added to the Payload config, with collection-specific adapter configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/plugin-cloud-storage/README.md#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'

export default buildConfig({
  plugins: [
    cloudStoragePlugin({
      collections: {
        'my-collection-slug': {
          adapter: theAdapterToUse, // see docs for the adapter you want to use
        },
      },
    }),
  ],
  // The rest of your config goes here
})
```

----------------------------------------

TITLE: Configuring CORS in Payload CMS with Wildcard
DESCRIPTION: Shows how to configure CORS in Payload CMS to accept incoming requests from any domain using a wildcard string.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  cors: '*', // highlight-line
})
```

----------------------------------------

TITLE: Configuring Fields in a Collection
DESCRIPTION: Basic example of how to add fields to a Collection configuration in Payload CMS. This demonstrates the field property which is used to define the schema of documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Page: CollectionConfig = {
  // ...
  fields: [
    // highlight-line
    // ...
  ],
}
```

----------------------------------------

TITLE: Querying Data with Payload Local API in React Server Component
DESCRIPTION: Demonstrates how to use Payload's Local API to fetch data directly from the database in a React Server Component. Shows type-safe querying of a 'pages' collection with pagination support.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/concepts.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react'
import config from '@payload-config'
import { getPayload } from 'payload'

const MyServerComponent: React.FC = () => {
  const payload = await getPayload({ config })

  const findResult = await payload.find({ collection: 'pages' })

  return (
    <ul>
      {findResult.docs.map((page) => {
      })}
    </ul>
  )
}
```

----------------------------------------

TITLE: Logging in to Payload CMS using REST API
DESCRIPTION: Demonstrates how to log in to Payload CMS using the REST API. This operation accepts an email and password, returning user information and an authentication token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
const res = await fetch('http://localhost:3000/api/[collection-slug]/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    email: 'dev@payloadcms.com',
    password: 'this-is-not-our-password...or-is-it?',
  }),
})

const json = await res.json()

// JSON will be equal to the following:
/*
{
  user: {
    email: 'dev@payloadcms.com',
    createdAt: "2020-12-27T21:16:45.645Z",
    updatedAt: "2021-01-02T18:37:41.588Z",
    id: "5ae8f9bde69e394e717c8832"
  },
  token: '34o4345324...',
  exp: 1609619861
}
*/
```

----------------------------------------

TITLE: Complete Collection Hooks Configuration
DESCRIPTION: Comprehensive example showing all available hook types that can be configured for a Collection, including operation hooks and authentication-related hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload';

export const CollectionWithHooks: CollectionConfig = {
  // ...
  // highlight-start
  hooks: {
    beforeOperation: [(args) => {...}],
    beforeValidate: [(args) => {...}],
    beforeDelete: [(args) => {...}],
    beforeChange: [(args) => {...}],
    beforeRead: [(args) => {...}],
    afterChange: [(args) => {...}],
    afterRead: [(args) => {...}],
    afterDelete: [(args) => {...}],
    afterOperation: [(args) => {...}],
    afterError: [(args) => {....}],

    // Auth-enabled Hooks
    beforeLogin: [(args) => {...}],
    afterLogin: [(args) => {...}],
    afterLogout: [(args) => {...}],
    afterRefresh: [(args) => {...}],
    afterMe: [(args) => {...}],
    afterForgotPassword: [(args) => {...}],
    refresh: [(args) => {...}],
    me: [(args) => {...}],
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Authenticating and Making Requests with JWT in TypeScript
DESCRIPTION: This snippet demonstrates how to authenticate a user and make a subsequent request using the JWT token in the Authorization header. It showcases the login process and how to include the token in future requests.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/jwt.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const user = await fetch('http://localhost:3000/api/users/login', {
  method: 'POST',
  body: JSON.stringify({
    email: 'dev@payloadcms.com',
    password: 'password',
  }),
}).then((req) => await req.json())

const request = await fetch('http://localhost:3000', {
  headers: {
    Authorization: `JWT ${user.token}`,
  },
})
```

----------------------------------------

TITLE: Defining a Collection with GraphQL Support in Payload CMS
DESCRIPTION: This snippet shows how to define a collection config in Payload CMS that will automatically generate GraphQL queries and mutations. It includes auth support.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const PublicUser: CollectionConfig = {
  slug: 'public-users',
  auth: true, // Auth is enabled
  fields: [
    ...
  ],
}
```

----------------------------------------

TITLE: Complete Access Control Configuration Options
DESCRIPTION: A comprehensive example showing all available access control functions for a Collection, including those specific to auth-enabled and version-enabled collections.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload';

export const CollectionWithAccessControl: CollectionConfig = {
  // ...
  // highlight-start
  access: {
    create: () => {...},
    read: () => {...},
    update: () => {...},
    delete: () => {...},

    // Auth-enabled Collections only
    admin: () => {...},
    unlock: () => {...},

    // Version-enabled Collections only
    readVersions: () => {...},
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Implementing Forgot Password with Local API in TypeScript
DESCRIPTION: Example of using Payload's Local API to trigger forgot password functionality with option to disable automatic email generation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_19

LANGUAGE: typescript
CODE:
```
const token = await payload.forgotPassword({
  collection: '[collection-slug]',
  data: {
    email: 'dev@payloadcms.com',
  },
  disableEmail: false, // you can disable the auto-generation of email via Local API
})
```

----------------------------------------

TITLE: Configuring Advanced Authentication Options in Payload
DESCRIPTION: Demonstrates how to configure advanced authentication options including token expiration, email verification, login attempt limits, and lockout settings in a Payload CMS collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Admins: CollectionConfig = {
  // ...
  // highlight-start
  auth: {
    tokenExpiration: 7200, // How many seconds to keep the user logged in
    verify: true, // Require email verification before being allowed to authenticate
    maxLoginAttempts: 5, // Automatically lock a user out after X amount of failed logins
    lockTime: 600 * 1000, // Time period to allow the max login attempts
    // More options are available
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring Postgres Adapter for Payload CMS with @payloadcms/db-postgres
DESCRIPTION: This snippet demonstrates how to configure the Postgres adapter for Payload CMS using the @payloadcms/db-postgres package. It shows how to set up the adapter with a connection string and pass it to the Payload config.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { postgresAdapter } from '@payloadcms/db-postgres'

export default buildConfig({
  // Configure the Postgres adapter here
  db: postgresAdapter({
    // Postgres-specific arguments go here.
    // `pool` is required.
    pool: {
      connectionString: process.env.DATABASE_URI,
    },
  }),
})
```

----------------------------------------

TITLE: Complex Delete Access Control Function for Payload CMS
DESCRIPTION: This snippet shows a more complex delete access control function that checks if a customer can be deleted based on associated contracts. It demonstrates how to query another collection within the access control function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Access } from 'payload'

export const canDeleteCustomer: Access = async ({ req, id }) => {
  if (!id) {
    // allow the admin UI to show controls to delete since it is indeterminate without the `id`
    return true
  }

  // Query another Collection using the `id`
  const result = await req.payload.find({
    collection: 'contracts',
    limit: 0,
    depth: 0,
    where: {
      customer: { equals: id },
    },
  })

  return result.totalDocs === 0
}
```

----------------------------------------

TITLE: Implementing Admin Access Control in Payload CMS Collection
DESCRIPTION: This snippet shows how to add admin access control to a Payload CMS collection. It determines whether the currently logged-in user can access the admin UI.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithAdminAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    admin: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Finding Document by ID in PayloadCMS
DESCRIPTION: Shows how to retrieve a specific document by its ID with options for depth, localization, and access control.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_5

LANGUAGE: javascript
CODE:
```
const result = await payload.findByID({
  collection: 'posts', // required
  id: '507f1f77bcf86cd799439011', // required
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Configuring MongoDB Adapter in Payload CMS (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the MongoDB adapter in a Payload CMS configuration file. It shows the import of the mongooseAdapter and its usage within the buildConfig function, including the specification of the database URL.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/mongodb.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { mongooseAdapter } from '@payloadcms/db-mongodb'

export default buildConfig({
  // Your config goes here
  collections: [
    // Collections go here
  ],
  // Configure the Mongoose adapter here
  db: mongooseAdapter({
    // Mongoose-specific arguments go here.
    // URL is required.
    url: process.env.DATABASE_URI,
  }),
})
```

----------------------------------------

TITLE: Creating a Basic Payload CMS Plugin in TypeScript
DESCRIPTION: Example of a simple plugin that adds a new field type to Payload CMS. This demonstrates the basic structure of a plugin including configuration and registration.
SOURCE: https://github.com/payloadcms/payload/blob/main/templates/plugin/README.md#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { Plugin } from 'payload/config';

export const myPlugin: Plugin = {
  // Add a custom field type
  fields: {
    customField: {
      // ... field type properties
    },
  },
};
```

----------------------------------------

TITLE: Verifying User Email in Payload CMS using Local API
DESCRIPTION: Shows how to verify a user's email in Payload CMS using the Local API. This operation requires a collection slug and a verification token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_13

LANGUAGE: typescript
CODE:
```
const result = await payload.verifyEmail({
  collection: '[collection-slug]',
  token: 'TOKEN_HERE',
})
```

----------------------------------------

TITLE: Fetching Localized Data via Local API in JavaScript
DESCRIPTION: Shows how to use the Local API to fetch localized data by specifying 'locale' and 'fallbackLocale' in the options argument. The example retrieves posts in Spanish with no fallback locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_7

LANGUAGE: javascript
CODE:
```
const posts = await payload.find({
  collection: 'posts',
  locale: 'es',
  fallbackLocale: false,
})
```

----------------------------------------

TITLE: Implementing Reset Password with REST API in TypeScript
DESCRIPTION: Example of making a POST request to reset password endpoint using a token and new password, returns user data and authentication token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_20

LANGUAGE: typescript
CODE:
```
const res = await fetch(`http://localhost:3000/api/[collection-slug]/reset-password`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    token: 'TOKEN_GOES_HERE'
    password: 'not-today',
  }),
});

const json = await res.json();

// JSON will be equal to the following:
/*
{
  user: {
    email: 'dev@payloadcms.com',
    createdAt: "2020-12-27T21:16:45.645Z",
    updatedAt: "2021-01-02T18:37:41.588Z",
    id: "5ae8f9bde69e394e717c8832"
  },
  token: '34o4345324...',
  exp: 1609619861
}
*/
```

----------------------------------------

TITLE: Dynamic URL Configuration for Live Preview
DESCRIPTION: Advanced configuration example demonstrating dynamic URL generation based on document data, collection config, and locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    // ...
    livePreview: {
      url: ({
        data,
        collectionConfig,
        locale
      }) => `${data.tenant.url}${collectionConfig.slug === 'posts' ? `/posts/${data.slug}` : `${data.slug !== 'home' : `/${data.slug}` : ''}`}${locale ? `?locale=${locale?.code}` : ''}`,
      collections: ['pages'],
    },
  }
})
```

----------------------------------------

TITLE: Configuring Custom Component in Payload Config
DESCRIPTION: Example of adding a custom logout button component to the Payload admin panel using component paths relative to the project root.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      logout: {
        Button: '/src/components/Logout#MyComponent',
      },
    },
  },
})
```

----------------------------------------

TITLE: Example Collection with Select Field Configuration
DESCRIPTION: Complete example of a collection configuration with a Select field including multiple options and admin customization.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/select.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'selectedFeatures', // required
      type: 'select', // required
      hasMany: true,
      admin: {
        isClearable: true,
        isSortable: true, // use mouse to drag and drop different values, and sort them according to your choice
      },
      options: [
        {
          label: 'Metallic Paint',
          value: 'metallic_paint',
        },
        {
          label: 'Alloy Wheels',
          value: 'alloy_wheels',
        },
        {
          label: 'Carbon Fiber Dashboard',
          value: 'carbon_fiber_dashboard',
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Refreshing Authentication Token in Payload CMS using GraphQL
DESCRIPTION: Demonstrates how to refresh an authentication token in Payload CMS using a GraphQL mutation. This operation returns updated user information and a new token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_10

LANGUAGE: graphql
CODE:
```
mutation {
  refreshToken[collection-singular-label] {
    user {
      email
    }
    refreshedToken
  }
}
```

----------------------------------------

TITLE: Implementing afterRead Hook in Payload CMS (TypeScript)
DESCRIPTION: This code snippet shows the implementation of an afterRead hook in Payload CMS. The hook runs as the last step before documents are returned, flattening locales, hiding protected fields, and removing inaccessible fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterReadHook } from 'payload'

const afterReadHook: CollectionAfterReadHook = async ({ doc }) => {
  return doc
}
```

----------------------------------------

TITLE: Configuring SQLite Adapter in Payload CMS
DESCRIPTION: Basic configuration example showing how to set up the SQLite adapter in your Payload CMS config. It demonstrates how to provide the required database URL and optional authentication token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { sqliteAdapter } from '@payloadcms/db-sqlite'

export default buildConfig({
  // Your config goes here
  collections: [
    // Collections go here
  ],
  // Configure the SQLite adapter here
  db: sqliteAdapter({
    // SQLite-specific arguments go here.
    // `client.url` is required.
    client: {
      url: process.env.DATABASE_URL,
      authToken: process.env.DATABASE_AUTH_TOKEN,
    },
  }),
})
```

----------------------------------------

TITLE: TypeScript Integration in PayloadCMS
DESCRIPTION: Demonstrates TypeScript usage with automatic type inference for collection operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_16

LANGUAGE: typescript
CODE:
```
const post = await payload.create({
  collection: 'posts',

  // Data will now be typed as Post and give you type hints
  data: {
    title: 'my title',
    description: 'my description',
  },
})
```

----------------------------------------

TITLE: Creating a Custom Text Field Component with useField Hook
DESCRIPTION: Example of a client-side custom text field component that uses the useField hook to manage field values and interaction with the form.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_20

LANGUAGE: tsx
CODE:
```
'use client'
import { useField } from '@payloadcms/ui'

export const CustomTextField: React.FC = () => {
  const { value, setValue } = useField() // highlight-line

  return <input onChange={(e) => setValue(e.target.value)} value={value} />
}
```

----------------------------------------

TITLE: Refreshing Authentication Token in Payload CMS using REST API
DESCRIPTION: Shows how to refresh an authentication token in Payload CMS using the REST API. This operation requires a non-expired token and returns updated user information and a new token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
const res = await fetch(
  'http://localhost:3000/api/[collection-slug]/refresh-token',
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  },
)

const json = await res.json()

// JSON will be equal to the following:
/*
{
  user: {
    email: 'dev@payloadcms.com',
    createdAt: "2020-12-27T21:16:45.645Z",
    updatedAt: "2021-01-02T18:37:41.588Z",
    id: "5ae8f9bde69e394e717c8832"
  },
  refreshedToken: '34o4345324...',
  exp: 1609619861
}
*/
```

----------------------------------------

TITLE: Handling Async Hooks with Transactions
DESCRIPTION: Demonstrates proper and improper ways to handle async operations with transactions, including warnings about non-awaited calls and safe patterns for async operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/transactions.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
const afterChange: CollectionAfterChangeHook = async ({ req }) => {
  // WARNING: an async call made with the same req, but NOT awaited,
  // may fail resulting in an OK response being returned with response data that is not committed
  const dangerouslyIgnoreAsync = req.payload.create({
    req,
    collection: 'my-slug',
    data: {
      some: 'other data',
    },
  })

  // Should this call fail, it will not rollback other changes
  // because the req (and its transactionID) is not passed through
  const safelyIgnoredAsync = req.payload.create({
    collection: 'my-slug',
    data: {
      some: 'other data',
    },
  })
}
```

----------------------------------------

TITLE: Global Operations in PayloadCMS
DESCRIPTION: Shows how to find and update global configurations with access control options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_15

LANGUAGE: javascript
CODE:
```
const result = await payload.findGlobal({
  slug: 'header', // required
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

LANGUAGE: javascript
CODE:
```
const result = await payload.updateGlobal({
  slug: 'header', // required
  data: {
    // required
    nav: [
      {
        url: 'https://google.com',
      },
      {
        url: 'https://payloadcms.com',
      },
    ],
  },
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  overrideLock: false, // By default, document locks are ignored. Set to false to enforce locks.
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Configuring Plugins in Payload Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to add plugins to the Payload configuration using the 'plugins' property in the buildConfig function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  // highlight-start
  plugins: [
    // Add Plugins here
  ],
  // highlight-end
})
```

----------------------------------------

TITLE: Installing Required Payload Packages
DESCRIPTION: Command to install core Payload packages and dependencies for integration with Next.js.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/installation.mdx#2025-04-12_snippet_1

LANGUAGE: bash
CODE:
```
pnpm i payload @payloadcms/next @payloadcms/richtext-lexical sharp graphql
```

----------------------------------------

TITLE: Executing Transaction with PayloadCMS Find Operation
DESCRIPTION: Demonstrates how to perform a find operation while passing the request object for transaction handling in Postgres or MongoDB replica sets.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_2

LANGUAGE: javascript
CODE:
```
const post = await payload.find({
  collection: 'posts',
  req, // passing req is recommended
})
```

----------------------------------------

TITLE: Installing the Payload Cloud Plugin in the Payload Config
DESCRIPTION: Shows how to add the Payload Cloud plugin to your Payload configuration. The plugin integrates the Payload instance with Payload Cloud's file storage, email delivery, and upload caching features.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/payload-cloud/README.md#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { payloadCloudPlugin } from '@payloadcms/payload-cloud'
import { buildConfig } from 'payload'

export default buildConfig({
  plugins: [payloadCloudPlugin()],
  // rest of config
})
```

----------------------------------------

TITLE: Importing Global Hook Types in PayloadCMS
DESCRIPTION: TypeScript type imports for various global hooks in PayloadCMS, including BeforeValidate, BeforeChange, AfterChange, BeforeRead, and AfterRead hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type {
  GlobalBeforeValidateHook,
  GlobalBeforeChangeHook,
  GlobalAfterChangeHook,
  GlobalBeforeReadHook,
  GlobalAfterReadHook,
} from 'payload'
```

----------------------------------------

TITLE: Implementing Read Access Control
DESCRIPTION: Example showing how to implement read access control in a Collection to restrict which users can read documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithReadAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    read: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Creating a Server Feature with Custom Nodes in Lexical for Payload CMS
DESCRIPTION: This snippet demonstrates how to use the createServerFeature and createNode helper functions to define a server-side feature with custom node handling for the Lexical rich text editor. It shows how to implement HTML conversion for a custom node.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { createServerFeature, createNode } from '@payloadcms/richtext-lexical'
import { MyNode } from './nodes/MyNode'

export const MyFeature = createServerFeature({
  feature: {
    nodes: [
      // Use the createNode helper function to more easily create nodes with proper typing
      createNode({
        converters: {
          html: {
            converter: () => {
              return `<hr/>`
            },
            nodeTypes: [MyNode.getType()],
          },
        },
        // Here you can add your actual node. On the server, they will be
        // used to initialize a headless editor which can be used to perform
        // operations on the editor, like markdown / html conversion.
        node: MyNode,
      }),
    ],
  },
  key: 'myFeature',
})
```

----------------------------------------

TITLE: Implementing Custom Auth Strategy in Payload CMS with TypeScript
DESCRIPTION: Example implementation of a custom authentication strategy in Payload CMS that validates users based on code and secret headers. The strategy demonstrates how to query users and return appropriate authentication responses including optional response headers.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/custom-strategies.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Users: CollectionConfig = {
  slug: 'users',
  auth: {
    disableLocalStrategy: true,
    strategies: [
      {
        name: 'custom-strategy',
        authenticate: ({ payload, headers }) => {
          const usersQuery = await payload.find({
            collection: 'users',
            where: {
              code: {
                equals: headers.get('code'),
              },
              secret: {
                equals: headers.get('secret'),
              },
            },
          })

          return {
            user: usersQuery.docs[0] ? {
              collection: 'users'
              ...usersQuery.docs[0],
            } : null,

            responseHeaders: new Headers({
              'some-header': 'my header value'
            })
          }
        }
      }
    ]
  },
  fields: [
    {
      name: 'code',
      type: 'text',
      index: true,
      unique: true,
    },
    {
      name: 'secret',
      type: 'text',
    },
  ]
}
```

----------------------------------------

TITLE: Configuring Field Hooks in Payload CMS
DESCRIPTION: Demonstrates how to add hooks to a field configuration in Payload CMS. This example shows the basic structure for defining field hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const FieldWithHooks: Field = {
  // ...
  hooks: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Configuring Rich Text Field in TypeScript
DESCRIPTION: Example showing how to configure a Rich Text field in PayloadCMS with admin options. Shows the basic structure for defining a Rich Text field with TypeScript typing.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/rich-text.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyRichTextField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Configuring Search Plugin in Payload Config
DESCRIPTION: Example of how to include and configure the Search Plugin in the Payload CMS configuration file. It demonstrates setting up collections and default priorities.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/search.mdx#2025-04-12_snippet_1

LANGUAGE: javascript
CODE:
```
import { buildConfig } from 'payload'
import { searchPlugin } from '@payloadcms/plugin-search'

const config = buildConfig({
  collections: [
    {
      slug: 'pages',
      fields: [],
    },
    {
      slug: 'posts',
      fields: [],
    },
  ],
  plugins: [
    searchPlugin({
      collections: ['pages', 'posts'],
      defaultPriorities: {
        pages: 10,
        posts: 20,
      },
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Configuring Field Access Control for Create, Read, and Update Operations
DESCRIPTION: Example demonstrating how to configure access control for create, read, and update operations on a field within a collection in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/fields.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload';

export const Posts: CollectionConfig = {
  slug: 'posts',
  fields: [
    {
      name: 'title',
      type: 'text',
      // highlight-start
      access: {
        create: ({ req: { user } }) => { ... },
        read: ({ req: { user } }) => { ... },
        update: ({ req: { user } }) => { ... },
      },
      // highlight-end
    };
  ],
};
```

----------------------------------------

TITLE: Authenticating User with Server Function in Payload CMS
DESCRIPTION: This server function demonstrates how to authenticate a user using Payload's authentication system. It retrieves request headers and uses payload.auth to fetch user authentication details.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
'use server'

import { headers as getHeaders } from 'next/headers'
import config from '@payload-config'
import { getPayload } from 'payload'

export const authenticateUser = async () => {
  const payload = await getPayload({ config })
  const headers = await getHeaders()
  const { user } = await payload.auth({ headers })

  if (user) {
    return { hello: user.email }
  }

  return { hello: 'Not authenticated' }
}
```

----------------------------------------

TITLE: Implementing Markdown Output in Payload Collection
DESCRIPTION: Extended example showing how to automatically generate Markdown output from a Lexical richtext field in a Payload collection using hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-markdown.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'
import type { CollectionConfig, RichTextField } from 'payload'

import {
  convertLexicalToMarkdown,
  editorConfigFactory,
  lexicalEditor,
} from '@payloadcms/richtext-lexical'

const Pages: CollectionConfig = {
  slug: 'pages',
  fields: [
    {
      name: 'nameOfYourRichTextField',
      type: 'richText',
      editor: lexicalEditor(),
    },
    {
      name: 'markdown',
      type: 'textarea',
      admin: {
        hidden: true,
      },
      hooks: {
        afterRead: [
          ({ siblingData, siblingFields }) => {
            const data: SerializedEditorState =
              siblingData['nameOfYourRichTextField']

            if (!data) {
              return ''
            }

            const markdown = convertLexicalToMarkdown({
              data,
              editorConfig: editorConfigFactory.fromField({
                field: siblingFields.find(
                  (field) =>
                    'name' in field && field.name === 'nameOfYourRichTextField',
                ) as RichTextField,
              }),
            })

            return markdown
          },
        ],
        beforeChange: [
          ({ siblingData }) => {
            // Ensure that the markdown field is not saved in the database
            delete siblingData['markdown']
            return null
          },
        ],
      },
    },
  ],
}
```

----------------------------------------

TITLE: Basic Plugin Configuration in PayloadCMS
DESCRIPTION: Example configuration showing how to set up the nested docs plugin with basic options including collection specification and label/URL generation functions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/nested-docs.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { nestedDocsPlugin } from '@payloadcms/plugin-nested-docs'

const config = buildConfig({
  collections: [
    {
      slug: 'pages',
      fields: [
        {
          name: 'title',
          type: 'text',
        },
        {
          name: 'slug',
          type: 'text',
        },
      ],
    },
  ],
  plugins: [
    nestedDocsPlugin({
      collections: ['pages'],
      generateLabel: (_, doc) => doc.title,
      generateURL: (docs) =>
        docs.reduce((url, doc) => `${url}/${doc.slug}`, ''),
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Implementing afterLogout Hook in PayloadCMS
DESCRIPTION: Hook that runs after logout operations are completed. Provides access to the request object for post-logout processing.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_14

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterLogoutHook } from 'payload';

const afterLogoutHook: CollectionAfterLogoutHook = async ({
  req,
}) => {...}
```

----------------------------------------

TITLE: Implementing Basic Blocks Field in TypeScript with Payload CMS
DESCRIPTION: Basic implementation of a Blocks Field in Payload CMS showing the required type and blocks properties. This demonstrates the minimum configuration needed to create a blocks field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyBlocksField: Field = {
  // ...
  // highlight-start
  type: 'blocks',
  blocks: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring Relationship Field in TypeScript
DESCRIPTION: Demonstrates how to set up a basic Relationship field in a Payload CMS collection configuration. This example shows the minimal required options for creating a relationship to a 'products' collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyRelationshipField: Field = {
  // ...
  // highlight-start
  type: 'relationship',
  relationTo: 'products',
  // highlight-end
}
```

----------------------------------------

TITLE: Implementing Role-Based Access Control in PayloadCMS
DESCRIPTION: Shows how to implement role-based access control for post deletion in PayloadCMS. The function checks user authentication and role authorization before allowing the delete operation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
export async function deletePost(postId, user) {
  if (!user || user.role !== 'admin') {
    throw new Error('Unauthorized')
  }

  const payload = await getPayload({ config })
  return await payload.delete({ collection: 'posts', id: postId })
}
```

----------------------------------------

TITLE: Logging in to Payload CMS using GraphQL
DESCRIPTION: Shows how to log in to Payload CMS using a GraphQL mutation. This operation accepts an email and password, returning user information, token, and expiration time.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_5

LANGUAGE: graphql
CODE:
```
mutation {
  login[collection-singular-label](email: "dev@payloadcms.com", password: "yikes") {
    user {
      email
    }
    exp
    token
  }
}
```

----------------------------------------

TITLE: Using Dynamic Default Value with Function
DESCRIPTION: Example of using a function to dynamically set a default value for a field. The function has access to the user, locale, and request object to generate context-aware default values.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const translation: {
  en: 'Written by'
  es: 'Escrito por'
}

export const myField: Field = {
  name: 'attribution',
  type: 'text',
  // highlight-start
  defaultValue: ({ user, locale, req }) =>
    `${translation[locale]} ${user.name}`,
  // highlight-end
}
```

----------------------------------------

TITLE: Using Create Payload App CLI Commands and Options
DESCRIPTION: Command-line usage instructions for create-payload-app showing various installation methods, template options, and package manager preferences. Includes basic commands, template selection flags, and package manager options.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/create-payload-app/README.md#2025-04-12_snippet_0

LANGUAGE: text
CODE:
```
  USAGE

      $ npx create-payload-app
      $ npx create-payload-app my-project
      $ npx create-payload-app -n my-project -t website

  OPTIONS

      -n     my-payload-app         Set project name
      -t     template_name          Choose specific template

        Available templates:

        blank                       Blank Template
        website                     Website Template
        ecommerce                   E-commerce Template
        plugin                      Template for creating a Payload plugin
        payload-demo                Payload demo site at https://demo.payloadcms.com
        payload-website             Payload website CMS at https://payloadcms.com

      --use-npm                     Use npm to install dependencies
      --use-yarn                    Use yarn to install dependencies
      --use-pnpm                    Use pnpm to install dependencies
      --no-deps                     Do not install any dependencies
      -h                            Show help
```

----------------------------------------

TITLE: Creating Document with File Upload using Server Function in Payload CMS
DESCRIPTION: This server function demonstrates how to create a new document with a file upload in the 'posts' collection. It merges the upload file into the document data and uses payload.create to create the post.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
'use server'

import { getPayload } from 'payload'
import config from '@payload-config'

export async function createPostWithUpload(data, upload) {
  const payload = await getPayload({ config })

  try {
    // Prepare the data with the file
    const postData = {
      ...data,
      media: upload,
    }

    const post = await payload.create({
      collection: 'posts',
      data: postData,
    })

    return post
  } catch (error) {
    throw new Error(`Error creating post: ${error.message}`)
  }
}
```

----------------------------------------

TITLE: Implementing Custom Components in Collection Admin Configuration
DESCRIPTION: Example showing how to override Collection Components using the admin.components property in the Collection Config to customize specific UI elements in the Admin Panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      // highlight-line
      // ...
    },
  },
}
```

----------------------------------------

TITLE: Creating a Custom React Context Provider Component
DESCRIPTION: This example shows how to implement a custom React Context provider with a corresponding hook for accessing the context. It includes the 'use client' directive required for client components and demonstrates proper context creation and usage patterns.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-providers.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'
import React, { createContext, use } from 'react'

const MyCustomContext = React.createContext(myCustomValue)

export function MyProvider({ children }: { children: React.ReactNode }) {
  return <MyCustomContext value={myCustomValue}>{children}</MyCustomContext>
}

export const useMyCustomContext = () => use(MyCustomContext)
```

----------------------------------------

TITLE: Adding Multiple Languages to Payload CMS
DESCRIPTION: Configuration example showing how to add support for multiple languages (English and German) by importing language files from the @payloadcms/translations package.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/i18n.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { en } from '@payloadcms/translations/languages/en'
import { de } from '@payloadcms/translations/languages/de'

export default buildConfig({
  // ...
  // highlight-start
  i18n: {
    supportedLanguages: { en, de },
  },
  // highlight-end
})
```

----------------------------------------

TITLE: Default Field Validation Imports in TypeScript
DESCRIPTION: Lists all available default field validation functions that can be imported from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
import {
  array,
  blocks,
  checkbox,
  code,
  date,
  email,
  group,
  json,
  number,
  point,
  radio,
  relationship,
  richText,
  select,
  tabs,
  text,
  textarea,
  upload,
} from 'payload/shared'
```

----------------------------------------

TITLE: Importing Payload Config and Using getPayload in TypeScript
DESCRIPTION: This snippet demonstrates how to import the Payload Config and use the getPayload function to initialize Payload in a standalone script. It includes examples of creating a user and a page using the Payload API.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/outside-nextjs.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { getPayload } from 'payload'
import config from '@payload-config'

const seed = async () => {
  // Get a local copy of Payload by passing your config
  const payload = await getPayload({ config })

  const user = await payload.create({
    collection: 'users',
    data: {
      email: 'dev@payloadcms.com',
      password: 'some-password',
    },
  })

  const page = await payload.create({
    collection: 'pages',
    data: {
      title: 'My Homepage',
      // other data to seed here
    },
  })
}

// Call the function here to run your seed script
await seed()
```

----------------------------------------

TITLE: Adding New Custom View in Payload Config
DESCRIPTION: Demonstrates how to add a new custom view to the Payload admin panel by defining a new key in the views object with Component and path properties.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      views: {
        myCustomView: {
          Component: '/path/to/MyCustomView#MyCustomViewComponent',
          path: '/my-custom-view',
        },
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring Preview for a Collection in Payload CMS
DESCRIPTION: This snippet shows how to add a preview function to a collection config in Payload CMS. The function generates a preview URL based on the document's slug.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Pages: CollectionConfig = {
  slug: 'pages',
  admin: {
    preview: ({ slug }) => `http://localhost:3000/${slug}`,
  },
  fields: [
    {
      name: 'slug',
      type: 'text',
    },
  ],
}
```

----------------------------------------

TITLE: Creating Reusable Access Control Functions
DESCRIPTION: Example of defining access control logic in a separate file for better code organization. This example shows a function that allows authenticated users and restricts guest users to public documents only.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Access } from 'payload'

export const canReadPage: Access = ({ req: { user } }) => {
  // Allow authenticated users
  if (user) {
    return true
  }

  // By returning a Query, guest users can read public Documents
  // Note: this assumes you have a `isPublic` checkbox field on your Collection
  return {
    isPublic: {
      equals: true,
    },
  }
}
```

----------------------------------------

TITLE: beforeChange Hook Implementation
DESCRIPTION: Example of implementing a beforeChange hook that runs after validation during create and update operations to modify data before saving.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeChangeHook } from 'payload'

const beforeChangeHook: CollectionBeforeChangeHook = async ({ data }) => {
  return data
}
```

----------------------------------------

TITLE: Interacting with Payload API Using React Hook
DESCRIPTION: The `usePayloadAPI` hook allows making and reconfiguring REST API requests to a Payload instance. It returns fetch data, error, and loading states, alongside methods for modifying the request parameters and triggering updates.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_19

LANGUAGE: tsx
CODE:
```
"use client"
import { usePayloadAPI } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  // Fetch data from a collection item using its ID
  const [{ data, isError, isLoading }, { setParams }] = usePayloadAPI(
    '/api/posts/123',
    {
      initialParams: { depth: 1 },
    },
  )

  if (isLoading) return <p>Loading...</p>
  if (isError) return <p>Error occurred while fetching data.</p>

  return (
    <div>
      <h1>{data?.title}</h1>
      <button onClick={() => setParams({ cacheBust: Date.now() })}>
        Refresh Data
      </button>
    </div>
  )
}

```

----------------------------------------

TITLE: Setting Static Default Value for Field
DESCRIPTION: Example of setting a static default value for a field in the Field Config. This is used to prefill fields with initial values in both the Admin Panel and API requests.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text',
  name: 'myField',
  defaultValue: 'Hello, World!', // highlight-line
}
```

----------------------------------------

TITLE: Implementing Custom Endpoints in PayloadCMS Collection
DESCRIPTION: Example showing how to define custom endpoints for an Orders collection, including tracking info retrieval and update operations with authentication handling.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rest-api/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Orders: CollectionConfig = {
  slug: 'orders',
  fields: [
    /* ... */
  ],
  endpoints: [
    {
      path: '/:id/tracking',
      method: 'get',
      handler: async (req) => {
        const tracking = await getTrackingInfo(req.routeParams.id)

        if (!tracking) {
          return Response.json({ error: 'not found' }, { status: 404 })
        }

        return Response.json({
          message: `Hello ${req.routeParams.name as string} @ ${req.routeParams.group as string}`,
        })
      },
    },
    {
      path: '/:id/tracking',
      method: 'post',
      handler: async (req) => {
        const data = await req.json()
        await req.payload.update({
          collection: 'tracking',
          data: {
            // data to update the document with
          },
        })
        return Response.json({
          message: 'successfully updated tracking info',
        })
      },
    },
    {
      path: '/:id/forbidden',
      method: 'post',
      handler: async (req) => {
        if (!req.user) {
          return Response.json({ error: 'forbidden' }, { status: 403 })
        }
        return Response.json({
          message: 'successfully updated tracking info',
        })
      },
    },
  ],
}
```

----------------------------------------

TITLE: Basic Field Validation in TypeScript
DESCRIPTION: Shows how to implement a basic custom validation function for a text field in Payload CMS. The validation function returns either true or an error message string.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text',
  name: 'myField',
  validate: (value) => Boolean(value) || 'This field is required',
}
```

----------------------------------------

TITLE: Implementing Collection AfterChange Hook with Transactions
DESCRIPTION: Example showing how to properly use transactions within a collection's afterChange hook by passing the request object to maintain transaction context.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/transactions.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const afterChange: CollectionAfterChangeHook = async ({ req }) => {
  // because req.transactionID is assigned from Payload and passed through,
  // my-slug will only persist if the entire request is successful
  await req.payload.create({
    req,
    collection: 'my-slug',
    data: {
      some: 'data',
    },
  })
}
```

----------------------------------------

TITLE: Updating Multiple Documents in PayloadCMS
DESCRIPTION: Demonstrates how to update multiple documents matching a query with file upload support.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_8

LANGUAGE: javascript
CODE:
```
const result = await payload.update({
  collection: 'posts', // required
  where: {
    // required
    fieldName: { equals: 'value' },
  },
  data: {
    // required
    title: 'sure',
    description: 'maybe',
  },
  depth: 0,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  overrideLock: false, // By default, document locks are ignored. Set to false to enforce locks.
  showHiddenFields: true,

  // If your collection supports uploads, you can upload
  // a file directly through the Local API by providing
  // its full, absolute file path.
  filePath: path.resolve(__dirname, './path-to-image.jpg'),

  // If you are uploading a file and would like to replace
  // the existing file instead of generating a new filename,
  // you can set the following property to `true`
  overwriteExistingFiles: true,
})
```

----------------------------------------

TITLE: Unlocking User Account in Payload CMS using REST API
DESCRIPTION: Demonstrates how to unlock a user account in Payload CMS using the REST API. This operation is useful when a user has locked themselves out due to max login attempts.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_14

LANGUAGE: typescript
CODE:
```
const res = await fetch(`http://localhost:3000/api/[collection-slug]/unlock`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
})
```

----------------------------------------

TITLE: Customizing Lexical Editor Features
DESCRIPTION: Advanced example demonstrating how to customize the Lexical editor with additional features like links, uploads, and custom blocks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import {
  BlocksFeature,
  LinkFeature,
  UploadFeature,
  lexicalEditor,
} from '@payloadcms/richtext-lexical'
import { Banner } from '../blocks/Banner'
import { CallToAction } from '../blocks/CallToAction'

{
  editor: lexicalEditor({
    features: ({ defaultFeatures, rootFeatures }) => [
      ...defaultFeatures,
      LinkFeature({
        // Example showing how to customize the built-in fields
        // of the Link feature
        fields: ({ defaultFields }) => [
          ...defaultFields,
          {
            name: 'rel',
            label: 'Rel Attribute',
            type: 'select',
            hasMany: true,
            options: ['noopener', 'noreferrer', 'nofollow'],
            admin: {
              description:
                'The rel attribute defines the relationship between a linked resource and the current document. This is a custom link field.',
            },
          },
        ],
      }),
      UploadFeature({
        collections: {
          uploads: {
            // Example showing how to customize the built-in fields
            // of the Upload feature
            fields: [
              {
                name: 'caption',
                type: 'richText',
                editor: lexicalEditor(),
              },
            ],
          },
        },
      }),
      // This is incredibly powerful. You can re-use your Payload blocks
      // directly in the Lexical editor as follows:
      BlocksFeature({
        blocks: [Banner, CallToAction],
      }),
    ],
  })
}
```

----------------------------------------

TITLE: Implementing Field-level Access Control
DESCRIPTION: Example showing how to define field-level access control in a Field Config. This allows for granular permissions to be set specifically for individual fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text',
  name: 'myField',
  // highlight-start
  access: {
    // ...
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Implementing Update Access Control
DESCRIPTION: Example showing how to implement update access control in a Collection to restrict which users can update documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithUpdateAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    update: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Local API Query Implementation
DESCRIPTION: Demonstrates how to use the Local API to query documents using the find operation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Payload } from 'payload'

const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    where: {
      color: {
        equals: 'mint',
      },
    },
  })

  return posts
}
```

----------------------------------------

TITLE: Configuring SMTP Email with Nodemailer in Payload CMS
DESCRIPTION: Example of configuring email functionality in Payload CMS using the nodemailer adapter with SMTP transport options. This shows how to set up basic email configuration with host, port, and authentication details.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/email/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { nodemailerAdapter } from '@payloadcms/email-nodemailer'

export default buildConfig({
  email: nodemailerAdapter({
    defaultFromAddress: 'info@payloadcms.com',
    defaultFromName: 'Payload',
    // Nodemailer transportOptions
    transportOptions: {
      host: process.env.SMTP_HOST,
      port: 587,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    },
  }),
})
```

----------------------------------------

TITLE: Preventing Infinite Loops with Context in Payload CMS
DESCRIPTION: Demonstrates the correct way to prevent infinite loops when updating documents in afterChange hooks using context flags.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/context.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

const MyCollection: CollectionConfig = {
  slug: 'slug',
  hooks: {
    afterChange: [
      async ({ context, doc, req }) => {
        // return if flag was previously set
        if (context.triggerAfterChange === false) {
          return
        }
        await req.payload.update({
          collection: contextHooksSlug,
          id: doc.id,
          data: {
            ...(await fetchCustomerData(data.customerID)),
          },
          context: {
            // set a flag to prevent from running again
            triggerAfterChange: false,
          },
        })
      },
    ],
  },
  fields: [
    /* ... */
  ],
}
```

----------------------------------------

TITLE: Creating a Document with Server Function in Payload CMS
DESCRIPTION: This server function demonstrates how to create a new document in the 'posts' collection using Payload's Local API. It uses getPayload to initialize the Payload instance and handles potential errors.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
'use server'

import { getPayload } from 'payload'
import config from '@payload-config'

export async function createPost(data) {
  const payload = await getPayload({ config })

  try {
    const post = await payload.create({
      collection: 'posts',
      data,
    })
    return post
  } catch (error) {
    throw new Error(`Error creating post: ${error.message}`)
  }
}
```

----------------------------------------

TITLE: Using Config Hook in PayloadCMS
DESCRIPTION: Demonstrates usage of useConfig hook for accessing PayloadCMS configuration and retrieving entity-specific configs.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_13

LANGUAGE: tsx
CODE:
```
'use client'
import { useConfig } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { config } = useConfig()

  return <span>{config.serverURL}</span>
}
```

LANGUAGE: tsx
CODE:
```
'use client'
import { useConfig } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { getEntityConfig } = useConfig()
  const mediaConfig = getEntityConfig({ collectionSlug: 'media' })

  return (
    <span>The media collection has {mediaConfig.fields.length} fields.</span>
  )
}
```

----------------------------------------

TITLE: Retrieving Logged-in User Information in Payload CMS using REST API
DESCRIPTION: Demonstrates how to retrieve information about the currently logged-in user using the REST API. This operation returns user details, token, and expiration time.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
{
  user: { // The JWT "payload" ;) from the logged in user
    email: 'dev@payloadcms.com',
    createdAt: "2020-12-27T21:16:45.645Z",
    updatedAt: "2021-01-02T18:37:41.588Z",
    id: "5ae8f9bde69e394e717c8832"
  },
  token: '34o4345324...', // The token that can be used to authenticate the user
  exp: 1609619861, // Unix timestamp representing when the user's token will expire
}
```

----------------------------------------

TITLE: Implementing Error Handling in PayloadCMS Post Creation
DESCRIPTION: Demonstrates proper error handling for creating posts using PayloadCMS Local API, including try/catch blocks and structured error responses. The function creates a new post while safely handling potential errors and providing appropriate error logging.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
export async function createPost(data) {
  try {
    const payload = await getPayload({ config })
    return await payload.create({ collection: 'posts', data })
  } catch (error) {
    console.error('Error creating post:', error)
    return { error: 'Failed to create post' }
  }
}
```

----------------------------------------

TITLE: Implementing User Preferences in a React Component for Payload CMS Admin Panel
DESCRIPTION: This example demonstrates how to use the usePreferences hook to retrieve and store user color preferences in a custom Admin Panel component. It shows the pattern for reading preferences on component mount and updating them when users interact with the interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preferences.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'
import React, { Fragment, useState, useEffect, useCallback } from 'react'
import { usePreferences } from '@payloadcms/ui'

const lastUsedColorsPreferenceKey = 'last-used-colors'

export function CustomComponent() {
  const { getPreference, setPreference } = usePreferences()

  // Store the last used colors in local state
  const [lastUsedColors, setLastUsedColors] = useState([])

  // Callback to add a color to the last used colors
  const updateLastUsedColors = useCallback(
    (color) => {
      // First, check if color already exists in last used colors.
      // If it already exists, there is no need to update preferences
      const colorAlreadyExists = lastUsedColors.indexOf(color) > -1

      if (!colorAlreadyExists) {
        const newLastUsedColors = [...lastUsedColors, color]

        setLastUsedColors(newLastUsedColors)
        setPreference(lastUsedColorsPreferenceKey, newLastUsedColors)
      }
    },
    [lastUsedColors, setPreference],
  )

  // Retrieve preferences on component mount
  // This will only be run one time, because the `getPreference` method never changes
  useEffect(() => {
    const asyncGetPreference = async () => {
      const lastUsedColorsFromPreferences = await getPreference(
        lastUsedColorsPreferenceKey,
      )
      setLastUsedColors(lastUsedColorsFromPreferences)
    }

    asyncGetPreference()
  }, [getPreference])

  return (
    <div>
      <button type="button" onClick={() => updateLastUsedColors('red')}>
        Use red
      </button>
      <button type="button" onClick={() => updateLastUsedColors('blue')}>
        Use blue
      </button>
      <button type="button" onClick={() => updateLastUsedColors('purple')}>
        Use purple
      </button>
      <button type="button" onClick={() => updateLastUsedColors('yellow')}>
        Use yellow
      </button>
      {lastUsedColors && (
        <Fragment>
          <h5>Last used colors:</h5>
          <ul>
            {lastUsedColors?.map((color) => <li key={color}>{color}</li>)}
          </ul>
        </Fragment>
      )}
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing beforeDelete Hook in Payload CMS (TypeScript)
DESCRIPTION: This code snippet illustrates the implementation of a beforeDelete hook in Payload CMS. The hook runs before the delete operation, and any returned values are discarded.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeDeleteHook } from 'payload';

const beforeDeleteHook: CollectionBeforeDeleteHook = async ({
  req,
  id,
}) => {...}
```

----------------------------------------

TITLE: Configuring Custom GraphQL Query in Payload CMS
DESCRIPTION: Example of adding a custom GraphQL query to the Payload configuration file. It demonstrates how to define the query type, arguments, and resolver.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/extending.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import myCustomQueryResolver from './graphQL/resolvers/myCustomQueryResolver'

export default buildConfig({
  graphQL: {
    // highlight-start
    queries: (GraphQL, payload) => {
      return {
        MyCustomQuery: {
          type: new GraphQL.GraphQLObjectType({
            name: 'MyCustomQuery',
            fields: {
              text: {
                type: GraphQL.GraphQLString,
              },
              someNumberField: {
                type: GraphQL.GraphQLFloat,
              },
            },
          }),
          args: {
            argNameHere: {
              type: new GraphQL.GraphQLNonNull(GraphQLString),
            },
          },
          resolve: myCustomQueryResolver,
        },
      }
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Custom Server Component Implementation
DESCRIPTION: Example of creating a custom server component that uses the Payload API to fetch and display data.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { Payload } from 'payload'

async function MyServerComponent({
  payload,
}: {
  payload: Payload
}) {
  const page = await payload.findByID({
    collection: 'pages',
    id: '123',
  })

  return <p>{page.title}</p>
}
```

----------------------------------------

TITLE: Custom Relationship Field Components in React
DESCRIPTION: Implementation of custom server and client components for relationship fields in PayloadCMS using React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { RelationshipField } from '@payloadcms/ui'
import type { RelationshipFieldServerComponent } from 'payload'

export const CustomRelationshipFieldServer: RelationshipFieldServerComponent =
  ({ clientField, path, schemaPath, permissions }) => {
    return (
      <RelationshipField
        field={clientField}
        path={path}
        schemaPath={schemaPath}
        permissions={permissions}
      />
    )
  }
```

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { RelationshipField } from '@payloadcms/ui'
import type { RelationshipFieldClientComponent } from 'payload'

export const CustomRelationshipFieldClient: RelationshipFieldClientComponent = (
  props,
) => {
  return <RelationshipField {...props} />
}
```

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { RelationshipFieldLabelServerComponent } from 'payload'

export const CustomRelationshipFieldLabelServer: RelationshipFieldLabelServerComponent =
  (clientField, path) => {
    return (
      <FieldLabel
        label={clientField?.label || clientField?.name}
        path={path}
        required={clientField?.required}
      />
    )
  }
```

----------------------------------------

TITLE: Implementing useLivePreview React Hook for Payload CMS
DESCRIPTION: A detailed implementation of a useLivePreview React hook for Payload CMS. This hook subscribes to live preview events, handles data updates, and manages the component lifecycle. It uses the subscribe, unsubscribe, and ready functions from @payloadcms/live-preview.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/client.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
import { subscribe, unsubscribe, ready } from '@payloadcms/live-preview'
import { useCallback, useEffect, useState, useRef } from 'react'

export const useLivePreview = <T extends any>(props: {
  depth?: number
  initialData: T
  serverURL: string
}): {
  data: T
  isLoading: boolean
} => {
  const { depth = 0, initialData, serverURL } = props
  const [data, setData] = useState<T>(initialData)
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const hasSentReadyMessage = useRef<boolean>(false)

  const onChange = useCallback((mergedData) => {
    // When a change is made, the `onChange` callback will be called with the merged data
    // Set this merged data into state so that React will re-render the UI
    setData(mergedData)
    setIsLoading(false)
  }, [])

  useEffect(() => {
    // Listen for `window.postMessage` events from the Admin Panel
    // When a change is made, the `onChange` callback will be called with the merged data
    const subscription = subscribe({
      callback: onChange,
      depth,
      initialData,
      serverURL,
    })

    // Once subscribed, send a `ready` message back up to the Admin Panel
    // This will indicate that the front-end is ready to receive messages
    if (!hasSentReadyMessage.current) {
      hasSentReadyMessage.current = true

      ready({
        serverURL,
      })
    }

    // When the component unmounts, unsubscribe from the `window.postMessage` events
    return () => {
      unsubscribe(subscription)
    }
  }, [serverURL, onChange, depth, initialData])

  return {
    data,
    isLoading,
  }
}
```

----------------------------------------

TITLE: useField Hook Return Type Definition
DESCRIPTION: TypeScript interface definition showing all properties and methods returned by the useField hook, including value management, validation states, and form processing indicators.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_1

LANGUAGE: ts
CODE:
```
type FieldType<T> = {
  errorMessage?: string
  errorPaths?: string[]
  filterOptions?: FilterOptionsResult
  formInitializing: boolean
  formProcessing: boolean
  formSubmitted: boolean
  initialValue?: T
  path: string
  permissions: FieldPermissions
  readOnly?: boolean
  rows?: Row[]
  schemaPath: string
  setValue: (val: unknown, disableModifyingForm?: boolean) => void
  showError: boolean
  valid?: boolean
  value: T
}
```

----------------------------------------

TITLE: Unlocking User Account in Payload CMS using GraphQL
DESCRIPTION: Shows how to unlock a user account in Payload CMS using a GraphQL mutation. This operation is used when a user has exceeded max login attempts and needs to be unlocked.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_15

LANGUAGE: graphql
CODE:
```
mutation {
  unlock[collection-singular-label]
}
```

----------------------------------------

TITLE: Updating a Document with Server Function in Payload CMS
DESCRIPTION: This server function demonstrates how to update an existing document in the 'posts' collection using Payload's Local API. It requires the document ID and the data to be updated.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
'use server'

import { getPayload } from 'payload'
import config from '@payload-config'

export async function updatePost(id, data) {
  const payload = await getPayload({ config })

  try {
    const post = await payload.update({
      collection: 'posts',
      id, // the document id is required
      data,
    })
    return post
  } catch (error) {
    throw new Error(`Error updating post: ${error.message}`)
  }
}
```

----------------------------------------

TITLE: beforeOperation Hook Implementation
DESCRIPTION: Example of implementing a beforeOperation hook that can modify operation arguments or execute side-effects before an operation begins.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeOperationHook } from 'payload'

const beforeOperationHook: CollectionBeforeOperationHook = async ({
  args,
  operation,
  req,
}) => {
  return args // return modified operation arguments as necessary
}
```

----------------------------------------

TITLE: Importing and Initializing Payload Directly
DESCRIPTION: Example demonstrating how to import and initialize Payload when direct access through function arguments or request object is not available.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { getPayload } from 'payload'
import config from '@payload-config'

const payload = await getPayload({ config })
```

----------------------------------------

TITLE: Configuring Collection with Autosave in Payload CMS
DESCRIPTION: Example configuration for a Pages collection with autosave enabled. Demonstrates setting up access control, versions, and drafts with autosave functionality. The configuration shows both basic autosave enabling and custom interval settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/autosave.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Pages: CollectionConfig = {
  slug: 'pages',
  access: {
    read: ({ req }) => {
      // If there is a user logged in,
      // let them retrieve all documents
      if (req.user) return true

      // If there is no user,
      // restrict the documents that are returned
      // to only those where `_status` is equal to `published`
      return {
        _status: {
          equals: 'published',
        },
      }
    },
  },
  versions: {
    drafts: {
      autosave: true,

      // Alternatively, you can specify an `interval`:
      // autosave: {
      //   interval: 1500,
      // },
    },
  },
  //.. the rest of the Pages config here
}
```

----------------------------------------

TITLE: Basic Collection Hook Configuration in TypeScript
DESCRIPTION: Basic example showing how to add hooks to a Collection configuration using the hooks property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithHooks: CollectionConfig = {
  // ...
  hooks: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Configuring MongoDB Adapter in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure the MongoDB adapter in the Payload config using the mongooseAdapter. It sets up the database connection using an environment variable for the database URI.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { mongooseAdapter } from '@payloadcms/db-mongodb'

export default buildConfig({
  // ...
  // highlight-start
  db: mongooseAdapter({
    url: process.env.DATABASE_URI,
  }),
  // highlight-end
})
```

----------------------------------------

TITLE: Queuing a Task Job in Payload CMS
DESCRIPTION: Shows how to queue a job for a single task named 'createPost' using the payload.jobs.queue function. This allows for executing individual tasks as jobs.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/jobs.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
const createdJob = await payload.jobs.queue({
  task: 'createPost',
  input: {
    title: 'my title',
  },
})
```

----------------------------------------

TITLE: Creating a Custom Text Field Client Component in Payload CMS
DESCRIPTION: Shows how to implement a custom client-side component for a Text field in Payload CMS. This component is a simple wrapper around the default TextField component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { TextField } from '@payloadcms/ui'
import type { TextFieldClientComponent } from 'payload'

export const CustomTextFieldClient: TextFieldClientComponent = (props) => {
  return <TextField {...props} />
}
```

----------------------------------------

TITLE: Using useDocumentForm Hook in React Component
DESCRIPTION: Example demonstrating how to use useDocumentForm hook to access top-level form context from within child components, particularly useful in lexical blocks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { useDocumentForm } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { fields: parentDocumentFields } = useDocumentForm()

  return (
    <p>
      The document's Form has ${Object.keys(parentDocumentFields).length} fields
    </p>
  )
}
```

----------------------------------------

TITLE: Implementing a Payload CMS Plugin with Multiple Components
DESCRIPTION: Example showing how to create a plugin with multiple components including admin customizations, field types, and collections. This demonstrates a more comprehensive plugin implementation.
SOURCE: https://github.com/payloadcms/payload/blob/main/templates/plugin/README.md#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { Plugin } from 'payload/config';

export const myPlugin: Plugin = {
  // Add a custom field type
  fields: {
    // ...
  },
  // Extend the admin UI
  admin: {
    components: {
      // Add custom components to admin UI
      views: {
        Dashboard: {
          Cell: () => React.createElement('div', null, 'Custom Dashboard Cell'),
        },
      },
    },
  },
  // Add collections
  collections: [
    {
      slug: 'my-plugin-collection',
      fields: [
        {
          name: 'title',
          type: 'text',
        },
      ],
    },
  ],
};
```

----------------------------------------

TITLE: Logging in to Payload CMS using Local API
DESCRIPTION: Demonstrates how to log in to Payload CMS using the Local API. This operation accepts a collection slug, email, and password.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
const result = await payload.login({
  collection: '[collection-slug]',
  data: {
    email: 'dev@payloadcms.com',
    password: 'get-out',
  },
})
```

----------------------------------------

TITLE: Finding Global Versions in Payload CMS
DESCRIPTION: Example of finding and querying versions of a global document using the Payload Local API. Returns a paginated set of versions that can be customized with various parameters like depth, pagination, filtering, and locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/overview.mdx#2025-04-12_snippet_5

LANGUAGE: javascript
CODE:
```
// Result will be a paginated set of Versions.
// See /docs/queries/pagination for more.
const result = await payload.findGlobalVersions({
  slug: 'header', // required
  depth: 2,
  page: 1,
  limit: 10,
  where: {}, // pass a `where` query here
  sort: '-createdAt',
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Implementing afterOperation Hook in Payload CMS (TypeScript)
DESCRIPTION: This code snippet shows how to implement an afterOperation hook in Payload CMS. The hook can be used to modify the result of operations or execute side-effects that run after an operation has completed.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterOperationHook } from 'payload'

const afterOperationHook: CollectionAfterOperationHook = async ({ result }) => {
  return result
}
```

----------------------------------------

TITLE: Configuring Resend Email Adapter in Payload CMS
DESCRIPTION: Example of setting up the Resend email adapter in Payload CMS, which is a lightweight alternative to Nodemailer and preferred for serverless platforms like Vercel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/email/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { resendAdapter } from '@payloadcms/email-resend'

export default buildConfig({
  email: resendAdapter({
    defaultFromAddress: 'dev@payloadcms.com',
    defaultFromName: 'Payload CMS',
    apiKey: process.env.RESEND_API_KEY || '',
  }),
})
```

----------------------------------------

TITLE: Configuring Draft Access Control in Payload Collection
DESCRIPTION: Example showing how to restrict draft access using collection access control. Only logged in users can see drafts while public users see only published documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/drafts.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Pages: CollectionConfig = {
  slug: 'pages',
  access: {
    read: ({ req }) => {
      // If there is a user logged in,
      // let them retrieve all documents
      if (req.user) return true

      // If there is no user,
      // restrict the documents that are returned
      // to only those where `_status` is equal to `published`
      return {
        _status: {
          equals: 'published',
        },
      }
    },
  },
  versions: {
    drafts: true,
  },
  //.. the rest of the Pages config here
}
```

----------------------------------------

TITLE: Implementing afterError Hook in Payload CMS
DESCRIPTION: This code example shows how to implement an afterError hook in the Payload configuration. It includes the hook function structure and available arguments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  hooks: {
    afterError: [
      async ({ error }) => {
        // Do something
      },
    ],
  },
})
```

----------------------------------------

TITLE: Configuring Payload with Postgres Adapter
DESCRIPTION: TypeScript configuration example showing how to integrate the Postgres adapter with Payload CMS. Uses environment variables for database connection string and implements the adapter in the Payload config.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/db-postgres/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { postgresAdapter } from '@payloadcms/db-postgres'

export default buildConfig({
  db: postgresAdapter({
    pool: {
      connectionString: process.env.DATABASE_URI,
    },
  }),
  // ...rest of config
})
```

----------------------------------------

TITLE: Implementing Multiple Field Hooks in Payload CMS
DESCRIPTION: Shows how to configure multiple hook types for a field in Payload CMS, including beforeValidate, beforeChange, beforeDuplicate, afterChange, and afterRead hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload';

const FieldWithHooks: Field = {
  name: 'name',
  type: 'text',
  // highlight-start
  hooks: {
    beforeValidate: [(args) => {...}],
    beforeChange: [(args) => {...}],
    beforeDuplicate: [(args) => {...}],
    afterChange: [(args) => {...}],
    afterRead: [(args) => {...}],
  }
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring TypeScript Settings in Payload CMS
DESCRIPTION: Demonstrates how to customize TypeScript settings in the Payload config file, including auto-generation of interfaces and output file location.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  typescript: {
    // highlight-line
    // ...
  },
})
```

----------------------------------------

TITLE: TypeScript Field Hook Type Definition in Payload CMS
DESCRIPTION: Shows how to properly type field hooks using TypeScript, including generic type parameters for document type, value type, and sibling data type. Includes example implementation with typed arguments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { FieldHook } from 'payload'

// Field hook type is a generic that takes three arguments:
// 1: The document type
// 2: The value type
// 3: The sibling data type

type ExampleFieldHook = FieldHook<ExampleDocumentType, string, SiblingDataType>

const exampleFieldHook: ExampleFieldHook = (args) => {
  const {
    value, // Typed as `string` as shown above
    data, // Typed as a Partial of your ExampleDocumentType
    siblingData, // Typed as a Partial of SiblingDataType
    originalDoc, // Typed as ExampleDocumentType
    operation,
    req,
  } = args

  // Do something here...

  return value // should return a string as typed above, undefined, or null
}
```

----------------------------------------

TITLE: Basic Collection Configuration (TypeScript)
DESCRIPTION: This example demonstrates a simple collection configuration for a 'Posts' collection. It defines the slug and a single text field for the title.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Posts: CollectionConfig = {
  slug: 'posts',
  fields: [
    {
      name: 'title',
      type: 'text',
    },
  ],
}
```

----------------------------------------

TITLE: Using JWT Token Data in Access Control Functions
DESCRIPTION: Example demonstrating how to access JWT token data stored in req.user within access control functions. The snippet shows checking a user's role for permission control in an Invoices collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/token-data.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Invoices: CollectionConfig = {
  slug: 'invoices',
  access: {
    read: ({ req, data }) => {
      if (!req?.user) return false
      // highlight-start
      if ({ req.user?.role === 'super-admin'}) {
        return true
      }
      // highlight-end
      return data.owner === req.user.id
    }
  }
  fields: [
    {
      name: 'owner',
      relationTo: 'users'
    },
    // ... other fields
  ],
}
```

----------------------------------------

TITLE: Accessing Drizzle ORM Features in Payload CMS
DESCRIPTION: This code snippet demonstrates how to access and use Drizzle ORM features within Payload CMS after initialization. It includes examples of querying data using Drizzle's Querying API and Select API.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { posts } from './payload-generated-schema'
// To avoid installing Drizzle, you can import everything that drizzle has from our re-export path.
import { eq, sql, and } from '@payloadcms/db-postgres/drizzle'

// Drizzle's Querying API: https://orm.drizzle.team/docs/rqb
const posts = await payload.db.drizzle.query.posts.findMany()
// Drizzle's Select API https://orm.drizzle.team/docs/select
const result = await payload.db.drizzle
  .select()
  .from(posts)
  .where(
    and(eq(posts.id, 50), sql`lower(${posts.title}) = 'example post title'`),
  )
```

----------------------------------------

TITLE: MimeType Configuration
DESCRIPTION: Example of restricting allowed file types using mimeTypes configuration in a media collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Media: CollectionConfig = {
  slug: 'media',
  upload: {
    mimeTypes: ['image/*', 'application/pdf'],
  },
}
```

----------------------------------------

TITLE: Installing Database Adapters
DESCRIPTION: Commands for installing different database adapters (MongoDB, Postgres, SQLite) for Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/installation.mdx#2025-04-12_snippet_2

LANGUAGE: bash
CODE:
```
pnpm i @payloadcms/db-mongodb
```

LANGUAGE: bash
CODE:
```
pnpm i @payloadcms/db-postgres
```

LANGUAGE: bash
CODE:
```
pnpm i @payloadcms/db-sqlite
```

----------------------------------------

TITLE: Sending Emails in Payload CMS
DESCRIPTION: Example showing how to send an email using Payload's sendEmail method. This demonstrates the basic parameters required for sending an email once the adapter is configured.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/email/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
// Example of sending an email
const email = await payload.sendEmail({
  to: 'test@example.com',
  subject: 'This is a test email',
  text: 'This is my message body',
})
```

----------------------------------------

TITLE: Configuring Custom Edit Components for Globals in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure custom Edit View components for Globals in Payload CMS. It uses the 'admin.components.elements' property in the Global configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { GlobalConfig } from 'payload'

export const MyGlobal: GlobalConfig = {
  // ...
  admin: {
    components: {
      elements: {
        // ...
      },
    },
  },
}
```

----------------------------------------

TITLE: Implementing Code Field in a Collection (TypeScript)
DESCRIPTION: This snippet demonstrates how to implement a Code field within a Payload CMS collection configuration. It sets up a 'trackingCode' field with JavaScript language support in the admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'trackingCode', // required
      type: 'code', // required
      required: true,
      admin: {
        language: 'javascript',
      },
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Edit View Components in Payload CMS Collection (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure custom components for the Edit View in a Payload CMS collection. It shows the structure for replacing default components like Save Button, Save Draft Button, Publish Button, Preview Button, and Upload component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { CollectionCOnfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        // highlight-line
        // ...
      },
    },
  },
}
```

----------------------------------------

TITLE: Using beforeSchemaInit Hook with SQLite Adapter
DESCRIPTION: Example demonstrating how to use the beforeSchemaInit hook to extend your database structure with tables that won't be managed by Payload. This allows adding custom tables to the schema.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { sqliteAdapter } from '@payloadcms/db-sqlite'
import { integer, sqliteTable } from '@payloadcms/db-sqlite/drizzle/sqlite-core'

sqliteAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      return {
        ...schema,
        tables: {
          ...schema.tables,
          addedTable: sqliteTable('added_table', {
            id: integer('id').primaryKey({ autoIncrement: true }),
          }),
        },
      }
    },
  ],
})
```

----------------------------------------

TITLE: Logging out from Payload CMS using REST API
DESCRIPTION: Shows how to log out from Payload CMS using the REST API. This operation deletes the authentication token in a safe way.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
const res = await fetch('http://localhost:3000/api/[collection-slug]/logout', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
})
```

----------------------------------------

TITLE: Implementing afterError Hook in PayloadCMS
DESCRIPTION: Hook that triggers when an error occurs in the Payload application. Used for error logging, notifications, or error response transformation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterErrorHook } from 'payload';

const afterErrorHook: CollectionAfterErrorHook = async ({
  req,
  id,
  doc,
}) => {...}
```

----------------------------------------

TITLE: Configuring Redirects Plugin in Payload Config
DESCRIPTION: Example of basic plugin configuration in Payload CMS config file, showing how to add the redirects plugin with collection options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/redirects.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { redirectsPlugin } from '@payloadcms/plugin-redirects'

const config = buildConfig({
  collections: [
    {
      slug: 'pages',
      fields: [],
    },
  ],
  plugins: [
    redirectsPlugin({
      collections: ['pages'],
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Advanced Sentry Plugin Configuration with Options
DESCRIPTION: Demonstrates how to configure the Sentry plugin with additional options such as capturing specific error codes and adding custom context to error reports.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/sentry.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { sentryPlugin } from '@payloadcms/plugin-sentry'

import * as Sentry from '@sentry/nextjs'

import { Pages, Media } from './collections'

const config = buildConfig({
  collections: [Pages, Media],
  plugins: [
    sentryPlugin({
      options: {
        captureErrors: [400, 403],
        context: ({ defaultContext, req }) => {
          return {
            ...defaultContext,
            tags: {
              locale: req.locale,
            },
          }
        },
        debug: true,
      },
      Sentry,
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Configuring JWT Token Removal in Payload CMS Collection
DESCRIPTION: This code snippet shows how to configure a Payload CMS collection to remove the JWT token from the response. This can be useful in scenarios where you want to prevent the token from being returned in auth operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/jwt.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const UsersWithoutJWTs: CollectionConfig = {
  slug: 'users-without-jwts',
  auth: {
    removeTokenFromResponse: true, // highlight-line
  },
}
```

----------------------------------------

TITLE: Creating Me Hook in TypeScript
DESCRIPTION: A collection hook for customizing the 'me' operation in auth-enabled collections. Allows developers to replace default 'me' operation behavior and access user and operation arguments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_19

LANGUAGE: typescript
CODE:
```
import type { CollectionMeHook } from 'payload'

const meHook: CollectionMeHook = async ({
  args,
  user,
}) => {...}
```

----------------------------------------

TITLE: Configuring Workflow in Payload CMS with TypeScript
DESCRIPTION: Example of defining a workflow in Payload config that creates and updates posts. The workflow demonstrates task chaining, input schema definition, and proper error handling with retries.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/workflows.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    tasks: [
      // ...
    ]
    workflows: [
      {
        slug: 'createPostAndUpdate',

        // The arguments that the workflow will accept
        inputSchema: [
          {
            name: 'title',
            type: 'text',
            required: true,
          },
        ],

        // The handler that defines the "control flow" of the workflow
        // Notice how it uses the `tasks` argument to execute your predefined tasks.
        // These are strongly typed!
        handler: async ({ job, tasks }) => {

          // This workflow first runs a task called `createPost`.

          // You need to define a unique ID for this task invocation
          // that will always be the same if this workflow fails
          // and is re-executed in the future. Here, we hard-code it to '1'
          const output = await tasks.createPost('1', {
            input: {
              title: job.input.title,
            },
          })

          // Once the prior task completes, it will run a task
          // called `updatePost`
          await tasks.updatePost('2', {
            input: {
              post: job.taskStatus.createPost['1'].output.postID, // or output.postID
              title: job.input.title + '2',
            },
          })
        },
      } as WorkflowConfig<'updatePost'>
    ]
  }
})
```

----------------------------------------

TITLE: Creating Custom Dropdown Toolbar Group in TypeScript for PayloadCMS
DESCRIPTION: Example demonstrating how to create a custom dropdown toolbar group that displays items vertically with icons and labels when opened. It includes a custom React component as the ChildComponent for the dropdown button.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_16

LANGUAGE: typescript
CODE:
```
import type {
  ToolbarGroup,
  ToolbarGroupItem,
} from '@payloadcms/richtext-lexical'

import { MyIcon } from './icons/MyIcon'

export const toolbarAddDropdownGroupWithItems = (
  items: ToolbarGroupItem[],
): ToolbarGroup => {
  return {
    type: 'dropdown',
    ChildComponent: MyIcon,
    items,
    key: 'myDropdownToolbar',
    order: 10,
  }
}
```

----------------------------------------

TITLE: Implementing afterRead Hook for Date Formatting in Payload CMS
DESCRIPTION: Shows how to use the afterRead hook to format date values when they are retrieved from the database. The hook converts the date to a localized string format for better readability.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const dateField: Field = {
  name: 'createdAt',
  type: 'date',
  hooks: {
    afterRead: [
      ({ value }) => {
        // Format date for display
        return new Date(value).toLocaleDateString()
      },
    ],
  },
}
```

----------------------------------------

TITLE: Using useFormFields Hook for Selective Field Access
DESCRIPTION: Example demonstrating how to use the useFormFields hook to efficiently access specific field values from form state with optimized rendering that only occurs when the requested fields change.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import { useFormFields } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  // Get only the `amount` field state, and only cause a rerender when that field changes
  const amount = useFormFields(([fields, dispatch]) => fields.amount)

  // Do the same thing as above, but to the `feePercentage` field
  const feePercentage = useFormFields(
    ([fields, dispatch]) => fields.feePercentage,
  )

  if (
    typeof amount?.value !== 'undefined' &&
    typeof feePercentage?.value !== 'undefined'
  ) {
    return <span>The fee is ${(amount.value * feePercentage.value) / 100}</span>
  }
}
```

----------------------------------------

TITLE: Authenticating API Requests with API Keys using Fetch
DESCRIPTION: This snippet shows how to authenticate HTTP requests to Payload using API keys. It demonstrates setting the Authorization header with the collection slug and API key to authenticate the request.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/api-keys.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import Users from '../collections/Users'

const response = await fetch('http://localhost:3000/api/pages', {
  headers: {
    Authorization: `${Users.slug} API-Key ${YOUR_API_KEY}`,
  },
})
```

----------------------------------------

TITLE: Custom Filename Hook Implementation
DESCRIPTION: Implementation of a beforeOperation hook to customize filenames before upload, with support for both create and update operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
beforeOperation: [
  ({ req, operation }) => {
    if ((operation === 'create' || operation === 'update') && req.file) {
      req.file.name = 'test.jpg'
    }
  },
]
```

----------------------------------------

TITLE: Defining a Basic Date Field in TypeScript
DESCRIPTION: Basic example of defining a Date field in Payload CMS using TypeScript. This demonstrates the minimal configuration needed to create a Date field in your collection or global schema.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyDateField: Field = {
  // ...
  type: 'date', // highlight-line
}
```

----------------------------------------

TITLE: Setting up .env file structure in a Payload project
DESCRIPTION: Shows the file structure of a Payload project with an .env file at the root level. This is the recommended location for storing environment variables.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/environment-vars.mdx#2025-04-12_snippet_0

LANGUAGE: plaintext
CODE:
```
project-name/
├─ .env
├─ package.json
├─ payload.config.ts
```

----------------------------------------

TITLE: Configuring S3 Storage Plugin in Payload CMS
DESCRIPTION: Example of integrating the S3 storage plugin with Payload CMS configuration. Shows how to specify collections for S3 storage, including a basic configuration and one with a prefix. Includes AWS credentials setup through environment variables.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/storage-s3/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { s3Storage } from '@payloadcms/storage-s3'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    s3Storage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      bucket: process.env.S3_BUCKET,
      config: {
        credentials: {
          accessKeyId: process.env.S3_ACCESS_KEY_ID,
          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
        },
        region: process.env.S3_REGION,
        // ... Other S3 configuration
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Cancelling a Single Job in Payload CMS
DESCRIPTION: Illustrates how to cancel a specific job using its ID with the payload.jobs.cancelByID method. This is useful for stopping individual jobs that are queued or currently running.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/jobs.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
await payload.jobs.cancelByID({
  id: createdJob.id,
})
```

----------------------------------------

TITLE: Configuring Custom Edit View for Collections in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure a custom Edit View component for Collections in the Payload CMS configuration. It uses the 'views.edit.default' property in the admin components configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      views: {
        edit: {
          default: {
            Component: '/path/to/MyCustomEditViewComponent',
          },
        },
      },
    },
  },
})
```

----------------------------------------

TITLE: Defining a Text Field in a Payload CMS Collection
DESCRIPTION: Shows how to define a Text field within a collection configuration in Payload CMS. This example creates a required 'pageTitle' field of type 'text'.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'pageTitle', // required
      type: 'text', // required
      required: true,
    },
  ],
}
```

----------------------------------------

TITLE: Implementing afterDelete Hook in Payload CMS (TypeScript)
DESCRIPTION: This code snippet demonstrates the implementation of an afterDelete hook in Payload CMS. The hook runs immediately after the delete operation removes records from the database, and any returned values are discarded.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterDeleteHook } from 'payload';

const afterDeleteHook: CollectionAfterDeleteHook = async ({
  req,
  id,
  doc,
}) => {...}
```

----------------------------------------

TITLE: Fetching Payload Resources with Cookie Authentication
DESCRIPTION: Example of using fetch API to retrieve Payload resources while including credentials (cookies) for authentication. This ensures the browser sends authentication cookies with the request.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/cookies.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const response = await fetch('http://localhost:3000/api/pages', {
  credentials: 'include',
})

const pages = await response.json()
```

----------------------------------------

TITLE: Adding Components Before Nav Links in Payload CMS
DESCRIPTION: Configuration to inject custom components before the navigation links in the Payload CMS admin panel using the beforeNavLinks property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    // highlight-start
    components: {
      beforeNavLinks: ['/path/to/your/component'],
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Custom Document Tab Server Component
DESCRIPTION: Example of creating a custom document tab server component in PayloadCMS using React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/document-views.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { DocumentTabServerProps } from 'payload'
import { Link } from '@payloadcms/ui'

export function MyCustomTabComponent(props: DocumentTabServerProps) {
  return (
    <Link href="/my-custom-tab">This is a custom Document Tab (Server)</Link>
  )
}
```

----------------------------------------

TITLE: Configuring Form Builder Fields in Payload Config
DESCRIPTION: Example of how to configure the fields option in the Form Builder Plugin. It shows how to enable or disable specific field types for form building.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
formBuilderPlugin({
  // ...
  fields: {
    text: true,
    textarea: true,
    select: true,
    email: true,
    state: true,
    country: true,
    checkbox: true,
    number: true,
    message: true,
    payment: false,
  },
})
```

----------------------------------------

TITLE: Manual Request Data Resolution in Payload CMS v3 Endpoints
DESCRIPTION: This code shows how to manually resolve data, locale, and fallbackLocale in v3 endpoint handlers using Payload-provided utilities rather than having them automatically available on the request object.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_23

LANGUAGE: diff
CODE:
```
// collections/Posts.ts
import type { CollectionConfig } from 'payload'
+ import { addDataAndFileToRequest } from '@payloadcms/next/utilities'
+ import { addLocalesToRequest } from '@payloadcms/next/utilities'

export const PostsCollection: CollectionConfig = {
  slug: 'posts',
  endpoints: [
-   {
-     path: '/whoami/:parameter',
-     method: 'post',
-     handler: async (req) => {
-       return Response.json({
-         name: req.data.name, // data will be undefined
-       })
-     }
-   },
+   {
+     path: '/whoami/:parameter',
+     method: 'post',
+     handler: async (req) => {
+       // mutates req, must be awaited
+       await addDataAndFileToRequest(req)
+       await addLocalesToRequest(req)
+
+       return Response.json({
+         name: req.data.name, // data is now available
+    	    fallbackLocale: req.fallbackLocale,
+         locale: req.locale,
+       })
+     }
+   }
  ]
}
```

----------------------------------------

TITLE: Passing Data Between Hooks in Payload CMS
DESCRIPTION: Demonstrates how to share data between beforeChange and afterChange hooks using context object. Shows fetching customer data once and reusing it across multiple hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/context.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

const Customer: CollectionConfig = {
  slug: 'customers',
  hooks: {
    beforeChange: [
      async ({ context, data }) => {
        // assign the customerData to context for use later
        context.customerData = await fetchCustomerData(data.customerID)
        return {
          ...data,
          // some data we use here
          name: context.customerData.name,
        }
      },
    ],
    afterChange: [
      async ({ context, doc, req }) => {
        // use context.customerData without needing to fetch it again
        if (context.customerData.contacted === false) {
          createTodo('Call Customer', context.customerData)
        }
      },
    ],
  },
  fields: [
    /* ... */
  ],
}
```

----------------------------------------

TITLE: Basic Number Field Configuration in TypeScript
DESCRIPTION: Basic configuration example showing how to define a Number field type in PayloadCMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/number.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyNumberField: Field = {
  // ...
  type: 'number', // highlight-line
}
```

----------------------------------------

TITLE: Implementing beforeSync Hook for Search Records
DESCRIPTION: Example of using the beforeSync hook to modify or provide fallbacks for search record data before it is created or updated.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/search.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  searchPlugin({
    beforeSync: ({ originalDoc, searchDoc }) => ({
      ...searchDoc,
      // - Modify your docs in any way here, this can be async
      // - You also need to add the `excerpt` field in the `searchOverrides` config
      excerpt: originalDoc?.excerpt || 'This is a fallback excerpt',
    }),
  }),
}
```

----------------------------------------

TITLE: Configuring Custom PreviewButton Component for Collections in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure a custom PreviewButton component for Collections in Payload CMS. It uses the 'components.edit.PreviewButton' property in the Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_14

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        PreviewButton: '/path/to/MyPreviewButton',
      },
    },
  },
}
```

----------------------------------------

TITLE: Configuring API Key-Only Authentication in Payload
DESCRIPTION: This snippet demonstrates how to configure a collection to use only API key authentication by disabling the local authentication strategy. This prevents users from logging in with email and password, requiring API key authentication instead.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/api-keys.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ThirdPartyAccess: CollectionConfig = {
  slug: 'third-party-access',
  auth: {
    useAPIKey: true,
    disableLocalStrategy: true, // highlight-line
  },
}
```

----------------------------------------

TITLE: Deleting Multiple Documents in PayloadCMS
DESCRIPTION: Demonstrates how to delete multiple documents matching a query with access control options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_10

LANGUAGE: javascript
CODE:
```
const result = await payload.delete({
  collection: 'posts', // required
  where: {
    // required
    fieldName: { equals: 'value' },
  },
  depth: 0,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  overrideLock: false, // By default, document locks are ignored. Set to false to enforce locks.
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Importing Payload TypeScript Types
DESCRIPTION: Shows how to import common TypeScript type definitions from the Payload core package for type-safe development.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/concepts.mdx#2025-04-12_snippet_2

LANGUAGE: ts
CODE:
```
import { Config, CollectionConfig, GlobalConfig, Field } from 'payload'
```

----------------------------------------

TITLE: Customizing Email Verification HTML in Payload CMS
DESCRIPTION: This code shows how to customize the HTML content of email verification emails sent to users. It uses the generateEmailHTML function to create a custom message with a verification link.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/email.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Customers: CollectionConfig = {
  // ...
  auth: {
    verify: {
      // highlight-start
      generateEmailHTML: ({ req, token, user }) => {
        // Use the token provided to allow your user to verify their account
        const url = `https://yourfrontend.com/verify?token=${token}`

        return `Hey ${user.email}, verify your email by clicking here: ${url}`
      },
      // highlight-end
    },
  },
}
```

----------------------------------------

TITLE: Number Field Collection Configuration Example
DESCRIPTION: Complete example showing how to configure a Number field within a collection with custom admin options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/number.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'age', // required
      type: 'number', // required
      required: true,
      admin: {
        step: 1,
      },
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Root Hooks in Payload CMS
DESCRIPTION: This snippet demonstrates how to add root hooks to the Payload configuration. It shows the structure for adding an afterError hook.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  // highlight-start
  hooks: {
    afterError:[() => {...}]
  },
  // highlight-end
})
```

----------------------------------------

TITLE: Configuring Vercel Blob Storage with Payload CMS
DESCRIPTION: Example of how to configure the vercelBlobStorage plugin in a Payload CMS configuration file. Shows setting up multiple collections with different options and providing the necessary Vercel Blob token.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/storage-vercel-blob/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { vercelBlobStorage } from '@payloadcms/storage-vercel-blob'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    vercelBlobStorage({
      enabled: true, // Optional, defaults to true
      // Specify which collections should use Vercel Blob
      collections: {
        media: true,
        'media-with-prefix': {
          prefix: 'my-prefix',
        },
      },
      // Token provided by Vercel once Blob storage is added to your Vercel project
      token: process.env.BLOB_READ_WRITE_TOKEN,
    }),
  ],
})
```

----------------------------------------

TITLE: Setting Depth in Payload CMS Local API (TypeScript)
DESCRIPTION: This snippet demonstrates how to set the depth parameter when querying documents using Payload's Local API in TypeScript. It uses the 'find' method with a depth of 2.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/depth.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Payload } from 'payload'

const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    depth: 2, // highlight-line
  })

  return posts
}
```

----------------------------------------

TITLE: Implementing Markdown Transformers in Lexical Editor for Payload CMS
DESCRIPTION: This code snippet shows how to create a markdown transformer for the Lexical editor. It defines a pattern ('+++') that, when typed, will create a custom node. The transformer includes export functionality to convert the node back to markdown.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_20

LANGUAGE: typescript
CODE:
```
import { createClientFeature } from '@payloadcms/richtext-lexical/client'
import type { ElementTransformer } from '@payloadcms/richtext-lexical/lexical/markdown'
import { $createMyNode, $isMyNode, MyNode } from './nodes/MyNode'

const MyMarkdownTransformer: ElementTransformer = {
  type: 'element',
  dependencies: [MyNode],
  export: (node, exportChildren) => {
    if (!$isMyNode(node)) {
      return null
    }
    return '+++'
  },
  // match ---
  regExp: /^\+\+\+\s*$/,
  replace: (parentNode) => {
    const node = $createMyNode()
    if (node) {
      parentNode.replace(node)
    }
  },
}

export const MyFeature = createClientFeature({
  markdownTransformers: [MyMarkdownTransformer],
})
```

----------------------------------------

TITLE: Implementing Update Access Control for Globals in Payload CMS
DESCRIPTION: This snippet shows how to implement update access control for a Global document. The update function receives the authenticated user and the data being updated, returning a boolean to determine if the update operation is allowed.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/globals.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { GlobalConfig } from 'payload'

const Header: GlobalConfig = {
  // ...
  // highlight-start
  access: {
    update: ({ req: { user }, data }) => {
      return Boolean(user)
    },
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring Uploadthing Storage in Payload CMS
DESCRIPTION: This code snippet demonstrates how to configure the Uploadthing storage adapter within a Payload CMS project. It specifies the collections to use Uploadthing for, sets the Uploadthing token from environment variables, and defines the access control list (ACL) for uploaded files.  The `clientUploads` parameter is not used here, but is mentioned above in the document.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  collections: [Media],
  plugins: [
    uploadthingStorage({
      collections: {
        media: true,
      },
      options: {
        token: process.env.UPLOADTHING_TOKEN,
        acl: 'public-read',
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Setting Up Auto-Login for Development in Payload Config
DESCRIPTION: Shows how to enable auto-login functionality for testing and development purposes, with environment variable control to ensure it's disabled in production environments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  // highlight-start
  autoLogin:
    process.env.NEXT_PUBLIC_ENABLE_AUTOLOGIN === 'true'
      ? {
          email: 'test@example.com',
          password: 'test',
          prefillOnly: true,
        }
      : false,
  // highlight-end
})
```

----------------------------------------

TITLE: Creating RefreshRouteOnSave Component for Next.js
DESCRIPTION: Implementation of the RefreshRouteOnSave component using the @payloadcms/live-preview-react package and Next.js router.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/server.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import { RefreshRouteOnSave as PayloadLivePreview } from '@payloadcms/live-preview-react'
import { useRouter } from 'next/navigation.js'
import React from 'react'

export const RefreshRouteOnSave: React.FC = () => {
  const router = useRouter()

  return (
    <PayloadLivePreview
      refresh={() => router.refresh()}
      serverURL={process.env.NEXT_PUBLIC_PAYLOAD_URL}
    />
  )
}
```

----------------------------------------

TITLE: Configuring Custom SaveDraftButton Component for Collections in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure a custom SaveDraftButton component for Collections in Payload CMS. It uses the 'components.edit.SaveDraftButton' property in the Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        SaveDraftButton: '/path/to/MySaveDraftButton',
      },
    },
  },
}
```

----------------------------------------

TITLE: Basic Server Feature Implementation
DESCRIPTION: Demonstrates the basic setup of a custom server feature using createServerFeature helper function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { createServerFeature } from '@payloadcms/richtext-lexical'

export const MyFeature = createServerFeature({
  feature: {},
  key: 'myFeature',
})
```

----------------------------------------

TITLE: Configuring Sort Options for Relationship Field
DESCRIPTION: Demonstrates how to specify sorting options for the Relationship field's dropdown in the Admin Panel. It shows both global and collection-specific sorting configurations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
sortOptions: 'fieldName',

sortOptions: {
  "pages": "fieldName1",
  "posts": "-fieldName2",
  "categories": "fieldName3"
}
```

----------------------------------------

TITLE: Complete Group Field Collection Example
DESCRIPTION: Full example showing a collection configuration with a Group field containing nested text and textarea fields with validation rules.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/group.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'pageMeta', // required
      type: 'group', // required
      interfaceName: 'Meta', // optional
      fields: [
        // required
        {
          name: 'title',
          type: 'text',
          required: true,
          minLength: 20,
          maxLength: 100,
        },
        {
          name: 'description',
          type: 'textarea',
          required: true,
          minLength: 40,
          maxLength: 160,
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Example Collection with Point Field
DESCRIPTION: Implementation example showing how to add a Point field to a collection configuration
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/point.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'location',
      type: 'point',
      label: 'Location',
    },
  ],
}
```

----------------------------------------

TITLE: Implementing afterRead Hook in PayloadCMS
DESCRIPTION: Example implementation of an afterRead hook for globals in PayloadCMS. This hook executes after reading global data and before returning it to the client, allowing for data transformation and access control.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { GlobalAfterReadHook } from 'payload'

const afterReadHook: GlobalAfterReadHook = async ({
  doc,
  req,
  findMany,
}) => {...}
```

----------------------------------------

TITLE: Configuring Collection with Block Fields in TypeScript
DESCRIPTION: Example of creating a collection configuration with a quote block implementation, showing block field configuration and collection setup.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { Block, CollectionConfig } from 'payload'

const QuoteBlock: Block = {
  slug: 'Quote', // required
  imageURL: 'https://google.com/path/to/image.jpg',
  imageAltText: 'A nice thumbnail image to show what this block looks like',
  interfaceName: 'QuoteBlock', // optional
  fields: [
    // required
    {
      name: 'quoteHeader',
      type: 'text',
      required: true,
    },
    {
      name: 'quoteText',
      type: 'text',
    },
  ],
}

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'layout', // required
      type: 'blocks', // required
      minRows: 1,
      maxRows: 20,
      blocks: [
        // required
        QuoteBlock,
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Example JSON Field Collection Configuration
DESCRIPTION: Example showing how to configure a collection with a JSON field in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/json.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'customerJSON', // required
      type: 'json', // required
      required: true,
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Document Views in PayloadCMS Collection
DESCRIPTION: Example of configuring custom document views in a PayloadCMS collection configuration, demonstrating how to override default views and specify custom components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/document-views.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollectionOrGlobalConfig: CollectionConfig = {
  // ...
  admin: {
    components: {
      views: {
        edit: {
          default: {
            Component: '/path/to/MyCustomEditView',
          },
        },
      },
    },
  },
}
```

----------------------------------------

TITLE: Extending Database Schema with beforeSchemaInit Hook in Payload CMS
DESCRIPTION: Demonstrates how to use the beforeSchemaInit hook to add custom tables to the Payload CMS database schema before initialization. This is useful for extending the database structure with tables not managed by Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { postgresAdapter } from '@payloadcms/db-postgres'
import {
  integer,
  pgTable,
  serial,
} from '@payloadcms/db-postgres/drizzle/pg-core'

postgresAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      return {
        ...schema,
        tables: {
          ...schema.tables,
          addedTable: pgTable('added_table', {
            id: serial('id').notNull(),
          }),
        },
      }
    },
  ],
})
```

----------------------------------------

TITLE: Configuring Draft Access Control with Legacy Support
DESCRIPTION: Example showing how to handle access control for both draft-enabled and legacy documents that don't have _status field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/drafts.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Pages: CollectionConfig = {
  slug: 'pages',
  access: {
    read: ({ req }) => {
      // If there is a user logged in,
      // let them retrieve all documents
      if (req.user) return true

      // If there is no user,
      // restrict the documents that are returned
      // to only those where `_status` is equal to `published`
      // or where `_status` does not exist
      return {
        or: [
          {
            _status: {
              equals: 'published',
            },
          },
          {
            _status: {
              exists: false,
            },
          },
        ],
      }
    },
  },
  versions: {
    drafts: true,
  },
  //.. the rest of the Pages config here
}
```

----------------------------------------

TITLE: JSON Schema Validation Configuration
DESCRIPTION: Example of configuring JSON schema validation for a JSON field with local schema definition.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/json.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'customerJSON', // required
      type: 'json', // required
      jsonSchema: {
        uri: 'a://b/foo.json', // required
        fileMatch: ['a://b/foo.json'], // required
        schema: {
          type: 'object',
          properties: {
            foo: {
              enum: ['bar', 'foobar'],
            },
          },
        },
      },
    },
  ],
}
```

----------------------------------------

TITLE: beforeValidate Hook Implementation
DESCRIPTION: Example of implementing a beforeValidate hook that runs during create and update operations to format data before server-side validation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeValidateHook } from 'payload'

const beforeValidateHook: CollectionBeforeValidateHook = async ({ data }) => {
  return data
}
```

----------------------------------------

TITLE: Fetching Data with Payload REST API
DESCRIPTION: Example showing how to fetch data from Payload's REST API endpoint using the Fetch API. Demonstrates querying the 'pages' collection via HTTP.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/concepts.mdx#2025-04-12_snippet_1

LANGUAGE: ts
CODE:
```
fetch('https://localhost:3000/api/pages')
  .then((res) => res.json())
  .then((data) => console.log(data))
```

----------------------------------------

TITLE: Advanced Redirects Plugin Configuration with Overrides
DESCRIPTION: Example showing advanced plugin configuration with custom field overrides, redirect types, and field customization.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/redirects.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
redirectsPlugin({
  collections: ['pages'],
  overrides: {
    fields: ({ defaultFields }) => {
      return [
        ...defaultFields,
        {
          type: 'text',
          name: 'customField',
        },
      ]
    },
  },
  redirectTypes: ['301', '302'],
  redirectTypeFieldOverride: {
    label: 'Redirect Type (Overridden)',
  },
})
```

----------------------------------------

TITLE: Initializing Tabs Field in Payload CMS TypeScript Config
DESCRIPTION: This snippet demonstrates how to initialize a basic Tabs field in a Payload CMS field configuration. It shows the required 'type' and 'tabs' properties.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/tabs.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyTabsField: Field = {
  // ...
  // highlight-start
  type: 'tabs',
  tabs: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: afterChange Hook Implementation
DESCRIPTION: Example of implementing an afterChange hook that runs after document creation or updates to perform post-save operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterChangeHook } from 'payload'

const afterChangeHook: CollectionAfterChangeHook = async ({ doc }) => {
  return doc
}
```

----------------------------------------

TITLE: Adding Components Before and After Input Fields in PayloadCMS
DESCRIPTION: Demonstrates how to add custom components before and after field inputs using the admin.components.beforeInput and admin.components.afterInput properties in a Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_31

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollectionConfig: CollectionConfig = {
  // ...
  fields: [
    // ...
    {
      name: 'myField',
      type: 'text',
      admin: {
        components: {
          // highlight-start
          beforeInput: ['/path/to/MyCustomComponent'],
          afterInput: ['/path/to/MyOtherCustomComponent'],
          // highlight-end
        },
      },
    },
  ],
}
```

----------------------------------------

TITLE: Enabling Email Verification in Payload CMS Collection Config
DESCRIPTION: This snippet demonstrates how to enable email verification for a collection in Payload CMS using the auth.verify property in the CollectionConfig.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/email.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Customers: CollectionConfig = {
  // ...
  auth: {
    verify: true, // highlight-line
  },
}
```

----------------------------------------

TITLE: Modifying Raw Schema with beforeSchemaInit Hook
DESCRIPTION: Shows how to use the beforeSchemaInit hook to modify the internal Payload raw SQL schema. Includes examples of adding new tables, columns, and indexes that will be included in the generated schema.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import { sqliteAdapter } from '@payloadcms/db-sqlite'

sqliteAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      // Add a new table
      adapter.rawTables.myTable = {
        name: 'my_table',
        columns: {
          my_id: {
            name: 'my_id',
            type: 'integer',
            primaryKey: true,
          },
        },
      }

      // Add a new column to generated by Payload table:
      adapter.rawTables.posts.columns.customColumn = {
        name: 'custom_column',
        // Note that Payload SQL doesn't support everything that Drizzle does.
        type: 'integer',
        notNull: true,
      }
      // Add a new index to generated by Payload table:
      adapter.rawTables.posts.indexes.customColumnIdx = {
        name: 'custom_column_idx',
        unique: true,
        on: ['custom_column'],
      }

      return schema
    },
  ],
})
```

----------------------------------------

TITLE: Implementing Read Access Control for Globals in Payload CMS
DESCRIPTION: This snippet demonstrates how to implement read access control for a Global document. The read function determines who can read the Global based on the authenticated user, returning a boolean result.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/globals.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { GlobalConfig } from 'payload'

const Header: GlobalConfig = {
  // ...
  // highlight-start
  read: {
    read: ({ req: { user } }) => {
      return Boolean(user)
    },
  },
  // highlight-end
}
```

----------------------------------------

TITLE: Customizing SEO Fields in Payload Config
DESCRIPTION: Example of how to customize SEO fields by adding a new field to the default fields provided by the plugin.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  seoPlugin({
    fields: ({ defaultFields }) => [
      ...defaultFields,
      {
        name: 'customField',
        type: 'text',
      },
    ],
  })
}
```

----------------------------------------

TITLE: Querying Multi-Tenant Data in Frontend
DESCRIPTION: Example showing how to query data filtered by tenant in a frontend application using the PayloadCMS client.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/multi-tenant.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
const pagesBySlug = await payload.find({
  collection: 'pages',
  depth: 1,
  draft: false,
  limit: 1000,
  overrideAccess: false,
  where: {
    // your constraint would depend on the
    // fields you added to the tenants collection
    // here we are assuming a slug field exists
    // on the tenant collection, like in the example above
    'tenant.slug': {
      equals: 'gold',
    },
  },
})
```

----------------------------------------

TITLE: Complete Slate Editor Configuration Example
DESCRIPTION: Comprehensive example demonstrating custom elements, leaves, link fields, and upload configuration in a collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/slate.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

import { slateEditor } from '@payloadcms/richtext-slate'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'content', // required
      type: 'richText', // required
      defaultValue: [
        {
          children: [{ text: 'Here is some default content for this field' }],
        },
      ],
      required: true,
      editor: slateEditor({
        admin: {
          elements: [
            'h2',
            'h3',
            'h4',
            'link',
            'blockquote',
            {
              name: 'cta',
              Button: CustomCallToActionButton,
              Element: CustomCallToActionElement,
              plugins: [
                // any plugins that are required by this element go here
              ],
            },
          ],
          leaves: [
            'bold',
            'italic',
            {
              name: 'highlight',
              Button: CustomHighlightButton,
              Leaf: CustomHighlightLeaf,
              plugins: [
                // any plugins that are required by this leaf go here
              ],
            },
          ],
          link: {
            // Inject your own fields into the Link element
            fields: [
              {
                name: 'rel',
                label: 'Rel Attribute',
                type: 'select',
                hasMany: true,
                options: ['noopener', 'noreferrer', 'nofollow'],
              },
            ],
          },
          upload: {
            collections: {
              media: {
                fields: [
                  // any fields that you would like to save
                  // on an upload element in the `media` collection
                ],
              },
            },
          },
        },
      }),
    },
  ],
}
```

----------------------------------------

TITLE: Admin Thumbnail Configuration
DESCRIPTION: Examples of configuring admin thumbnails in Payload CMS using both string-based and function-based approaches.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Media: CollectionConfig = {
  slug: 'media',
  upload: {
    adminThumbnail: 'small',
    imageSizes: [
      {
        name: 'small',
        fit: 'cover',
        height: 300,
        width: 900,
      },
      {
        name: 'large',
        fit: 'cover',
        height: 600,
        width: 1800,
      },
    ],
  },
}
```

----------------------------------------

TITLE: afterChange Hook Implementation
DESCRIPTION: Shows implementation of an afterChange hook that runs after a global is updated, useful for cache purging and external system synchronization.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { GlobalAfterChangeHook } from 'payload'

const afterChangeHook: GlobalAfterChangeHook = async ({
  doc,
  previousDoc,
  req,
}) => {
  return data
}
```

----------------------------------------

TITLE: Configuring Admin Panel Options in Payload Config
DESCRIPTION: Example of how to configure the Admin Panel options in the Payload configuration file, highlighting where the admin object is defined.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    // highlight-line
    // ...
  },
})
```

----------------------------------------

TITLE: Configuring SEO Plugin in Payload Config
DESCRIPTION: Example of how to configure the SEO plugin in the Payload CMS configuration file. It shows setting up collections, uploads collection, and custom functions for generating title and description.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload';
import { seoPlugin } from '@payloadcms/plugin-seo';

const config = buildConfig({
  collections: [
    {
      slug: 'pages',
      fields: []
    },
    {
      slug: 'media',
      upload: {
        staticDir: // path to your static directory,
      },
      fields: []
    }
  ],
  plugins: [
    seoPlugin({
      collections: [
        'pages',
      ],
      uploadsCollection: 'media',
      generateTitle: ({ doc }) => `Website.com — ${doc.title}`,
      generateDescription: ({ doc }) => doc.excerpt
    })
  ]
});

export default config;
```

----------------------------------------

TITLE: Disabling Transactions in Local API Call
DESCRIPTION: Shows how to disable transactions for specific Local API calls using the disableTransaction option.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/transactions.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
await payload.update({
  collection: 'posts',
  data: {
    some: 'data',
  },
  where: {
    slug: { equals: 'my-slug' },
  },
  disableTransaction: true,
})
```

----------------------------------------

TITLE: Customizing Forgot Password Email HTML in Payload CMS
DESCRIPTION: This code demonstrates how to customize the HTML content of forgot password emails. It uses the generateEmailHTML function to create a custom email template with a password reset link.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/email.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Customers: CollectionConfig = {
  // ...
  auth: {
    forgotPassword: {
      // highlight-start
      generateEmailHTML: ({ req, token, user }) => {
        // Use the token provided to allow your user to reset their password
        const resetPasswordURL = `https://yourfrontend.com/reset-password?token=${token}`

        return `
          <!doctype html>
          <html>
            <body>
              <h1>Here is my custom email template!</h1>
              <p>Hello, ${user.email}!</p>
              <p>Click below to reset your password.</p>
              <p>
                <a href="${resetPasswordURL}">${resetPasswordURL}</a>
              </p>
            </body>
          </html>
        `
      },
      // highlight-end
    },
  },
}
```

----------------------------------------

TITLE: Configuring Payload with Automatic Postgres Connection
DESCRIPTION: TypeScript configuration for Payload CMS using the Vercel Postgres adapter with automatic connection string detection from environment variables.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/db-vercel-postgres/README.md#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  db: postgresAdapter(),
  // ...rest of config
})
```

----------------------------------------

TITLE: Configuring Custom Nav Component in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure a custom navigation component in the Payload CMS admin panel. It uses the admin.components.Nav property in the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_15

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    // highlight-start
    components: {
      Nav: '/path/to/your/component',
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Initializing Basic Payload Config with Globals
DESCRIPTION: Basic example of initializing Payload configuration with globals array property for defining global documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/globals.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  globals: [
    // highlight-line
    // Your Globals go here
  ],
})
```

----------------------------------------

TITLE: Upgrading Lexical Data Version
DESCRIPTION: Script to upgrade all Lexical rich text content to the latest version format across all documents in the PayloadCMS application.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/migration.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { upgradeLexicalData } from '@payloadcms/richtext-lexical'

await upgradeLexicalData({ payload })
```

----------------------------------------

TITLE: Creating Code Block Field Configuration in TypeScript
DESCRIPTION: Configuration for setting up a code block feature with language selection using BlocksFeature in Lexical editor. Includes field definitions and language options setup.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import {
  BlocksFeature,
  lexicalEditor,
} from '@payloadcms/richtext-lexical'

export const languages = {
  ts: 'TypeScript',
  plaintext: 'Plain Text',
  tsx: 'TSX',
  js: 'JavaScript',
  jsx: 'JSX',
}

// ...
{
  name: 'richText',
  type: 'richText',
  editor: lexicalEditor({
    features: ({ defaultFeatures }) => [
      ...defaultFeatures,
      BlocksFeature({
        blocks: [
          {
            slug: 'Code',
            fields: [
              {
                type: 'select',
                name: 'language',
                options: Object.entries(languages).map(([key, value]) => ({
                  label: value,
                  value: key,
                })),
                defaultValue: 'ts',
              },
              {
                admin: {
                  components: {
                    Field: './path/to/CodeComponent#Code',
                  },
                },
                name: 'code',
                type: 'code',
              },
            ],
          }
        ],
        inlineBlocks: [],
      }),
    ],
  }),
}
```

----------------------------------------

TITLE: Basic Select Field Configuration in TypeScript
DESCRIPTION: Basic implementation of a Select field showing required type and options configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/select.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MySelectField: Field = {
  // ...
  // highlight-start
  type: 'select',
  options: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Implementing Custom Relationship Field Label Component in PayloadCMS with React
DESCRIPTION: This code snippet defines a React component for custom rendering of relationship field labels in PayloadCMS. It uses the FieldLabel component from @payloadcms/ui and implements the RelationshipFieldLabelClientComponent type from Payload. The component renders the field label with optional required indicator.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { RelationshipFieldLabelClientComponent } from 'payload'

export const CustomRelationshipFieldLabelClient: RelationshipFieldLabelClientComponent =
  ({ field, path }) => {
    return (
      <FieldLabel
        label={field?.label || field?.name}
        path={path}
        required={field?.required}
      />
    )
  }
```

----------------------------------------

TITLE: Configuring Access Control in a Collection
DESCRIPTION: Basic example of adding an access property to a Collection Config to implement access control restrictions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithAccessControl: CollectionConfig = {
  // ...
  access: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating a User with Enforced Access Control in Payload CMS
DESCRIPTION: This snippet shows how to respect access control in Payload CMS local API operations. It creates a user while enforcing access control by setting overrideAccess to false and passing the user object.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/access-control.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
const authedCreate = await payload.create({
  collection: 'users',
  overrideAccess: false, // This ensures access control will be applied
  user, // Pass the authenticated user to check permissions
  data: {
    email: 'test@test.com',
    password: 'test',
  },
})
```

----------------------------------------

TITLE: Implementing Draft Preview Route in Next.js
DESCRIPTION: This Next.js API route handles draft preview requests. It verifies the preview secret, authenticates the user, and enables draft mode before redirecting to the content page.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionSlug, PayloadRequest } from 'payload'
import { getPayload } from 'payload'

import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

import configPromise from '@payload-config'

export async function GET(
  req: {
    cookies: {
      get: (name: string) => {
        value: string
      }
    }
  } & Request,
): Promise<Response> {
  const payload = await getPayload({ config: configPromise })

  const { searchParams } = new URL(req.url)

  const path = searchParams.get('path')
  const collection = searchParams.get('collection') as CollectionSlug
  const slug = searchParams.get('slug')
  const previewSecret = searchParams.get('previewSecret')

  if (previewSecret !== process.env.PREVIEW_SECRET) {
    return new Response('You are not allowed to preview this page', {
      status: 403,
    })
  }

  if (!path || !collection || !slug) {
    return new Response('Insufficient search params', { status: 404 })
  }

  if (!path.startsWith('/')) {
    return new Response(
      'This endpoint can only be used for relative previews',
      { status: 500 },
    )
  }

  let user

  try {
    user = await payload.auth({
      req: req as unknown as PayloadRequest,
      headers: req.headers,
    })
  } catch (error) {
    payload.logger.error(
      { err: error },
      'Error verifying token for live preview',
    )
    return new Response('You are not allowed to preview this page', {
      status: 403,
    })
  }

  const draft = await draftMode()

  if (!user) {
    draft.disable()
    return new Response('You are not allowed to preview this page', {
      status: 403,
    })
  }

  draft.enable()

  redirect(path)
}
```

----------------------------------------

TITLE: Using List Query Hook in PayloadCMS
DESCRIPTION: Demonstrates how to use the useListQuery hook to access List View data and query properties. Returns data and query objects for managing list view state.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'
import { useListQuery } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { data, query } = useListQuery()

  // ...
}
```

----------------------------------------

TITLE: Implementing Reset Password with GraphQL Mutation
DESCRIPTION: GraphQL mutation example for resetting user password using a token and new password.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_21

LANGUAGE: graphql
CODE:
```
mutation {
  resetPassword[collection-singular-label](token: "TOKEN_GOES_HERE", password: "not-today")
}
```

----------------------------------------

TITLE: Localizing a Field in Payload CMS (JavaScript)
DESCRIPTION: Shows how to enable localization for a specific field in Payload CMS. This example demonstrates localizing a 'title' text field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_3

LANGUAGE: javascript
CODE:
```
{
  name: 'title',
  type: 'text',
  // highlight-start
  localized: true,
  // highlight-end
}
```

----------------------------------------

TITLE: Async Field Validation in TypeScript
DESCRIPTION: Demonstrates how to implement asynchronous field validation with performance optimization using event context.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_12

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Orders: CollectionConfig = {
  slug: 'orders',
  fields: [
    {
      name: 'customerNumber',
      type: 'text',
      validate: async (val, { event }) => {
        if (event === 'onChange') {
          return true
        }

        const response = await fetch(`https://your-api.com/customers/${val}`)

        if (response.ok) {
          return true
        }

        return 'The customer number provided does not match any customers within our records.'
      },
    },
  ],
}
```

----------------------------------------

TITLE: Validation Context Usage in TypeScript
DESCRIPTION: Demonstrates how to use validation context to access user data and other contextual information during field validation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text',
  name: 'myField',
  validate: (val, { user }) =>
    Boolean(user) || 'You must be logged in to save this field',
}
```

----------------------------------------

TITLE: Migrating to Email Adapters in Payload CMS v3
DESCRIPTION: This example demonstrates how to migrate from the built-in email configuration to the new nodemailer adapter package in Payload CMS v3.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_31

LANGUAGE: typescript
CODE:
```
// ❌ Before

// via payload.init
payload.init({
  email: {
    transport: someNodemailerTransport
    fromName: 'hello',
    fromAddress: 'hello@example.com',
  },
})
// or via email in payload.config.ts
export default buildConfig({
  email: {
    transport: someNodemailerTransport
    fromName: 'hello',
    fromAddress: 'hello@example.com',
  },
})

// ✅ After

// Using new nodemailer adapter package

import { nodemailerAdapter } from '@payloadcms/email-nodemailer'

export default buildConfig({
  email: nodemailerAdapter() // This will be the old ethereal.email functionality
})

// or pass in transport

export default buildConfig({
  email: nodemailerAdapter({
    defaultFromAddress: 'info@payloadcms.com',
    defaultFromName: 'Payload',
    transport: await nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: 587,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    })
  })
})
```

----------------------------------------

TITLE: Internal Link Conversion Configuration
DESCRIPTION: Demonstrates how to handle internal link conversion by implementing the internalDocToHref function and custom link converters. Includes type definitions and routing logic.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-jsx.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
import type {
  DefaultNodeTypes,
  SerializedLinkNode,
} from '@payloadcms/richtext-lexical'
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import {
  type JSXConvertersFunction,
  LinkJSXConverter,
  RichText,
} from '@payloadcms/richtext-lexical/react'
import React from 'react'

const internalDocToHref = ({ linkNode }: { linkNode: SerializedLinkNode }) => {
  const { relationTo, value } = linkNode.fields.doc!
  if (typeof value !== 'object') {
    throw new Error('Expected value to be an object')
  }
  const slug = value.slug

  switch (relationTo) {
    case 'posts':
      return `/posts/${slug}`
    case 'categories':
      return `/category/${slug}`
    case 'pages':
      return `/${slug}`
    default:
      return `/${relationTo}/${slug}`
  }
}

const jsxConverters: JSXConvertersFunction<DefaultNodeTypes> = ({
  defaultConverters,
}) => ({
  ...defaultConverters,
  ...LinkJSXConverter({ internalDocToHref }),
})

export const MyComponent: React.FC<{
  lexicalData: SerializedEditorState
}> = ({ lexicalData }) => {
  return <RichText converters={jsxConverters} data={lexicalData} />
}
```

----------------------------------------

TITLE: User Login in PayloadCMS
DESCRIPTION: Demonstrates how to implement user login functionality with JWT token generation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_12

LANGUAGE: javascript
CODE:
```
const result = await payload.login({
  collection: 'users', // required
  data: {
    // required
    email: 'dev@payloadcms.com',
    password: 'rip',
  },
  req: req, // optional, pass a Request object to be provided to all hooks
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Configuring Pagination for Payload CMS Collection List View (TypeScript)
DESCRIPTION: This code snippet shows how to customize the pagination behavior for a collection's List View in Payload CMS. It demonstrates setting the default limit and specifying available limit options for admins to choose from.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Posts: CollectionConfig = {
  // ...
  admin: {
    // highlight-start
    pagination: {
      defaultLimit: 10,
      limits: [10, 20, 50],
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Calling Server Function to Create Post from React Component
DESCRIPTION: This React component demonstrates how to call the createPost server function from the frontend. It uses a button click event to trigger the function and display the result.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
'use client';

import React, { useState } from 'react';
import { createPost } from '../server/actions'; // import the server function

export const PostForm: React.FC = () => {
  const [result, setResult] = useState<string>('');

  return (
    <>
      <p>{result}</p>

      <button
        type="button"
        onClick={async () => {
          // Call the server function
          const newPost = await createPost({ title: 'Sample Post' });
          setResult('Post created: ' + newPost.title);
        }}
      >
        Create Post
      </button>
    </>
  );
};
```

----------------------------------------

TITLE: Configuring Remote URL Uploads in Payload CMS
DESCRIPTION: Configuration example for the pasteURL option that allows fetching files from remote URLs. Shows how to define an allowList of trusted domains for server-side fetching to bypass CORS restrictions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_8

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const Media: CollectionConfig = {
  slug: 'media',
  upload: {
    pasteURL: {
      allowList: [
        {
          hostname: 'payloadcms.com', // required
          pathname: '',
          port: '',
          protocol: 'https',
          search: ''
        },
        {
          hostname: 'example.com',
          pathname: '/images/*',
        },
      ],
    },
  },
}
```

----------------------------------------

TITLE: Basic Migration File Structure in Payload CMS
DESCRIPTION: Template for creating migration files with up/down functions. The up function implements changes while down reverts them if the migration fails.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/migrations.mdx#2025-04-12_snippet_1

LANGUAGE: ts
CODE:
```
import { MigrateUpArgs, MigrateDownArgs } from '@payloadcms/your-db-adapter'

export async function up({ payload, req }: MigrateUpArgs): Promise<void> {
  // Perform changes to your database here.
  // You have access to `payload` as an argument, and
  // everything is done in TypeScript.
}

export async function down({ payload, req }: MigrateDownArgs): Promise<void> {
  // Do whatever you need to revert changes if the `up` function fails
}
```

----------------------------------------

TITLE: Configuring Payload with Explicit Postgres Connection
DESCRIPTION: TypeScript configuration for Payload CMS using the Vercel Postgres adapter with an explicit connection string from environment variables.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/db-vercel-postgres/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { vercelPostgresAdapter } from '@payloadcms/db-vercel-postgres'

export default buildConfig({
  db: vercelPostgresAdapter({
    pool: {
      connectionString: process.env.DATABASE_URI,
    },
  }),
  // ...rest of config
})
```

----------------------------------------

TITLE: Configuring Docker Compose for PayloadCMS Development Environment
DESCRIPTION: Docker Compose configuration that sets up a development environment with Node.js 18 Alpine, MongoDB, and optional PostgreSQL services. The configuration includes volume mappings for persistent data storage, port mappings for service access, and environment configuration through .env file.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/production/deployment.mdx#2025-04-12_snippet_2

LANGUAGE: yaml
CODE:
```
version: '3'

services:
  payload:
    image: node:18-alpine
    ports:
      - '3000:3000'
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    working_dir: /home/node/app/
    command: sh -c "corepack enable && corepack prepare pnpm@latest --activate && pnpm install && pnpm dev"
    depends_on:
      - mongo
      # - postgres
    env_file:
      - .env

  # Ensure your DATABASE_URI uses 'mongo' as the hostname ie. mongodb://mongo/my-db-name
  mongo:
    image: mongo:latest
    ports:
      - '27017:27017'
    command:
      - --storageEngine=wiredTiger
    volumes:
      - data:/data/db
    logging:
      driver: none

  # Uncomment the following to use postgres
  # postgres:
  #   restart: always
  #   image: postgres:latest
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"

volumes:
  data:
  # pgdata:
  node_modules:
```

----------------------------------------

TITLE: Using useField Hook in a Custom Text Field Component
DESCRIPTION: Example of implementing a custom text field component using the useField hook to manage the field's value and integration with the parent form. The hook handles sending and receiving the field's state.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'
import type { TextFieldClientComponent } from 'payload'
import { useField } from '@payloadcms/ui'

export const CustomTextField: TextFieldClientComponent = ({ path }) => {
  const { value, setValue } = useField({ path }) // highlight-line

  return (
    <div>
      <p>{path}</p>
      <input
        onChange={(e) => {
          setValue(e.target.value)
        }}
        value={value}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Edit View Elements in Global Configuration
DESCRIPTION: Example of how to set up custom components for the edit view in a global configuration. This demonstrates the structure for overriding default UI elements through the admin.components.elements property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/globals.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { SanitizedGlobalConfig } from 'payload'

export const MyGlobal: SanitizedGlobalConfig = {
  // ...
  admin: {
    components: {
      elements: {
        // highlight-line
        // ...
      },
    },
  },
}
```

----------------------------------------

TITLE: Using DefaultTypedEditorState in Payload CMS Lexical Editor
DESCRIPTION: Example of using the DefaultTypedEditorState type, which includes all types for nodes included in the defaultFeatures. This simplifies typing by automatically including common node types without requiring explicit listing.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { DefaultTypedEditorState } from '@payloadcms/richtext-lexical'

const editorState: DefaultTypedEditorState = {
  root: {
    type: 'root',
    direction: 'ltr',
    format: '',
    indent: 0,
    version: 1,
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: 'normal',
            style: '',
            text: 'Some text. Every property here is fully-typed',
            type: 'text',
            version: 1,
          },
        ],
        direction: 'ltr',
        format: '',
        indent: 0,
        type: 'paragraph',
        textFormat: 0,
        version: 1,
      },
    ],
  },
}
```

----------------------------------------

TITLE: Retrieving Default Lexical Editor Config in TypeScript
DESCRIPTION: Shows how to obtain the default Lexical editor configuration using the editorConfigFactory in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converters.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
const defaultEditorConfig = await editorConfigFactory.default({ config })
```

----------------------------------------

TITLE: Defining JWT Token Data in Payload CMS User Collection
DESCRIPTION: Example of a Users collection configuration showing how to specify which fields should be stored in the JWT token using the saveToJWT property. It demonstrates various field configurations including select fields, group fields, and nested fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/token-data.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Users: CollectionConfig = {
  slug: 'users',
  auth: true,
  fields: [
    {
      // will be stored in the JWT
      saveToJWT: true,
      type: 'select',
      name: 'role',
      options: ['super-admin', 'user'],
    },
    {
      // the entire object will be stored in the JWT
      // tab fields can do the same thing!
      saveToJWT: true,
      type: 'group',
      name: 'group1',
      fields: [
        {
          type: 'text',
          name: 'includeField',
        },
        {
          // will be omitted from the JWT
          saveToJWT: false,
          type: 'text',
          name: 'omitField',
        },
      ],
    },
    {
      type: 'group',
      name: 'group2',
      fields: [
        {
          // will be stored in the JWT
          // but stored at the top level
          saveToJWT: true,
          type: 'text',
          name: 'includeField',
        },
        {
          type: 'text',
          name: 'omitField',
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Advanced Locale Configuration in Payload (TypeScript)
DESCRIPTION: Demonstrates a more advanced configuration for locales, including full configuration objects with labels and RTL support. This setup allows for more detailed control over each locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  collections: [
    // collections go here
  ],
  localization: {
    locales: [
      {
        label: 'English',
        code: 'en',
      },
      {
        label: 'Arabic',
        code: 'ar',
        // opt-in to setting default text-alignment on Input fields to rtl (right-to-left)
        // when current locale is rtl
        rtl: true,
      },
    ],
    defaultLocale: 'en', // required
    fallback: true, // defaults to true
  },
})
```

----------------------------------------

TITLE: Implementing beforeChange Hook for Email Field
DESCRIPTION: Shows how to use a beforeChange hook to perform operation-specific logic on an email field, demonstrating conditional processing based on the operation type.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const emailField: Field = {
  name: 'email',
  type: 'email',
  hooks: {
    beforeChange: [
      ({ value, operation }) => {
        if (operation === 'create') {
          // Perform additional validation or transformation for 'create' operation
        }
        return value
      },
    ],
  },
}
```

----------------------------------------

TITLE: Implementing beforeLogin Hook in PayloadCMS
DESCRIPTION: Authentication hook that runs before login operation completion. Allows modifying the user object or preventing login by throwing an error.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_12

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeLoginHook } from 'payload'

const beforeLoginHook: CollectionBeforeLoginHook = async ({ user }) => {
  return user
}
```

----------------------------------------

TITLE: Multi-field Sorting using Local API in Payload CMS (TypeScript)
DESCRIPTION: This example shows how to sort documents by multiple fields using the Local API in Payload CMS. It sorts by 'priority' in ascending order and then by 'createdAt' in descending order.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/sort.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Payload } from 'payload'

const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    sort: ['priority', '-createdAt'], // highlight-line
  })

  return posts
}
```

----------------------------------------

TITLE: Using useDocumentInfo Hook for Document Management
DESCRIPTION: Demonstrates how to use the useDocumentInfo hook to access document metadata and perform document-related operations. This example shows how to create a link to related posts using the document ID.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'
import { useDocumentInfo } from '@payloadcms/ui'

const LinkFromCategoryToPosts: React.FC = () => {
  const { id } = useDocumentInfo()

  if (!id) {
    return null
  }

  return (
    <a
      href={`/admin/collections/posts?where[or][0][and][0][category][in][0]=[${id}]`}
    >
      View posts
    </a>
  )
}
```

----------------------------------------

TITLE: Finding Documents in PayloadCMS Collection
DESCRIPTION: Demonstrates how to query documents with pagination, filtering, sorting, and localization options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_4

LANGUAGE: javascript
CODE:
```
const result = await payload.find({
  collection: 'posts', // required
  depth: 2,
  page: 1,
  limit: 10,
  pagination: false, // If you want to disable pagination count, etc.
  where: {}, // pass a `where` query here
  sort: '-title',
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Restoring Global Versions in Payload CMS
DESCRIPTION: Example of restoring a specific version of a global document using the Payload Local API. Requires the global slug and version ID, with optional parameters for controlling depth, user context, and access permissions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/overview.mdx#2025-04-12_snippet_7

LANGUAGE: javascript
CODE:
```
// Result will be the restored global document.
const result = await payload.restoreGlobalVersion({
  slug: 'header', // required
  id: '507f1f77bcf86cd799439013', // required
  depth: 2,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Querying Access Control in Payload CMS using GraphQL
DESCRIPTION: Shows how to query access control information for collections using GraphQL. This query retrieves read permissions for the 'pages' collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_1

LANGUAGE: graphql
CODE:
```
query {
  Access {
    pages {
      read {
        permission
      }
    }
  }
}
```

----------------------------------------

TITLE: Modifying Schema with afterSchemaInit Hook in Payload CMS
DESCRIPTION: Illustrates how to use the afterSchemaInit hook to modify the Drizzle schema after it's built by Payload. This example adds a custom column and a composite index to an existing table.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { postgresAdapter } from '@payloadcms/db-postgres'
import { index, integer } from '@payloadcms/db-postgres/drizzle/pg-core'
import { buildConfig } from 'payload'

export default buildConfig({
  collections: [
    {
      slug: 'places',
      fields: [
        {
          name: 'country',
          type: 'text',
        },
        {
          name: 'city',
          type: 'text',
        },
      ],
    },
  ],
  db: postgresAdapter({
    afterSchemaInit: [
      ({ schema, extendTable, adapter }) => {
        extendTable({
          table: schema.tables.places,
          columns: {
            extraIntegerColumn: integer('extra_integer_column'),
          },
          extraConfig: (table) => ({
            country_city_composite_index: index(
              'country_city_composite_index',
            ).on(table.country, table.city),
          }),
        })

        return schema
      },
    ],
  }),
})
```

----------------------------------------

TITLE: Implementing a Plugin in Payload Config (TypeScript)
DESCRIPTION: This example shows how to implement a custom plugin called 'addLastModified' in the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { addLastModified } from './addLastModified.ts'

const config = buildConfig({
  // ...
  // highlight-start
  plugins: [addLastModified],
  // highlight-end
})
```

----------------------------------------

TITLE: Override Default Upload Converter with Next.js Image
DESCRIPTION: Demonstrates how to override the default upload converter to use Next.js Image component. Includes custom component implementation and type definitions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-jsx.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import type {
  DefaultNodeTypes,
  SerializedUploadNode,
} from '@payloadcms/richtext-lexical'
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import {
  type JSXConvertersFunction,
  RichText,
} from '@payloadcms/richtext-lexical/react'
import Image from 'next/image'
import React from 'react'

type NodeTypes = DefaultNodeTypes

const CustomUploadComponent: React.FC<{
  node: SerializedUploadNode
}> = ({ node }) => {
  if (node.relationTo === 'uploads') {
    const uploadDoc = node.value
    if (typeof uploadDoc !== 'object') {
      return null
    }
    const { alt, height, url, width } = uploadDoc
    return <Image alt={alt} height={height} src={url} width={width} />
  }

  return null
}

const jsxConverters: JSXConvertersFunction<NodeTypes> = ({
  defaultConverters,
}) => ({
  ...defaultConverters,
  upload: ({ node }) => {
    return <CustomUploadComponent node={node} />
  },
})

export const MyComponent: React.FC<{
  lexicalData: SerializedEditorState
}> = ({ lexicalData }) => {
  return <RichText converters={jsxConverters} data={lexicalData} />
}
```

----------------------------------------

TITLE: Custom Blocks Field Server Component in TypeScript/React
DESCRIPTION: Server-side implementation of a custom blocks field component using Payload UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { BlocksField } from '@payloadcms/ui'
import type { BlocksFieldServerComponent } from 'payload'

export const CustomBlocksFieldServer: BlocksFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <BlocksField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Preferences REST Endpoints
DESCRIPTION: REST endpoints for managing user preferences in PayloadCMS. Includes operations for getting, creating/updating, and deleting user-specific preferences.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rest-api/overview.mdx#2025-04-12_snippet_2

LANGUAGE: json
CODE:
```
{
  "value": "Europe/London"
}
```

----------------------------------------

TITLE: Cancelling Multiple Jobs in Payload CMS
DESCRIPTION: Demonstrates how to cancel multiple jobs at once using a Where query with the payload.jobs.cancel method. This example cancels all jobs with a specific workflow slug.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/jobs.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
await payload.jobs.cancel({
  where: {
    workflowSlug: {
      equals: 'createPost',
    },
  },
})
```

----------------------------------------

TITLE: beforeRead Hook Implementation
DESCRIPTION: Demonstrates implementation of a beforeRead hook that runs before findOne operations are transformed for output, providing access to all locales and hidden fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { GlobalBeforeReadHook } from 'payload'

const beforeReadHook: GlobalBeforeReadHook = async ({
  doc,
  req,
}) => {...}
```

----------------------------------------

TITLE: Configuring Stripe Sync in PayloadCMS
DESCRIPTION: Demonstrates how to configure automatic synchronization between PayloadCMS collections and Stripe resources. Includes webhook setup and field mapping configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/stripe.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import stripePlugin from '@payloadcms/plugin-stripe'

const config = buildConfig({
  plugins: [
    stripePlugin({
      stripeSecretKey: process.env.STRIPE_SECRET_KEY,
      stripeWebhooksEndpointSecret: process.env.STRIPE_WEBHOOKS_ENDPOINT_SECRET,
      sync: [
        {
          collection: 'customers',
          stripeResourceType: 'customers',
          stripeResourceTypeSingular: 'customer',
          fields: [
            {
              fieldPath: 'name', // this is a field on your own Payload Config
              stripeProperty: 'name', // use dot notation, if applicable
            },
          ],
        },
      ],
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Conditional Field Logic in TypeScript
DESCRIPTION: Example of implementing conditional logic to show/hide fields based on other field values and context.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_17

LANGUAGE: typescript
CODE:
```
{
  fields: [
    {
      name: 'enableGreeting',
      type: 'checkbox',
      defaultValue: false,
    },
    {
      name: 'greeting',
      type: 'text',
      admin: {
        // highlight-start
        condition: (data, siblingData, { blockData, path, user }) => {
          if (data.enableGreeting) {
            return true
          } else {
            return false
          }
        },
        // highlight-end
      },
    },
  ]
}
```

----------------------------------------

TITLE: Uploading Local Files with Payload API
DESCRIPTION: Example of uploading files stored locally on the server using the payload.create method. This approach is useful for seed scripts or server-side file uploads.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_7

LANGUAGE: ts
CODE:
```
const localFilePath = path.resolve(__dirname, filename)

await payload.create({
  collection: 'media',
  data: {
    alt,
  },
  filePath: localFilePath,
})
```

----------------------------------------

TITLE: Password Reset Flow in PayloadCMS
DESCRIPTION: Shows how to implement forgot password and reset password functionality.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_13

LANGUAGE: javascript
CODE:
```
const token = await payload.forgotPassword({
  collection: 'users', // required
  data: {
    // required
    email: 'dev@payloadcms.com',
  },
  req: req, // pass a Request object to be provided to all hooks
})
```

LANGUAGE: javascript
CODE:
```
const result = await payload.resetPassword({
  collection: 'users', // required
  data: {
    // required
    password: req.body.password, // the new password to set
    token: 'afh3o2jf2p3f...', // the token generated from the forgotPassword operation
  },
  req: req, // optional, pass a Request object to be provided to all hooks
})
```

----------------------------------------

TITLE: Customizing Placeholder Text in Payload CMS Lexical Rich Text Editor
DESCRIPTION: Configuration example showing how to customize the placeholder text that appears in the editor when it's empty by setting the placeholder admin property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
{
  name: 'richText',
  type: 'richText',
  editor: lexicalEditor({
    admin: {
      placeholder: 'Type your content here...'
    },
  }),
}
```

----------------------------------------

TITLE: Setting Field Type
DESCRIPTION: Example of setting a field's type property in a Field Config. The type property matches the field to its corresponding Field Type to determine its appearance and behavior.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyField: Field = {
  type: 'text', // highlight-line
  name: 'myField',
}
```

----------------------------------------

TITLE: Timezone Configuration for Date Fields
DESCRIPTION: Configuration example for enabling timezone selection on date fields in PayloadCMS. When enabled, adds a timezone dropdown to the date picker and stores timezone in a separate column.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_7

LANGUAGE: ts
CODE:
```
{
  name: 'date',
  type: 'date',
  timezone: true,
}
```

----------------------------------------

TITLE: Retrieving Lexical Editor Config in Collection afterRead Hook
DESCRIPTION: Demonstrates how to retrieve the Lexical editor configuration from an existing field within a collection's afterRead hook in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converters.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig, RichTextField } from 'payload'

import {
  editorConfigFactory,
  getEnabledNodes,
  lexicalEditor,
} from '@payloadcms/richtext-lexical'

export const MyCollection: CollectionConfig = {
  slug: 'slug',
  fields: [
    {
      name: 'text',
      type: 'text',
      hooks: {
        afterRead: [
          ({ siblingFields, value }) => {
            const field: RichTextField = siblingFields.find(
              (field) => 'name' in field && field.name === 'richText',
            ) as RichTextField

            const editorConfig = editorConfigFactory.fromField({
              field,
            })

            // Now you can use the editor config

            return value
          },
        ],
      },
    },
    {
      name: 'richText',
      type: 'richText',
      editor: lexicalEditor(),
    },
  ],
}
```

----------------------------------------

TITLE: Implementing Before Email Hook in Form Builder Plugin
DESCRIPTION: Example of how to use the beforeEmail hook in the Form Builder Plugin. This hook allows for customization of emails before they are sent.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
formBuilderPlugin({
  // ...
  beforeEmail: (emailsToSend, beforeChangeParams) => {
    // modify the emails in any way before they are sent
    return emails.map((email) => ({
      ...email,
      html: email.html, // transform the html in any way you'd like (maybe wrap it in an html template?)
    }))
  },
})
```

----------------------------------------

TITLE: Custom Array Field Client Component Implementation
DESCRIPTION: Client-side component implementation for custom array field rendering in PayloadCMS using the ArrayField component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/array.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { ArrayField } from '@payloadcms/ui'
import type { ArrayFieldClientComponent } from 'payload'

export const CustomArrayFieldClient: ArrayFieldClientComponent = (props) => {
  return <ArrayField {...props} />
}
```

----------------------------------------

TITLE: Securing Custom View with User Authentication
DESCRIPTION: Example of how to secure a custom view by checking if a user is logged in before rendering the content.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import type { AdminViewServerProps } from 'payload'

import { Gutter } from '@payloadcms/ui'
import React from 'react'

export function MyCustomView({ initPageResult }: AdminViewServerProps) {
  const {
    req: { user },
  } = initPageResult

  if (!user) {
    return <p>You must be logged in to view this page.</p>
  }

  return (
    <Gutter>
      <h1>Custom Default Root View</h1>
      <p>This view uses the Default Template.</p>
    </Gutter>
  )
}
```

----------------------------------------

TITLE: Custom Slate Node Converter Implementation
DESCRIPTION: Example of implementing a custom converter for Slate Upload nodes to Lexical format, showing the converter structure and node type handling.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/migration.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { SerializedUploadNode } from '../uploadNode'
import type { SlateNodeConverter } from '@payloadcms/richtext-lexical'

export const SlateUploadConverter: SlateNodeConverter = {
  converter({ slateNode }) {
    return {
      fields: {
        ...slateNode.fields,
      },
      format: '',
      relationTo: slateNode.relationTo,
      type: 'upload',
      value: {
        id: slateNode.value?.id || '',
      },
      version: 1,
    } as const as SerializedUploadNode
  },
  nodeTypes: ['upload'],
}
```

----------------------------------------

TITLE: Using Select with Local API in Payload CMS
DESCRIPTION: Examples of using the select option in Payload's Local API to include or exclude specific fields when querying documents, including nested field selection within groups.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/select.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Payload } from 'payload'

// Include mode
const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    select: {
      text: true,
      // select a specific field from group
      group: {
        number: true,
      },
      // select all fields from array
      array: true,
    },
  })

  return posts
}

// Exclude mode
const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    // Select everything except for array and group.number
    select: {
      array: false,
      group: {
        number: false,
      },
    },
  })

  return posts
}
```

----------------------------------------

TITLE: Configuring Root Views in Payload CMS TypeScript
DESCRIPTION: This snippet demonstrates how to configure custom Root Views in the Payload CMS configuration. It shows how to replace the default dashboard view with a custom component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      views: {
        // highlight-start
        dashboard: {
          Component: '/path/to/Dashboard',
        },
        // highlight-end
        // Other options include:
        // - account
        // - [key: string]
        // See below for more details
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring Tabs Field in Payload CMS Collection
DESCRIPTION: This example shows a complete configuration of a Tabs field within a Payload CMS collection. It demonstrates how to set up multiple tabs with different fields, labels, and descriptions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/tabs.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      type: 'tabs', // required
      tabs: [
        // required
        {
          label: 'Tab One Label', // required
          description: 'This will appear within the tab above the fields.',
          fields: [
            // required
            {
              name: 'someTextField',
              type: 'text',
              required: true,
            },
          ],
        },
        {
          name: 'tabTwo',
          label: 'Tab Two Label', // required
          interfaceName: 'TabTwo', // optional (`name` must be present)
          fields: [
            // required
            {
              name: 'numberField', // accessible via tabTwo.numberField
              type: 'number',
              required: true,
            },
          ],
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Slate Editor in Payload Config
DESCRIPTION: TypeScript example showing how to import and configure the Slate editor in a Payload configuration file. The slateEditor function is imported and passed to the editor property of the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/richtext-slate/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { slateEditor } from '@payloadcms/richtext-slate'

export default buildConfig({
  editor: slateEditor({}),
  // ...rest of config
})
```

----------------------------------------

TITLE: Implementing afterLogin Hook in PayloadCMS
DESCRIPTION: Hook that executes after successful login operations. Provides access to the authenticated user and generated token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_13

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterLoginHook } from 'payload';

const afterLoginHook: CollectionAfterLoginHook = async ({
  user,
  token,
}) => {...}
```

----------------------------------------

TITLE: Configuring CSRF Prevention in Payload Config
DESCRIPTION: Shows how to configure CSRF prevention in Payload by defining a whitelist of trusted domains that are allowed to make cookie-based authenticated requests. This helps prevent CSRF attacks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/cookies.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
// payload.config.ts

import { buildConfig } from 'payload'

const config = buildConfig({
  serverURL: 'https://my-payload-instance.com',
  // highlight-start
  csrf: [
    // whitelist of domains to allow cookie auth from
    'https://your-frontend-app.com',
    'https://your-other-frontend-app.com',
    // `config.serverURL` is added by default if defined
  ],
  // highlight-end
  collections: [
    // collections here
  ],
})

export default config
```

----------------------------------------

TITLE: Using Selection Hook in PayloadCMS
DESCRIPTION: Shows implementation of useSelection hook for managing row selections in List view. Provides functionality for tracking selected items and handling bulk selections.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'
import { useSelection } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { count, toggleAll, totalDocs } = useSelection()

  return (
    <>
      <span>
        Selected {count} out of {totalDocs} docs!
      </span>
      <button type="button" onClick={() => toggleAll(true)}>
        Toggle All Selections
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing a Checkbox Field in a Collection Configuration
DESCRIPTION: Complete example showing how to implement a Checkbox field within a Payload CMS collection configuration, including naming, labeling, and default value.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/checkbox.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'enableCoolStuff', // required
      type: 'checkbox', // required
      label: 'Click me to see fanciness',
      defaultValue: false,
    },
  ],
}
```

----------------------------------------

TITLE: Using TypedEditorState with Node Types in Payload CMS Lexical Editor
DESCRIPTION: Example of using the TypedEditorState helper type to create a fully typed editor state by explicitly listing all possible node types. This ensures type safety for the rich text editor's JSON structure.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type {
  SerializedAutoLinkNode,
  SerializedBlockNode,
  SerializedHorizontalRuleNode,
  SerializedLinkNode,
  SerializedListItemNode,
  SerializedListNode,
  SerializedParagraphNode,
  SerializedQuoteNode,
  SerializedRelationshipNode,
  SerializedTextNode,
  SerializedUploadNode,
  TypedEditorState,
  SerializedHeadingNode,
} from '@payloadcms/richtext-lexical'

const editorState: TypedEditorState<
  | SerializedAutoLinkNode
  | SerializedBlockNode
  | SerializedHorizontalRuleNode
  | SerializedLinkNode
  | SerializedListItemNode
  | SerializedListNode
  | SerializedParagraphNode
  | SerializedQuoteNode
  | SerializedRelationshipNode
  | SerializedTextNode
  | SerializedUploadNode
  | SerializedHeadingNode
> = {
  root: {
    type: 'root',
    direction: 'ltr',
    format: '',
    indent: 0,
    version: 1,
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: 'normal',
            style: '',
            text: 'Some text. Every property here is fully-typed',
            type: 'text',
            version: 1,
          },
        ],
        direction: 'ltr',
        format: '',
        indent: 0,
        type: 'paragraph',
        textFormat: 0,
        version: 1,
      },
    ],
  },
}
```

----------------------------------------

TITLE: Creating a Custom Date Field Client Component in React
DESCRIPTION: Example of implementing a custom client component for a Date field in Payload CMS, using the DateTimeField component from the Payload UI package.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { DateTimeField } from '@payloadcms/ui'
import type { DateFieldClientComponent } from 'payload'

export const CustomDateFieldClient: DateFieldClientComponent = (props) => {
  return <DateTimeField {...props} />
}
```

----------------------------------------

TITLE: Example Collection Configuration for Array Management
DESCRIPTION: Configuration example showing how to set up a collection with array fields and custom UI components for array management.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
const ExampleCollection = {
slug: "example-collection",
fields: [
{
name: "arrayField",
type: "array",
fields: [
{
name: "textField",
type: "text",
},
],
},
{
type: "ui",
name: "customArrayManager",
admin: {
components: {
Field: '/path/to/CustomArrayManagerField',
},
},
},
],
}
```

----------------------------------------

TITLE: Account Management Operations in PayloadCMS
DESCRIPTION: Demonstrates account unlock and email verification operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_14

LANGUAGE: javascript
CODE:
```
const result = await payload.unlock({
  collection: 'users', // required
  data: {
    // required
    email: 'dev@payloadcms.com',
  },
  req: req, // optional, pass a Request object to be provided to all hooks
  overrideAccess: true,
})
```

LANGUAGE: javascript
CODE:
```
const result = await payload.verifyEmail({
  collection: 'users', // required
  token: 'afh3o2jf2p3f...', // the token saved on the user as `_verificationToken`
})
```

----------------------------------------

TITLE: Custom Array Field Server Component Implementation
DESCRIPTION: Server-side component implementation for custom array field rendering in PayloadCMS, utilizing the ArrayField component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/array.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { ArrayField } from '@payloadcms/ui'
import type { ArrayFieldServerComponent } from 'payload'

export const CustomArrayFieldServer: ArrayFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <ArrayField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Modifying Raw SQL Schema in Payload CMS with beforeSchemaInit Hook
DESCRIPTION: Demonstrates how to modify the internal Payload 'raw' SQL schema in the beforeSchemaInit hook. This approach allows custom tables and columns to be included in the generated Drizzle schema.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import { postgresAdapter } from '@payloadcms/db-postgres'

postgresAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      // Add a new table
      adapter.rawTables.myTable = {
        name: 'my_table',
        columns: {
          my_id: {
            name: 'my_id',
            type: 'serial',
            primaryKey: true,
          },
        },
      }

      // Add a new column to generated by Payload table:
      adapter.rawTables.posts.columns.customColumn = {
        name: 'custom_column',
        // Note that Payload SQL doesn't support everything that Drizzle does.
        type: 'integer',
        notNull: true,
      }
      // Add a new index to generated by Payload table:
      adapter.rawTables.posts.indexes.customColumnIdx = {
        name: 'custom_column_idx',
        unique: true,
        on: ['custom_column'],
      }

      return schema
    },
  ],
})
```

----------------------------------------

TITLE: Configuring Description Component in Collection Config
DESCRIPTION: Configuration example showing how to add a custom Description component to a PayloadCMS collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_17

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      // highlight-start
      Description: '/path/to/MyDescriptionComponent',
      // highlight-end
    },
  },
}
```

----------------------------------------

TITLE: Converting Lexical Rich Text to HTML in React Component
DESCRIPTION: Basic example of converting Lexical JSON to HTML on-demand using convertLexicalToHTML function in a React component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-html.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'
import { convertLexicalToHTML } from '@payloadcms/richtext-lexical/html'

import React from 'react'

export const MyComponent = ({ data }: { data: SerializedEditorState }) => {
  const html = convertLexicalToHTML({ data })

  return <div dangerouslySetInnerHTML={{ __html: html }} />
}
```

----------------------------------------

TITLE: beforeValidate Hook Implementation
DESCRIPTION: Shows how to implement a beforeValidate hook that runs during the update operation, allowing data modification before server-side validation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { GlobalBeforeValidateHook } from 'payload'

const beforeValidateHook: GlobalBeforeValidateHook = async ({
  data,
  req,
  originalDoc,
}) => {
  return data
}
```

----------------------------------------

TITLE: Implementing Read Versions Access Control in Payload CMS Collection
DESCRIPTION: This snippet shows how to add read versions access control to a Payload CMS collection with versions enabled. It determines whether the currently logged-in user can access the version history of a document.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithVersionsAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    readVersions: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Configuring Custom Providers in Payload Config
DESCRIPTION: This snippet demonstrates how to set up custom React Context providers in your Payload configuration file. It uses the admin.components.providers property to specify the path to your custom provider component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-providers.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    components: {
      providers: ['/path/to/MyProvider'], // highlight-line
    },
  },
})
```

----------------------------------------

TITLE: Updating Document by ID in PayloadCMS
DESCRIPTION: Shows how to update a specific document by its ID with support for file uploads and access control.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_7

LANGUAGE: javascript
CODE:
```
const result = await payload.update({
  collection: 'posts', // required
  id: '507f1f77bcf86cd799439011', // required
  data: {
    // required
    title: 'sure',
    description: 'maybe',
  },
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  overrideLock: false, // By default, document locks are ignored. Set to false to enforce locks.
  showHiddenFields: true,

  // If your collection supports uploads, you can upload
  // a file directly through the Local API by providing
  // its full, absolute file path.
  filePath: path.resolve(__dirname, './path-to-image.jpg'),

  // If you are uploading a file and would like to replace
  // the existing file instead of generating a new filename,
  // you can set the following property to `true`
  overwriteExistingFiles: true,
})
```

----------------------------------------

TITLE: Configuring Global Views in Payload CMS TypeScript
DESCRIPTION: This snippet illustrates how to configure custom Global Views in Payload CMS. It shows how to replace the default edit view for a global with a custom component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import type { SanitizedGlobalConfig } from 'payload'

export const MyGlobalConfig: SanitizedGlobalConfig = {
  // ...
  admin: {
    components: {
      views: {
        // highlight-start
        edit: {
          default: {
            Component: '/path/to/MyCustomGlobalView',
          },
        },
        // highlight-end
        // Other options include:
        // - [key: string]
        // See below for more details
      },
    },
  },
}
```

----------------------------------------

TITLE: Sorting Documents using Local API in Payload CMS (TypeScript)
DESCRIPTION: This snippet demonstrates how to sort documents in descending order by the 'createdAt' field using the Local API in Payload CMS. It uses the 'sort' option in the payload.find() method.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/sort.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Payload } from 'payload'

const getPosts = async (payload: Payload) => {
  const posts = await payload.find({
    collection: 'posts',
    sort: '-createdAt', // highlight-line
  })

  return posts
}
```

----------------------------------------

TITLE: Using Theme Hook in PayloadCMS
DESCRIPTION: Demonstrates usage of useTheme hook for managing theme preferences and automatic theme switching.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'
import { useTheme } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { autoMode, setTheme, theme } = useTheme()

  return (
    <>
      <span>
        The current theme is {theme} and autoMode is {autoMode}
      </span>
      <button
        type="button"
        onClick={() =>
          setTheme((prev) => (prev === 'light' ? 'dark' : 'light'))
        }
      >
        Toggle theme
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Resolver Function Structure for Custom GraphQL Operations
DESCRIPTION: Example of a resolver function structure for custom GraphQL operations in Payload CMS. It shows the function signature with available arguments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/extending.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
;async (obj, args, context, info) => {}
```

----------------------------------------

TITLE: Running Jobs Using Local API in TypeScript
DESCRIPTION: These code snippets demonstrate how to run jobs programmatically using Payload's Local API. It shows running all jobs, customizing queue and limit, filtering jobs, and running a single job by ID.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
const results = await payload.jobs.run()

// You can customize the queue name and limit by passing them as arguments:
await payload.jobs.run({ queue: 'nightly', limit: 100 })

// You can provide a where clause to filter the jobs that should be run:
await payload.jobs.run({
  where: { 'input.message': { equals: 'secret' } },
})

// Run a single job:
const results = await payload.jobs.runByID({
  id: myJobID,
})
```

----------------------------------------

TITLE: Configuring Lexical Editor in Payload Config
DESCRIPTION: TypeScript example showing how to integrate the Lexical Rich Text Editor into a Payload CMS configuration. This demonstrates importing the editor and adding it to the Payload buildConfig function.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/richtext-lexical/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { lexicalEditor } from '@payloadcms/richtext-lexical'

export default buildConfig({
  editor: lexicalEditor({}),
  // ...rest of config
})
```

----------------------------------------

TITLE: Configuring Job Processing Order in TypeScript
DESCRIPTION: These snippets demonstrate different ways to configure the processing order of jobs in Payload CMS. It shows setting a global order, queue-specific orders, and using a function to determine the order dynamically.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // Other configurations...
  jobs: {
    tasks: [
      // your tasks here
    ],
    processingOrder: '-createdAt', // Process jobs in reverse order of creation = LIFO
  },
})

// Queue-specific order
export default buildConfig({
  // Other configurations...
  jobs: {
    tasks: [
      // your tasks here
    ],
    processingOrder: {
      default: 'createdAt', // FIFO
      queues: {
        nightly: '-createdAt', // LIFO
        myQueue: '-createdAt', // LIFO
      },
    },
  },
})

// Function-based order
export default buildConfig({
  // Other configurations...
  jobs: {
    tasks: [
      // your tasks here
    ],
    processingOrder: ({ queue }) => {
      if (queue === 'myQueue') {
        return '-createdAt' // LIFO
      }
      return 'createdAt' // FIFO
    },
  },
})
```

----------------------------------------

TITLE: Server-side HTML Generation with Payload Population
DESCRIPTION: Server component implementation for HTML generation using Payload's population function for improved performance.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-html.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import { getPayloadPopulateFn } from '@payloadcms/richtext-lexical'
import { convertLexicalToHTMLAsync } from '@payloadcms/richtext-lexical/html-async'
import { getPayload } from 'payload'
import React from 'react'

import config from '../../config.js'

export const MyRSCComponent = async ({
  data,
}: {
  data: SerializedEditorState
}) => {
  const payload = await getPayload({
    config,
  })

  const html = await convertLexicalToHTMLAsync({
    data,
    populate: await getPayloadPopulateFn({
      currentDepth: 0,
      depth: 1,
      payload,
    }),
  })

  return html && <div dangerouslySetInnerHTML={{ __html: html }} />
}
```

----------------------------------------

TITLE: Configuring Stripe Plugin in Payload Config
DESCRIPTION: Basic configuration of the Stripe plugin in the Payload CMS config file. It demonstrates how to include the plugin and provide the necessary Stripe secret key.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/stripe.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { stripePlugin } from '@payloadcms/plugin-stripe'

const config = buildConfig({
  plugins: [
    stripePlugin({
      stripeSecretKey: process.env.STRIPE_SECRET_KEY,
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Converting Markdown to Lexical Richtext
DESCRIPTION: Example of converting Markdown content to Lexical editor state format using the convertMarkdownToLexical utility.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-markdown.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import {
  convertMarkdownToLexical,
  editorConfigFactory,
} from '@payloadcms/richtext-lexical'

const lexicalJSON = convertMarkdownToLexical({
  editorConfig: await editorConfigFactory.default({
    config, // <= make sure you have access to your Payload Config
  }),
  markdown: '# Hello world\n\nThis is a **test**.',
})
```

----------------------------------------

TITLE: Configuring Advanced Username Login Options in Payload
DESCRIPTION: Demonstrates how to configure advanced username login options including allowing email login alongside username login and making email optional during user creation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
{
  slug: 'customers',
  auth: {
    loginWithUsername: {
      allowEmailLogin: true, // default: false
      requireEmail: false, // default: false
    },
  },
}
```

----------------------------------------

TITLE: Importing TypeScript Types for Payload CMS Collection Configuration
DESCRIPTION: This code snippet demonstrates how to import TypeScript types from Payload CMS for use in collection configuration. It shows the import statement for CollectionConfig and SanitizedCollectionConfig types, which can be used to ensure type safety when writing collection configs.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig, SanitizedCollectionConfig } from 'payload'
```

----------------------------------------

TITLE: Using Dynamic Feature Functions in Lexical Server Features
DESCRIPTION: This snippet shows how to create a server feature using a function as the feature property. This approach provides access to config, props, and other features during the feature loading process, enabling dynamic feature configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import { createServerFeature } from '@payloadcms/richtext-lexical'

createServerFeature({
  //...
  feature: async ({
    config,
    isRoot,
    props,
    resolvedFeatures,
    unSanitizedEditorConfig,
    featureProviderMap,
  }) => {
    return {
      //Actual server feature here...
    }
  },
})
```

----------------------------------------

TITLE: Custom Document Tab Client Component
DESCRIPTION: Example of creating a custom document tab client component in PayloadCMS using React with the client directive.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/document-views.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import type { DocumentTabClientProps } from 'payload'
import { Link } from '@payloadcms/ui'

export function MyCustomTabComponent(props: DocumentTabClientProps) {
  return (
    <Link href="/my-custom-tab">This is a custom Document Tab (Client)</Link>
  )
}
```

----------------------------------------

TITLE: Configuring Vercel Postgres Adapter for Payload CMS
DESCRIPTION: This snippet shows how to set up the Vercel Postgres adapter for Payload CMS using the @payloadcms/db-vercel-postgres package. It includes two configuration examples: one using default settings and another with custom connection options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { vercelPostgresAdapter } from '@payloadcms/db-vercel-postgres'

export default buildConfig({
  // Automatically uses proces.env.POSTGRES_URL if no options are provided.
  db: vercelPostgresAdapter(),
  // Optionally, can accept the same options as the @vercel/postgres package.
  db: vercelPostgresAdapter({
    pool: {
      connectionString: process.env.DATABASE_URL,
    },
  }),
})
```

----------------------------------------

TITLE: Adding Custom Toolbar Items to PayloadCMS Rich Text Editor
DESCRIPTION: Example showing how to create a client feature with a custom toolbar item added to the fixed toolbar. The item includes an icon, detection of active state, localized label, and a command dispatch when selected.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_17

LANGUAGE: typescript
CODE:
```
'use client'

import {
  createClientFeature,
  toolbarAddDropdownGroupWithItems,
} from '@payloadcms/richtext-lexical/client'
import { IconComponent } from './icon'
import { $isHorizontalRuleNode } from './nodes/MyNode'
import { INSERT_MYNODE_COMMAND } from './plugin'
import { $isNodeSelection } from '@payloadcms/richtext-lexical/lexical'

export const MyClientFeature = createClientFeature({
  toolbarFixed: {
    groups: [
      toolbarAddDropdownGroupWithItems([
        {
          ChildComponent: IconComponent,
          isActive: ({ selection }) => {
            if (!$isNodeSelection(selection) || !selection.getNodes().length) {
              return false
            }

            const firstNode = selection.getNodes()[0]
            return $isHorizontalRuleNode(firstNode)
          },
          key: 'myNode',
          label: ({ i18n }) => {
            return i18n.t('lexical:myFeature:label')
          },
          onSelect: ({ editor }) => {
            editor.dispatchCommand(INSERT_MYNODE_COMMAND, undefined)
          },
        },
      ]),
    ],
  },
})
```

----------------------------------------

TITLE: Custom Number Field Server Component
DESCRIPTION: Implementation of a custom server-side Number field component using PayloadCMS UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/number.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { NumberField } from '@payloadcms/ui'
import type { NumberFieldServerComponent } from 'payload'

export const CustomNumberFieldServer: NumberFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <NumberField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Implementing Payment Handling in Form Builder Plugin
DESCRIPTION: Example of how to implement payment handling in the Form Builder Plugin. This demonstrates how to calculate the total price and process a payment based on form input.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import { getPaymentTotal } from '@payloadcms/plugin-form-builder'

formBuilderPlugin({
  // ...
  handlePayment: async ({ form, submissionData }) => {
    // first calculate the price
    const paymentField = form.fields?.find(
      (field) => field.blockType === 'payment',
    )
    const price = getPaymentTotal({
      basePrice: paymentField.basePrice,
      priceConditions: paymentField.priceConditions,
      fieldValues: submissionData,
    })
    // then asynchronously process the payment here
  },
})
```

----------------------------------------

TITLE: Configuring Workflow with Predefined and Inline Tasks in Payload CMS (TypeScript)
DESCRIPTION: This code snippet demonstrates how to set up a workflow in Payload CMS that uses both predefined and inline tasks. It shows the configuration of input schema, handling of predefined tasks with type safety, and the use of inline tasks for more dynamic operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/workflows.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    tasks: [
      // ...
    ]
    workflows: [
      {
        slug: 'createPostAndUpdate',
        inputSchema: [
          {
            name: 'title',
            type: 'text',
            required: true,
          },
        ],
        handler: async ({ job, tasks, inlineTask }) => {
          // Here, we run a predefined task.
          // The `createPost` handler arguments and return type
          // are both strongly typed
          const output = await tasks.createPost('1', {
            input: {
              title: job.input.title,
            },
          })

          // Here, this task is not defined in the Payload config
          // and is "inline". Its output will be stored on the Job in the database
          // however its arguments will be untyped.
          const { newPost } = await inlineTask('2', {
            task: async ({ req }) => {
              const newPost = await req.payload.update({
                collection: 'post',
                id: '2',
                req,
                retries: 3,
                data: {
                  title: 'updated!',
                },
              })
              return {
                output: {
                  newPost
                },
              }
            },
          })
        },
      } as WorkflowConfig<'updatePost'>
    ]
  }
})
```

----------------------------------------

TITLE: Logging out from Payload CMS using GraphQL
DESCRIPTION: Demonstrates how to log out from Payload CMS using a GraphQL mutation. This operation safely removes the user's authentication token.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_8

LANGUAGE: graphql
CODE:
```
mutation {
  logout[collection-singular-label]
}
```

----------------------------------------

TITLE: Implementing Live Preview in React Component
DESCRIPTION: Example of using the useLivePreview hook in a React client component to enable live preview functionality. Shows how to handle initial data and maintain sync with changes.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/client.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'
import { useLivePreview } from '@payloadcms/live-preview-react'
import { Page as PageType } from '@/payload-types'

export const PageClient: React.FC<{
  page: {
    title: string
  }
}> = ({ page: initialPage }) => {
  const { data } = useLivePreview<PageType>({
    initialData: initialPage,
    serverURL: PAYLOAD_SERVER_URL,
    depth: 2,
  })

  return <h1>{data.title}</h1>
}
```

----------------------------------------

TITLE: Listening to Document Events with React Hook
DESCRIPTION: This code snippet demonstrates using the `useDocumentEvents` hook to monitor and report document events like updates. It primarily captures the latest document changes outside the current editing scope by accessing `mostRecentUpdate`.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_17

LANGUAGE: tsx
CODE:
```
"use client"
import { useDocumentEvents } from '@payloadcms/ui'

const ListenForUpdates: React.FC = () => {
  const { mostRecentUpdate } = useDocumentEvents()

  return <span>{JSON.stringify(mostRecentUpdate)}</span>
}

```

----------------------------------------

TITLE: Using Table Columns Hook in PayloadCMS
DESCRIPTION: Shows how to use useTableColumns hook for managing table column visibility and configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_16

LANGUAGE: tsx
CODE:
```
'use client'
import { useTableColumns } from '@payloadcms/ui'

const MyComponent: React.FC = () => {
  const { setActiveColumns } = useTableColumns()

  const resetColumns = () => {
    setActiveColumns(['id', 'createdAt', 'updatedAt'])
  }

  return (
    <button type="button" onClick={resetColumns}>
      Reset columns
    </button>
  )
}
```

----------------------------------------

TITLE: Implementing a Custom Text Field Label Server Component in Payload CMS
DESCRIPTION: Demonstrates how to create a custom server component for a Text field label in Payload CMS. This component uses the FieldLabel component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { TextFieldLabelServerComponent } from 'payload'

export const CustomTextFieldLabelServer: TextFieldLabelServerComponent = ({
  clientField,
  path,
  required,
}) => {
  return (
    <FieldLabel
      label={clientField?.label || clientField?.name}
      path={path}
      required={clientField?.required}
    />
  )
}
```

----------------------------------------

TITLE: Setting Job Processing Order with Local API in TypeScript
DESCRIPTION: This snippet shows how to set the processing order for a job when queueing it using Payload's Local API. It demonstrates setting the order to process jobs in reverse order of creation (LIFO).
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
const createdJob = await payload.jobs.queue({
  workflow: 'createPostAndUpdate',
  input: {
    title: 'my title',
  },
  processingOrder: '-createdAt', // Process jobs in reverse order of creation = LIFO
})
```

----------------------------------------

TITLE: Custom Code Field Client Component (TypeScript React)
DESCRIPTION: This snippet shows a custom client component for the Code field in Payload CMS. It's a client-side component that wraps the CodeField from @payloadcms/ui and implements the CodeFieldClientComponent interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { CodeField } from '@payloadcms/ui'
import type { CodeFieldClientComponent } from 'payload'

export const CustomCodeFieldClient: CodeFieldClientComponent = (props) => {
  return <CodeField {...props} />
}
```

----------------------------------------

TITLE: Customizing Document Tabs in PayloadCMS
DESCRIPTION: Demonstrates how to customize document tabs in PayloadCMS, including adding custom tab components and configuring tab properties.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/document-views.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  slug: 'my-collection',
  admin: {
    components: {
      views: {
        edit: {
          myCustomTab: {
            Component: '/path/to/MyCustomTab',
            path: '/my-custom-tab',
            tab: {
              Component: '/path/to/MyCustomTabComponent',
            },
          },
          anotherCustomTab: {
            Component: '/path/to/AnotherCustomView',
            path: '/another-custom-view',
            tab: {
              label: 'Another Custom View',
              href: '/another-custom-view',
            },
          },
        },
      },
    },
  },
}
```

----------------------------------------

TITLE: Customizing Filter Component in PayloadCMS
DESCRIPTION: Demonstrates how to replace the default Filter Component with a custom implementation using the admin.components.Filter property. The Filter component is used for filtering in List Views.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_22

LANGUAGE: ts
CODE:
```
import type { Field } from 'payload'

export const myField: Field = {
  name: 'myField',
  type: 'text',
  admin: {
    components: {
      Filter: '/path/to/MyCustomFilterComponent', // highlight-line
    },
  },
}
```

----------------------------------------

TITLE: Customizing Root-level Routes in Payload CMS Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to customize root-level routes in the Payload CMS configuration. It shows how to change the admin panel route using the 'routes' property in the config object.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  routes: {
    admin: '/custom-admin-route', // highlight-line
  },
})
```

----------------------------------------

TITLE: Configuring Payload CMS with Lexical Rich Text Editor in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Payload CMS configuration using TypeScript, importing the buildConfig function from Payload and the lexicalEditor from the @payloadcms/richtext-lexical package. It initializes an empty collections array and configures the Lexical editor as the default editor for rich text fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/test/lexical-mdx/tests/code1.input.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { lexicalEditor } from '@payloadcms/richtext-lexical'

export default buildConfig({
  collections: [
    // your collections here
  ],
  // Pass the Lexical editor to the root config
  editor: lexicalEditor({}),
})
```

----------------------------------------

TITLE: Configuring Root Metadata in Payload CMS
DESCRIPTION: Example of configuring root-level metadata for the Admin Panel including title, description and icons. This metadata applies to all pages within the Admin Panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/metadata.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
{
  // ...
  admin: {
    // highlight-start
    meta: {
    // highlight-end
      title: 'My Admin Panel',
      description: 'The best admin panel in the world',
      icons: [
        {
          rel: 'icon',
          type: 'image/png',
          url: '/favicon.png',
        },
      ],
    },
  },
}
```

----------------------------------------

TITLE: Creating Custom Client-Side PublishButton Component in React
DESCRIPTION: This code shows how to create a custom client-side PublishButton component in React for Payload CMS. It uses the 'use client' directive, the PublishButton component from @payloadcms/ui, and the PublishButtonClientProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_13

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { PublishButton } from '@payloadcms/ui'
import type { PublishButtonClientProps } from 'payload'

export function MyPublishButton(props: PublishButtonClientProps) {
  return <PublishButton label="Publish" />
}
```

----------------------------------------

TITLE: Nested Property Query Example
DESCRIPTION: Illustrates how to query nested properties using dot notation, specifically for relational fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/overview.mdx#2025-04-12_snippet_2

LANGUAGE: javascript
CODE:
```
import type { Where } from 'payload'

const query: Where = {
  'artists.featured': {
    exists: true,
  },
}
```

----------------------------------------

TITLE: Using Postgres Transactions in Payload Migrations
DESCRIPTION: Example of working directly with Postgres within a Payload migration, using the db object and sql template literal to perform database operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/migrations.mdx#2025-04-12_snippet_3

LANGUAGE: ts
CODE:
```
import { type MigrateUpArgs, sql } from '@payloadcms/db-postgres'

export async function up({ db, payload, req }: MigrateUpArgs): Promise<void> {
  const { rows: posts } = await db.execute(sql`SELECT * from posts`)
}
```

----------------------------------------

TITLE: Using Payload Hooks in Client Component
DESCRIPTION: Shows how to use Payload's built-in React hooks, such as useDocumentInfo, in a client-side component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { useDocumentInfo } from '@payloadcms/ui'

export function MyClientComponent() {
  const { slug } = useDocumentInfo()

  return <p>{`Entity slug: ${slug}`}</p>
}
```

----------------------------------------

TITLE: Custom Textarea Field Client Component
DESCRIPTION: Client-side implementation of a custom textarea field component using Payload UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/textarea.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { TextareaField } from '@payloadcms/ui'
import type { TextareaFieldClientComponent } from 'payload'

export const CustomTextareaFieldClient: TextareaFieldClientComponent = (
  props,
) => {
  return <TextareaField {...props} />
}
```

----------------------------------------

TITLE: Adding Access Control to a Field in Payload CMS
DESCRIPTION: Basic example showing how to add access control to a field in Payload CMS using the access property in a Field config.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/fields.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const FieldWithAccessControl: Field = {
  // ...
  access: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating Custom Translation Types for TypeScript
DESCRIPTION: Example of setting up TypeScript types for custom translations by extending the built-in English translations and defining proper type exports for use throughout the application.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/i18n.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
// <rootDir>/custom-translations.ts

import { enTranslations } from '@payloadcms/translations/languages/en'
import type { NestedKeysStripped } from '@payloadcms/translations'

export const customTranslations = {
  en: {
    general: {
      myCustomKey: 'My custom english translation',
    },
    fields: {
      addLabel: 'Add!',
    },
  },
}

export type CustomTranslationsObject = typeof customTranslations.en &
  typeof enTranslations
export type CustomTranslationsKeys =
  NestedKeysStripped<CustomTranslationsObject>
```

----------------------------------------

TITLE: Implementing Date Fields with Different Appearances in a Collection
DESCRIPTION: A comprehensive example of implementing multiple Date fields with different picker appearances and display formats in a Payload CMS collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'dateOnly',
      type: 'date',
      admin: {
        date: {
          pickerAppearance: 'dayOnly',
          displayFormat: 'd MMM yyy',
        },
      },
    },
    {
      name: 'timeOnly',
      type: 'date',
      admin: {
        date: {
          pickerAppearance: 'timeOnly',
          displayFormat: 'h:mm:ss a',
        },
      },
    },
    {
      name: 'monthOnly',
      type: 'date',
      admin: {
        date: {
          pickerAppearance: 'monthOnly',
          displayFormat: 'MMMM yyyy',
        },
      },
    },
  ],
}
```

----------------------------------------

TITLE: Implementing afterChange Hook for Membership Status in Payload CMS
DESCRIPTION: Demonstrates how to set up an afterChange hook on a select field to track membership status changes. The hook logs when a user changes their membership tier and can be used to trigger additional actions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const membershipStatusField: Field = {
  name: 'membershipStatus',
  type: 'select',
  options: [
    { label: 'Standard', value: 'standard' },
    { label: 'Premium', value: 'premium' },
    { label: 'VIP', value: 'vip' },
  ],
  hooks: {
    afterChange: [
      ({ value, previousValue, req }) => {
        if (value !== previousValue) {
          // Log or perform an action when the membership status changes
          console.log(
            `User ID ${req.user.id} changed their membership status from ${previousValue} to ${value}.`,
          )
          // Here, you can implement actions that could track conversions from one tier to another
        }
      },
    ],
  },
}
```

----------------------------------------

TITLE: Configuring Google Cloud Storage with Payload CMS
DESCRIPTION: Example of how to configure the Google Cloud Storage adapter with Payload CMS. Shows how to set up collections, specify bucket information, and provide necessary configuration options.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/storage-gcs/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { gcsStorage } from '@payloadcms/storage-gcs'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    gcsStorage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      bucket: process.env.GCS_BUCKET,
      options: {
        apiEndpoint: process.env.GCS_ENDPOINT,
        projectId: process.env.GCS_PROJECT_ID,
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Generating SEO Description in Payload Config
DESCRIPTION: Example of how to define a custom function to generate the SEO description using document content.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  seoPlugin({
    generateDescription: ({ doc }) => doc?.excerpt,
  })
}
```

----------------------------------------

TITLE: Importing External Schema into Payload SQLite Configuration
DESCRIPTION: Example showing how to import external Drizzle schema definitions into your Payload config using the beforeSchemaInit hook. This is useful for preserving existing database structures when migrating to Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { sqliteAdapter } from '@payloadcms/db-sqlite'
import { users, countries } from '../drizzle/schema'

sqliteAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      return {
        ...schema,
        tables: {
          ...schema.tables,
          users,
          countries,
        },
      }
    },
  ],
})
```

----------------------------------------

TITLE: Configuring Azure Blob Storage Plugin in Payload Config
DESCRIPTION: Example of how to configure the Azure Blob Storage plugin in a Payload CMS configuration file. Shows how to set up collections with the storage adapter and provide necessary connection parameters.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/storage-azure/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { azureStorage } from '@payloadcms/storage-azure'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    azureStorage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      allowContainerCreate: process.env.AZURE_STORAGE_ALLOW_CONTAINER_CREATE === 'true',
      baseURL: process.env.AZURE_STORAGE_ACCOUNT_BASEURL,
      connectionString: process.env.AZURE_STORAGE_CONNECTION_STRING,
      containerName: process.env.AZURE_STORAGE_CONTAINER_NAME,
    }),
  ],
})
```

----------------------------------------

TITLE: Implementing Feature Dependencies in Lexical for Payload CMS
DESCRIPTION: This snippet demonstrates how to check for the existence of other features and conditionally register nodes based on feature availability. It shows the OrderedListFeature avoiding duplicate node registration when UnorderedListFeature is present.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import { createServerFeature, createNode } from '@payloadcms/richtext-lexical'

export const OrderedListFeature = createServerFeature({
  feature: ({ featureProviderMap }) => {
    return {
      // ...
      nodes: featureProviderMap.has('unorderedList')
        ? []
        : [
            createNode({
              // ...
            }),
          ],
    }
  },
  key: 'orderedList',
})
```

----------------------------------------

TITLE: Implementing Nested Tasks in Payload CMS
DESCRIPTION: Example of implementing nested tasks using both inlineTask and tasks.CreateSimple methods. Shows how to configure parent tasks with sub-tasks and proper logging configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/tasks.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    // It is recommended to set `addParentToTaskLog` to `true` when using nested tasks, so that the parent task is included in the task log
    // This allows for better observability and debugging of the task execution
    addParentToTaskLog: true,
    tasks: [
      {
        slug: 'parentTask',
        inputSchema: [
          {
            name: 'text',
            type: 'text',
          },
        ],
        handler: async ({ input, req, tasks, inlineTask }) => {
          await inlineTask('Sub Task 1', {
            task: () => {
              // Do something
              return {
                output: {},
              }
            },
          })

          await tasks.CreateSimple('Sub Task 2', {
            input: { message: 'hello' },
          })

          return {
            output: {},
          }
        },
      } as TaskConfig<'parentTask'>,
    ],
  },
})
```

----------------------------------------

TITLE: Querying Join Fields with Local API in JavaScript
DESCRIPTION: Demonstrates how to use the Local API to query a collection with customized join field options, including limit, where conditions, and sorting.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/join.mdx#2025-04-12_snippet_3

LANGUAGE: js
CODE:
```
const result = await payload.find({
  collection: 'categories',
  where: {
    title: {
      equals: 'My Category',
    },
  },
  joins: {
    relatedPosts: {
      limit: 5,
      where: {
        title: {
          equals: 'My Post',
        },
      },
      sort: 'title',
    },
  },
})
```

----------------------------------------

TITLE: Configuring Draft Preview URL in Payload CMS Collection
DESCRIPTION: This code sets up the preview function to generate a URL with query parameters for draft preview, including collection, slug, and a preview secret.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Pages: CollectionConfig = {
  slug: 'pages',
  admin: {
    preview: ({ slug, collection }) => {
      const encodedParams = new URLSearchParams({
        slug,
        collection,
        path: `/${slug}`,
        previewSecret: process.env.PREVIEW_SECRET || '',
      })

      return `/preview?${encodedParams.toString()}`
    },
  },
  fields: [
    {
      name: 'slug',
      type: 'text',
    },
  ],
}
```

----------------------------------------

TITLE: Executing Jobs via API Endpoint in TypeScript
DESCRIPTION: This code snippet shows how to execute jobs by making a fetch request to the /api/payload-jobs/run endpoint. It demonstrates specifying a limit and queue name for job execution.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
// Here, we're saying we want to run only 100 jobs for this invocation
// and we want to pull jobs from the `nightly` queue:
await fetch('/api/payload-jobs/run?limit=100&queue=nightly', {
  method: 'GET',
  headers: {
    Authorization: `Bearer ${token}`,
  },
})
```

----------------------------------------

TITLE: Configuring Cron Jobs for Payload CMS in TypeScript
DESCRIPTION: This snippet demonstrates how to configure cron jobs in Payload CMS using the jobs.autoRun property. It shows setting up multiple cron schedules, limiting job processing, and specifying queue names.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // Other configurations...
  jobs: {
    tasks: [
      // your tasks here
    ],
    // autoRun can optionally be a function that receives `payload` as an argument
    autoRun: [
      {
        cron: '0 * * * *', // every hour at minute 0
        limit: 100, // limit jobs to process each run
        queue: 'hourly', // name of the queue
      },
      // add as many cron jobs as you want
    ],
    shouldAutoRun: async (payload) => {
      // Tell Payload if it should run jobs or not.
      // This function will be invoked each time Payload goes to pick up and run jobs.
      // If this function ever returns false, the cron schedule will be stopped.
      return true
    },
  },
})
```

----------------------------------------

TITLE: Configuring Custom Icon Component in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure a custom icon component in the Payload CMS admin panel. It uses the admin.components.graphics.Icon property in the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_17

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    // highlight-start
    components: {
      graphics: {
        Icon: '/path/to/your/component',
      },
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Implementing afterMe Hook in PayloadCMS
DESCRIPTION: Hook that executes after 'me' operations which retrieve current user information. Allows modification of the response.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_15

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterMeHook } from 'payload';

const afterMeHook: CollectionAfterMeHook = async ({
  req,
  response,
}) => {...}
```

----------------------------------------

TITLE: Authentication Operations in PayloadCMS
DESCRIPTION: Shows how to perform authentication operations with headers support for Next.js compatibility.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_11

LANGUAGE: javascript
CODE:
```
const result = await payload.auth({ headers })
```

----------------------------------------

TITLE: Adding Components After Dashboard in Payload CMS
DESCRIPTION: Configuration to inject custom components after the default dashboard contents in the Payload CMS admin panel using the afterDashboard property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    // highlight-start
    components: {
      afterDashboard: ['/path/to/your/component'],
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Configuring Custom Edit Components for Collections in Payload CMS
DESCRIPTION: This code shows how to configure custom Edit View components for Collections in Payload CMS. It uses the 'admin.components.edit' property in the Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        // ...
      },
    },
  },
}
```

----------------------------------------

TITLE: Defining Searchable Fields for Payload CMS Collection List View (TypeScript)
DESCRIPTION: This snippet illustrates how to explicitly define which fields should be searchable in the List View of a Payload CMS collection. It shows how to set up the 'listSearchableFields' property in the collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Posts: CollectionConfig = {
  // ...
  admin: {
    // highlight-start
    listSearchableFields: ['title', 'slug'],
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Creating a Custom Checkbox Field Server Component
DESCRIPTION: Implementation of a custom server component for a Checkbox field, rendering the UI field with proper permissions and path handling.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/checkbox.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { CheckboxField } from '@payloadcms/ui'
import type { CheckboxFieldServerComponent } from 'payload'

export const CustomCheckboxFieldServer: CheckboxFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <CheckboxField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Implementing Next.js Account Page with Local API in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to authenticate users on a server using the Payload Local API. It retrieves user permissions and executes an authentication check. If a user is not authenticated, they are redirected to the login page. Requires Next.js and Payload CMS setup with a properly configured payload.config file.
SOURCE: https://github.com/payloadcms/payload/blob/main/examples/auth/README.md#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { headers as getHeaders } from 'next/headers.js'
import { getPayload } from 'payload'
import config from '../../payload.config'

export default async function AccountPage({ searchParams }) {
  const headers = await getHeaders()
  const payload = await getPayload({ config: configPromise })
  const { permissions, user } = await payload.auth({ headers })

  if (!user) {
    redirect(
      `/login?error=${encodeURIComponent('You must be logged in to access your account.')}&redirect=/account`,
    )
  }

  return ...
}
```

----------------------------------------

TITLE: Creating an Array Field in PayloadCMS
DESCRIPTION: Basic configuration snippet for defining an Array Field in PayloadCMS, showing the required type property and fields array where you define the structure of each array item.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/array.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyArrayField: Field = {
  // ...
  // highlight-start
  type: 'array',
  fields: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Creating Custom Slash Menu Items in Lexical Editor for Payload CMS
DESCRIPTION: This example demonstrates how to create a client feature with custom slash menu items for the Lexical editor. It defines an item with an icon, keywords for searching, a label with i18n support, and an action to execute when selected.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_19

LANGUAGE: typescript
CODE:
```
'use client'

import {
  createClientFeature,
  slashMenuBasicGroupWithItems,
} from '@payloadcms/richtext-lexical/client'
import { INSERT_MYNODE_COMMAND } from './plugin'
import { IconComponent } from './icon'

export const MyClientFeature = createClientFeature({
  slashMenu: {
    groups: [
      slashMenuBasicGroupWithItems([
        {
          Icon: IconComponent,
          key: 'myNode',
          keywords: ['myNode', 'myFeature', 'someOtherKeyword'],
          label: ({ i18n }) => {
            return i18n.t('lexical:myFeature:label')
          },
          onSelect: ({ editor }) => {
            editor.dispatchCommand(INSERT_MYNODE_COMMAND, undefined)
          },
        },
      ]),
    ],
  },
})
```

----------------------------------------

TITLE: Accessing Payload Config in Server Component
DESCRIPTION: Demonstrates how to access the Payload configuration object within a server-side component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_7

LANGUAGE: tsx
CODE:
```
import React from 'react'

export default async function MyServerComponent({
  payload: {
    config,
  },
}) {
  return <Link href={config.serverURL}>Go Home</Link>
}
```

----------------------------------------

TITLE: Authenticating Users via HTTP API in TypeScript
DESCRIPTION: This TypeScript snippet shows how to call the users collection through the Payload CMS REST API to get the 'Me' operation. It makes a GET request to '/api/users/me' to fetch authenticated user data, requiring the 'credentials' option set to 'include' for cookie handling. This method does not require local server access to the Local API.
SOURCE: https://github.com/payloadcms/payload/blob/main/examples/auth/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
await fetch('/api/users/me', {
  method: 'GET',
  credentials: 'include',
  headers: {
    'Content-Type': 'application/json',
  },
})
```

----------------------------------------

TITLE: Queuing a Workflow Job in Payload CMS
DESCRIPTION: Demonstrates how to queue a new job that runs a 'createPostAndUpdate' workflow using the payload.jobs.queue function. The input is automatically typed based on the workflow's defined input.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/jobs.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const createdJob = await payload.jobs.queue({
  // Pass the name of the workflow
  workflow: 'createPostAndUpdate',
  // The input type will be automatically typed
  // according to the input you've defined for this workflow
  input: {
    title: 'my title',
  },
})
```

----------------------------------------

TITLE: Configuring Global Access Control Options in Payload CMS
DESCRIPTION: This snippet shows the complete access control configuration options available for Globals, including read and update operations, as well as version-related controls. Each function receives context about the request and returns a boolean or query constraint.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/globals.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { GlobalConfig } from 'payload'

const GlobalWithAccessControl: GlobalConfig = {
  // ...
  // highlight-start
  access: {
    read: ({ req: { user } }) => {...},
    update: ({ req: { user } }) => {...},

    // Version-enabled Globals only
    readVersion: () => {...},
  },
  // highlight-end
}

export default Header
```

----------------------------------------

TITLE: Enabling Content Link for Block Sections
DESCRIPTION: TypeScript/JSX code demonstrating how to enable Content Link for entire sections of a site using the _encodedSourceMap property and data-vercel-edit-target attribute.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/integrations/vercel-content-link.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
<div data-vercel-edit-target>
  <span style={{ display: "none" }}>{_encodedSourceMap}</span>
  {children}
</div>
```

----------------------------------------

TITLE: Adding Custom Action Components to Payload Admin Panel
DESCRIPTION: Example of adding custom action components to the header of the Payload admin panel. Actions provide additional interactivity and functionality in the admin interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  admin: {
    // highlight-start
    components: {
      actions: ['/path/to/your/component'],
    },
    // highlight-end
  },
})
```

----------------------------------------

TITLE: Client-side environment variable example
DESCRIPTION: Shows how to access environment variables in client-side code using the NEXT_PUBLIC_ prefix. This is necessary for variables that need to be accessible in the browser.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/environment-vars.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'

const stripeKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY // highlight-line

const MyClientComponent = () => {
  // do something with the key

  return <div>My Client Component</div>
}
```

----------------------------------------

TITLE: Configuring Uploadthing Storage in Payload Config
DESCRIPTION: Example configuration to integrate Uploadthing storage with Payload CMS. Sets up a media collection to use Uploadthing and configures options like API token and ACL settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/storage-uploadthing/README.md#2025-04-12_snippet_1

LANGUAGE: ts
CODE:
```
export default buildConfig({
  collections: [Media],
  plugins: [
    uploadthingStorage({
      collections: {
        media: true,
      },
      options: {
        token: process.env.UPLOADTHING_TOKEN,
        acl: 'public-read',
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Configuring SendGrid with Nodemailer in Payload CMS
DESCRIPTION: Example of implementing a custom transport using SendGrid with the nodemailer adapter in Payload CMS. This demonstrates how to integrate third-party email services.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/email/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { nodemailerAdapter } from '@payloadcms/email-nodemailer'
import nodemailerSendgrid from 'nodemailer-sendgrid'

export default buildConfig({
  email: nodemailerAdapter({
    defaultFromAddress: 'info@payloadcms.com',
    defaultFromName: 'Payload',
    transportOptions: nodemailerSendgrid({
      apiKey: process.env.SENDGRID_API_KEY,
    }),
  }),
})
```

----------------------------------------

TITLE: Defining a Code Field in Payload CMS (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a basic Code field in a Payload CMS field configuration. It sets the field type to 'code' and includes a highlight to emphasize the type setting.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyBlocksField: Field = {
  // ...
  type: 'code', // highlight-line
}
```

----------------------------------------

TITLE: Implementing beforeRead Hook in Payload CMS (TypeScript)
DESCRIPTION: This code snippet demonstrates how to implement a beforeRead hook in Payload CMS. The hook runs before find and findByID operations are transformed for output, providing access to all locales and hidden fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { CollectionBeforeReadHook } from 'payload'

const beforeReadHook: CollectionBeforeReadHook = async ({ doc }) => {
  return doc
}
```

----------------------------------------

TITLE: Configuring Package Scripts for PayloadCMS Postgres Migrations
DESCRIPTION: Example package.json scripts configuration showing how to set up development, build, and migration commands for a PayloadCMS project with Postgres database.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/migrations.mdx#2025-04-12_snippet_5

LANGUAGE: javascript
CODE:
```
  "scripts": {
    // For running in dev mode
    "dev": "next dev --turbo",

    // To build your Next + Payload app for production
    "build": "next build",

    // A "tie-in" to Payload's CLI for convenience
    // this helps you run `pnpm payload migrate:create` and similar
    "payload": "cross-env NODE_OPTIONS=--no-deprecation payload",

    // This command is what you'd set your `build script` to.
    // Notice how it runs `payload migrate` and then `pnpm build`?
    // This will run all migrations for you before building, in your CI,
    // against your production database
    "ci": "payload migrate && pnpm build",
  },
```

----------------------------------------

TITLE: Creating a Custom Before Dashboard Component for Payload CMS
DESCRIPTION: Example of a simple React component that can be injected before the default dashboard contents in the Payload CMS admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
export default function MyBeforeDashboardComponent() {
  return <div>This is a custom component injected before the Dashboard.</div>
}
```

----------------------------------------

TITLE: Defining Custom Field Complexity for GraphQL in Payload CMS
DESCRIPTION: This snippet demonstrates how to set custom complexity for relationship, upload, and join type fields in GraphQL queries to prevent overly complex queries.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/overview.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
const fieldWithComplexity = {
  name: 'authors',
  type: 'relationship',
  relationship: 'authors',
  graphQL: {
    complexity: 100, // highlight-line
  },
}
```

----------------------------------------

TITLE: Dynamic Email Template Example
DESCRIPTION: Shows how to use dynamic field insertion in email templates using the {{field_name}} syntax
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_11

LANGUAGE: html
CODE:
```
Thank you for your submission, {{name}}!
```

----------------------------------------

TITLE: Configuring Azure Blob Storage in PayloadCMS
DESCRIPTION: Configuration example for implementing Azure Blob storage adapter in PayloadCMS. Includes connection string and container setup.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { azureStorage } from '@payloadcms/storage-azure'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    azureStorage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      allowContainerCreate:
        process.env.AZURE_STORAGE_ALLOW_CONTAINER_CREATE === 'true',
      baseURL: process.env.AZURE_STORAGE_ACCOUNT_BASEURL,
      connectionString: process.env.AZURE_STORAGE_CONNECTION_STRING,
      containerName: process.env.AZURE_STORAGE_CONTAINER_NAME,
    }),
  ],
})
```

----------------------------------------

TITLE: Adding Fields with Type Configuration
DESCRIPTION: Example showing how to configure fields in a Collection with type specification. Each field requires at least the type property to determine its behavior.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Page: CollectionConfig = {
  slug: 'pages',
  // highlight-start
  fields: [
    {
      name: 'field',
      type: 'text',
    },
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Configuring Array Field Collection in PayloadCMS
DESCRIPTION: Example collection configuration showing how to set up an image slider using PayloadCMS Array Field. Includes field definitions for title, image upload, and caption with customized row labels and array constraints.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/array.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'slider', // required
      type: 'array', // required
      label: 'Image Slider',
      minRows: 2,
      maxRows: 10,
      interfaceName: 'CardSlider', // optional
      labels: {
        singular: 'Slide',
        plural: 'Slides',
      },
      fields: [
        // required
        {
          name: 'title',
          type: 'text',
        },
        {
          name: 'image',
          type: 'upload',
          relationTo: 'media',
          required: true,
        },
        {
          name: 'caption',
          type: 'text',
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Initializing Direct Stripe Integration in Node.js
DESCRIPTION: Demonstrates how to initialize and use the Stripe SDK directly in Node.js to create customers. Uses the stripe npm package with environment variables for configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/stripe.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import Stripe from 'stripe'

const stripeSecretKey = process.env.STRIPE_SECRET_KEY
const stripe = new Stripe(stripeSecretKey, {
  apiVersion: '2022-08-01',
})

export const MyFunction = async () => {
  try {
    const customer = await stripe.customers.create({
      email: data.email,
    })

    // do something...
  } catch (error) {
    console.error(error.message)
  }
}
```

----------------------------------------

TITLE: Verifying User Email in Payload CMS using REST API
DESCRIPTION: Shows how to verify a user's email in Payload CMS using the REST API. This operation accepts a verification token and sets the user's _verified property to true.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
const res = await fetch(
  `http://localhost:3000/api/[collection-slug]/verify/${TOKEN_HERE}`,
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  },
)
```

----------------------------------------

TITLE: Querying Access Control in Payload CMS using REST API
DESCRIPTION: Demonstrates how to query access control information for collections and fields using the REST API. This operation returns what a logged-in user can and can't do with registered collections and globals.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
{
  canAccessAdmin: true,
  collections: {
    pages: {
      create: {
        permission: true,
      },
      read: {
        permission: true,
      },
      update: {
        permission: true,
      },
      delete: {
        permission: true,
      },
      fields: {
        title: {
          create: {
            permission: true,
          },
          read: {
            permission: true,
          },
          update: {
            permission: true,
          },
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Custom MDX Block Implementation with Banner Component
DESCRIPTION: Complete example of implementing a custom Banner block that supports bidirectional conversion between Lexical editor state and MDX, including field configuration and conversion logic.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-markdown.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'
import type { Block, CollectionConfig, RichTextField } from 'payload'

import {
  BlocksFeature,
  convertLexicalToMarkdown,
  editorConfigFactory,
  lexicalEditor,
} from '@payloadcms/richtext-lexical'

const BannerBlock: Block = {
  slug: 'Banner',
  fields: [
    {
      name: 'type',
      type: 'select',
      defaultValue: 'info',
      options: [
        { label: 'Info', value: 'info' },
        { label: 'Warning', value: 'warning' },
        { label: 'Error', value: 'error' },
      ],
    },
    {
      name: 'content',
      type: 'richText',
      editor: lexicalEditor(),
    },
  ],
  jsx: {
    export: ({ fields, lexicalToMarkdown }) => {
      const props: any = {}
      if (fields.type) {
        props.type = fields.type
      }

      return {
        children: lexicalToMarkdown({ editorState: fields.content }),
        props,
      }
    },
    import: ({ children, markdownToLexical, props }) => {
      return {
        type: props?.type,
        content: markdownToLexical({ markdown: children }),
      }
    },
  },
}

const Pages: CollectionConfig = {
  slug: 'pages',
  fields: [
    {
      name: 'nameOfYourRichTextField',
      type: 'richText',
      editor: lexicalEditor({
        features: ({ defaultFeatures }) => [
          ...defaultFeatures,
          BlocksFeature({
            blocks: [BannerBlock],
          }),
        ],
      }),
    },
    {
      name: 'markdown',
      type: 'textarea',
      hooks: {
        afterRead: [
          ({ siblingData, siblingFields }) => {
            const data: SerializedEditorState =
              siblingData['nameOfYourRichTextField']

            if (!data) {
              return ''
            }

            const markdown = convertLexicalToMarkdown({
              data,
              editorConfig: editorConfigFactory.fromField({
                field: siblingFields.find(
                  (field) =>
                    'name' in field && field.name === 'nameOfYourRichTextField',
                ) as RichTextField,
              }),
            })

            return markdown
          },
        ],
        beforeChange: [
          ({ siblingData }) => {
            // Ensure that the markdown field is not saved in the database
            delete siblingData['markdown']
            return null
          },
        ],
      },
    },
  ],
}
```

----------------------------------------

TITLE: Basic RichText to JSX Conversion in React
DESCRIPTION: Shows how to use the RichText component to render Lexical richtext content as JSX. Demonstrates the basic setup with TypeScript types.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-jsx.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { RichText } from '@payloadcms/richtext-lexical/react'
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

export const MyComponent = ({ data }: { data: SerializedEditorState }) => {
  return <RichText data={data} />
}
```

----------------------------------------

TITLE: Creating Payload Example Project
DESCRIPTION: Command to create a new Payload project from an example template using create-payload-app with the --example flag.
SOURCE: https://github.com/payloadcms/payload/blob/main/README.md#2025-04-12_snippet_1

LANGUAGE: sh
CODE:
```
npx create-payload-app --example example_name
```

----------------------------------------

TITLE: Custom Select Field Client Component
DESCRIPTION: Client-side implementation of a custom Select field component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/select.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import type { SelectFieldClientComponent } from 'payload'

import { SelectField } from '@payloadcms/ui'
import React from 'react'

export const CustomSelectFieldClient: SelectFieldClientComponent = (props) => {
  return <SelectField {...props} />
}
```

----------------------------------------

TITLE: Defining a Task Handler in Separate File (TypeScript)
DESCRIPTION: This example shows how to define a task handler in a separate file and reference it in the Payload configuration. This approach is useful for tasks with large dependencies.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/tasks.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { fileURLToPath } from 'node:url'
import path from 'path'

const filename = fileURLToPath(import.meta.url)
const dirname = path.dirname(filename)

export default buildConfig({
  jobs: {
    tasks: [
      {
        // ...
        // The #createPostHandler is a named export within the `createPost.ts` file
        handler:
          path.resolve(dirname, 'src/tasks/createPost.ts') +
          '#createPostHandler',
      },
    ],
  },
})
```

----------------------------------------

TITLE: Accessing Payload in Hooks via Request Object
DESCRIPTION: Example showing how to access the Payload instance from a hook's request object to perform collection operations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const afterChangeHook: CollectionAfterChangeHook = async ({
  req: { payload },
}) => {
  const posts = await payload.find({
    collection: 'posts',
  })
}
```

----------------------------------------

TITLE: Implementing beforeValidate Hook for Username Field
DESCRIPTION: Demonstrates the use of a beforeValidate hook to process a username field by trimming whitespace and converting it to lowercase before validation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const usernameField: Field = {
  name: 'username',
  type: 'text',
  hooks: {
    beforeValidate: [
      ({ value }) => {
        // Trim whitespace and convert to lowercase
        return value.trim().toLowerCase()
      },
    ],
  },
}
```

----------------------------------------

TITLE: Configuring Admin Options for Collapsible Fields
DESCRIPTION: Example showing how to customize the appearance and behavior of a Collapsible field in the Admin Panel using the admin configuration object.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/collapsible.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyCollapsibleField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Custom Number Field Client Component
DESCRIPTION: Implementation of a custom client-side Number field component using PayloadCMS UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/number.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { NumberField } from '@payloadcms/ui'
import type { NumberFieldClientComponent } from 'payload'

export const CustomNumberFieldClient: NumberFieldClientComponent = (props) => {
  return <NumberField {...props} />
}
```

----------------------------------------

TITLE: Breakpoints Configuration for Live Preview
DESCRIPTION: Configuration example showing how to set up device breakpoints for the preview window with specific dimensions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    // ...
    livePreview: {
      url: 'http://localhost:3000',
      breakpoints: [
        {
          label: 'Mobile',
          name: 'mobile',
          width: 375,
          height: 667,
        },
      ],
    },
  },
})
```

----------------------------------------

TITLE: Enabling API Key Authentication in Payload Collection Config
DESCRIPTION: This snippet demonstrates how to enable API key authentication for a collection by setting the useAPIKey property to true in the collection configuration. This allows API keys to be generated for users in that collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/api-keys.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ThirdPartyAccess: CollectionConfig = {
  slug: 'third-party-access',
  auth: {
    useAPIKey: true, // highlight-line
  },
  fields: [],
}
```

----------------------------------------

TITLE: Implementing Live Preview in Vue Component
DESCRIPTION: Example of using the useLivePreview composable in a Vue component with TypeScript to enable live preview functionality
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/client.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
<script setup lang="ts">
import type { PageData } from '~/types';
import { defineProps } from 'vue';
import { useLivePreview } from '@payloadcms/live-preview-vue';

const props = defineProps<{ initialData: PageData }>();

const { data } = useLivePreview<PageData>({
  initialData: props.initialData,
  serverURL: "<PAYLOAD_SERVER_URL>",
  depth: 2,
});
</script>

<template>
  <h1>{{ data.title }}</h1>
</template>
```

----------------------------------------

TITLE: Custom Blocks Field Client Component in TypeScript/React
DESCRIPTION: Client-side implementation of a custom blocks field component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { BlocksField } from '@payloadcms/ui'
import type { BlocksFieldClientComponent } from 'payload'

export const CustomBlocksFieldClient: BlocksFieldClientComponent = (props) => {
  return <BlocksField {...props} />
}
```

----------------------------------------

TITLE: Configuring Join Field with Relationship in Payload CMS
DESCRIPTION: Example of configuring a Join field that displays related posts when viewing a category, paired with a relationship field in the posts collection. The 'on' property specifies which field in the related collection points back to this document.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/join.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyJoinField: Field = {
  // highlight-start
  name: 'relatedPosts',
  type: 'join',
  collection: 'posts',
  on: 'category',
  // highlight-end
}

// relationship field in another collection:
export const MyRelationshipField: Field = {
  name: 'category',
  type: 'relationship',
  relationTo: 'categories',
}
```

----------------------------------------

TITLE: Building Paginated List Type for Custom GraphQL Queries
DESCRIPTION: Example of using the buildPaginatedListType utility to create a paginated list type for custom GraphQL queries in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/extending.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildPaginatedListType } from '@payloadcms/graphql/types'

export const getMyPosts = (GraphQL, payload) => {
  return {
    args: {},
    resolve: Resolver,
    // The name of your new type has to be unique
    type: buildPaginatedListType(
      'AuthorPosts',
      payload.collections['posts'].graphQL?.type,
    ),
  }
}
```

----------------------------------------

TITLE: Configuring Radio Field in Collection (TypeScript)
DESCRIPTION: Detailed example of configuring a Radio field within a collection, including options, default value, and admin layout settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/radio.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'color', // required
      type: 'radio', // required
      options: [
        // required
        {
          label: 'Mint',
          value: 'mint',
        },
        {
          label: 'Dark Gray',
          value: 'dark_gray',
        },
      ],
      defaultValue: 'mint', // The first value in options.
      admin: {
        layout: 'horizontal',
      },
    },
  ],
}
```

----------------------------------------

TITLE: Importing Diff Component Types in PayloadCMS
DESCRIPTION: Shows how to import TypeScript types for Diff Components to ensure type safety in custom implementations. Each field type has specific types for server and client environments.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_30

LANGUAGE: tsx
CODE:
```
import type {
  TextFieldDiffServerComponent,
  TextFieldDiffClientComponent,
  // And so on for each Field Type
} from 'payload'
```

----------------------------------------

TITLE: Implementing React Component for REST API Documentation in Payload CMS
DESCRIPTION: This code defines a React component called RestExamples that displays documentation for Payload CMS REST API endpoints. The example shown is for a GET operation to find paginated documents from a collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/test/lexical-mdx/tests/restExamples2.input.mdx#2025-04-12_snippet_0

LANGUAGE: jsx
CODE:
```
<RestExamples
  data={[
    {
      operation: "Find",
      method: "GET",
      path: "/api/{collection-slug}",
      description: "Find paginated documents",
      example: {
        slug: "getCollection",
        req: true,
        res: {
          paginated: true,
          data: {
            id: "644a5c24cc1383022535fc7c",
            title: "Home",
            content: "REST API examples",
            slug: "home",
            createdAt: "2023-04-27T11:27:32.419Z",
            updatedAt: "2023-04-27T11:27:32.419Z",
          },
        },
        drawerContent: `
#### Heading

One \`two\` three

- [sort](/docs/queries/overview#sort) - sort by field
- [where](/docs/queries/overview) - pass a where query to constrain returned documents

\`\`\`ts
const a = 1
const b = 2
const c = 3
const d = 4
\`\`\`
`
},
}
]}
/>
```

----------------------------------------

TITLE: Payload Plugin Core Implementation
DESCRIPTION: Core plugin implementation showing config modification and extension patterns.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/build-your-own.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Config } from 'payload'

export const samplePlugin =
  (pluginOptions: PluginTypes) =>
  (incomingConfig: Config): Config => {
    // create copy of incoming config
    let config = { ...incomingConfig }

    /**
    * This is where you could modify the
    * config based on the plugin options
    */

    // If you wanted to add a new collection:
    config.collections = [
      ...(config.collections || []),
      newCollection,
    ]

    // If you wanted to add a new global:
    config.globals = [
      ...(config.globals || []),
      newGlobal,
    ]

    /**
    * If you wanted to add a new field to a collection:
    *
    * 1. Loop over collections
    * 2. Find the collection you want to add the field to
    * 3. Add the field to the collection
    */

    // If you wanted to add to the onInit:
    config.onInit = async payload => {
      if (incomingConfig.onInit) await incomingConfig.onInit(payload)
      // Add additional onInit code here
    }

    // Finally, return the modified config
    return config
 }
```

----------------------------------------

TITLE: Querying Draft Content in Next.js Page Component
DESCRIPTION: This Next.js page component checks if draft mode is enabled and adjusts the Payload query to include draft content when necessary.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
export default async function Page({ params: paramsPromise }) {
  const { slug = 'home' } = await paramsPromise

  const { isEnabled: isDraftMode } = await draftMode()

  const payload = await getPayload({ config })

  const page = await payload.find({
    collection: 'pages',
    depth: 0,
    draft: isDraftMode,
    limit: 1,
    overrideAccess: isDraftMode,
    where: {
      slug: {
        equals: slug,
      },
    },
  })?.then(({ docs }) => docs?.[0])

  if (page === null) {
    return notFound()
  }

  return (
    <main>
      <h1>{page?.title}</h1>
    </main>
  )
}
```

----------------------------------------

TITLE: Calling Server Function for Document Creation with File Upload from React Component
DESCRIPTION: This React component demonstrates how to call the createPostWithUpload server function from the frontend. It handles file selection, form submission, and displays the result of the post creation with file upload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/server-functions.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
'use client';

import React, { useState } from 'react';
import { createPostWithUpload } from '../server/actions';

export const PostForm: React.FC = () => {
  const [title, setTitle] = useState<string>('');
  const [file, setFile] = useState<File | null>(null);
  const [result, setResult] = useState<string>('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file) {
      setResult('Please upload a file.');
      return;
    }

    try {
      // Call the server function to create the post with the file
      const newPost = await createPostWithUpload({ title }, file);
      setResult('Post created with file: ' + newPost.title);
    } catch (error) {
      setResult('Error: ' + error.message);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Post Title"
      />
      <input type="file" onChange={handleFileChange} />
      <button type="submit">Create Post</button>
      <p>{result}</p>
    </form>
  );
};
```

----------------------------------------

TITLE: Configuring Custom Components in Collection Config
DESCRIPTION: Example of how to set up custom components in a collection configuration using the admin.components property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_18

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionConfig: CollectionConfig = {
  // ...
  fields: [
    // ...
    {
      // ...
      admin: {
        components: {
          // highlight-line
          // ...
        },
      },
    },
  ],
}
```

----------------------------------------

TITLE: Creating a Custom Seed Script for Payload CMS
DESCRIPTION: Shows how to create a custom seed script for Payload CMS, which can be executed using the payload CLI.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { SanitizedConfig } from 'payload'

import payload from 'payload'

// Script must define a "script" function export that accepts the sanitized config
export const script = async (config: SanitizedConfig) => {
  await payload.init({ config })
  await payload.create({
    collection: 'pages',
    data: { title: 'my title' },
  })
  payload.logger.info('Succesffully seeded!')
  process.exit(0)
}
```

----------------------------------------

TITLE: Configuring Google Cloud Storage in PayloadCMS
DESCRIPTION: Configuration example for implementing Google Cloud Storage adapter in PayloadCMS. Shows bucket and project setup with endpoint configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import { gcsStorage } from '@payloadcms/storage-gcs'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    gcsStorage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      bucket: process.env.GCS_BUCKET,
      options: {
        apiEndpoint: process.env.GCS_ENDPOINT,
        projectId: process.env.GCS_PROJECT_ID,
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Implementing a DecoratorNode for Payload CMS Rich Text Editor
DESCRIPTION: Complete example of implementing a custom DecoratorNode for the Lexical editor. Includes methods for cloning, type identification, DOM import/export, JSON serialization, and React component rendering.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_12

LANGUAGE: typescript
CODE:
```
import type {
  DOMConversionMap,
  DOMConversionOutput,
  DOMExportOutput,
  EditorConfig,
  LexicalNode,
  SerializedLexicalNode,
} from '@payloadcms/richtext-lexical/lexical'

import { $applyNodeReplacement, DecoratorNode } from '@payloadcms/richtext-lexical/lexical'

// SerializedLexicalNode is the default lexical node.
// By setting your SerializedMyNode type to SerializedLexicalNode,
// you are basically saying that this node does not save any additional data.
// If you want your node to save data, feel free to extend it
export type SerializedMyNode = SerializedLexicalNode

// Lazy-import the React component to your node here
const MyNodeComponent = React.lazy(() =>
  import('../component/index.js').then((module) => ({
    default: module.MyNodeComponent,
  })),
)

/**
 * This node is a DecoratorNode. DecoratorNodes allow you to render React components in the editor.
 *
 * They need both createDom and decorate functions. createDom => outside of the html. decorate => React Component inside of the html.
 *
 * If we used DecoratorBlockNode instead, we would only need a decorate method
 */
export class MyNode extends DecoratorNode<React.ReactElement> {
  static clone(node: MyNode): MyNode {
    return new MyNode(node.__key)
  }

  static getType(): string {
    return 'myNode'
  }

  /**
   * Defines what happens if you copy a div element from another page and paste it into the lexical editor
   *
   * This also determines the behavior of lexical's internal HTML -> Lexical converter
   */
  static importDOM(): DOMConversionMap | null {
    return {
      div: () => ({
        conversion: $yourConversionMethod,
        priority: 0,
      }),
    }
  }

  /**
   * The data for this node is stored serialized as JSON. This is the "load function" of that node: it takes the saved data and converts it into a node.
   */
  static importJSON(serializedNode: SerializedMyNode): MyNode {
    return $createMyNode()
  }

  /**
   * Determines how the hr element is rendered in the lexical editor. This is only the "initial" / "outer" HTML element.
   */
  createDOM(config: EditorConfig): HTMLElement {
    const element = document.createElement('div')
    return element
  }

  /**
   * Allows you to render a React component within whatever createDOM returns.
   */
  decorate(): React.ReactElement {
    return <MyNodeComponent nodeKey={this.__key} />
  }

  /**
   * Opposite of importDOM, this function defines what happens when you copy a div element from the lexical editor and paste it into another page.
   *
   * This also determines the behavior of lexical's internal Lexical -> HTML converter
   */
  exportDOM(): DOMExportOutput {
    return { element: document.createElement('div') }
  }
  /**
   * Opposite of importJSON. This determines what data is saved in the database / in the lexical editor state.
   */
  exportJSON(): SerializedLexicalNode {
    return {
      type: 'myNode',
      version: 1,
    }
  }

  getTextContent(): string {
    return '\n'
  }

  isInline(): false {
    return false
  }

  updateDOM(): boolean {
    return false
  }
}

// This is used in the importDOM method. Totally optional if you do not want your node to be created automatically when copy & pasting certain dom elements
// into your editor.
function $yourConversionMethod(): DOMConversionOutput {
  return { node: $createMyNode() }
}

// This is a utility method to create a new MyNode. Utility methods prefixed with $ make it explicit that this should only be used within lexical
export function $createMyNode(): MyNode {
  return $applyNodeReplacement(new MyNode())
}

// This is just a utility method you can use to check if a node is a MyNode. This also ensures correct typing.
export function $isMyNode(
  node: LexicalNode | null | undefined,
): node is MyNode {
  return node instanceof MyNode
}
```

----------------------------------------

TITLE: Optional Configuration for Payload Cloud Plugin
DESCRIPTION: Customizing the Payload Cloud Plugin by selectively disabling specific features like file storage or email delivery.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/cloud/projects.mdx#2025-04-12_snippet_4

LANGUAGE: js
CODE:
```
payloadCloud({
  storage: false, // Disable file storage
  email: false, // Disable email delivery
})
```

----------------------------------------

TITLE: Implementing Custom Logo Component in React
DESCRIPTION: This snippet shows an example of a simple custom logo component implemented in React. It renders an image element with a source path to the custom logo.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_20

LANGUAGE: tsx
CODE:
```
export default function MyCustomLogo() {
  return <img src="/path/to/your/logo.png" alt="My Custom Logo" />
}
```

----------------------------------------

TITLE: Implementing Delete Access Control in Payload CMS Collection
DESCRIPTION: This snippet demonstrates how to add delete access control to a Payload CMS collection. It returns a boolean or a query constraint to limit which documents can be deleted by which users.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithDeleteAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    delete: ({ req: { user } }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Multi Tenant Plugin Configuration TypeScript Interface
DESCRIPTION: TypeScript type definition for the plugin configuration options, including collection settings, tenant field configuration, access control options, and customization settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/plugin-multi-tenant/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
type MultiTenantPluginConfig<ConfigTypes = unknown> = {
  /**
   * After a tenant is deleted, the plugin will attempt to clean up related documents
   * - removing documents with the tenant ID
   * - removing the tenant from users
   *
   * @default true
   */
  cleanupAfterTenantDelete?: boolean
  /**
   * Automatically
   */
  collections: {
    [key in CollectionSlug]?: {
      /**
       * Set to `true` if you want the collection to behave as a global
       *
       * @default false
       */
      isGlobal?: boolean
      /**
       * Set to `false` if you want to manually apply the baseListFilter
       *
       * @default true
       */
      useBaseListFilter?: boolean
      /**
       * Set to `false` if you want to handle collection access manually without the multi-tenant constraints applied
       *
       * @default true
       */
      useTenantAccess?: boolean
    }
  }
  /**
   * Enables debug mode
   * - Makes the tenant field visible in the admin UI within applicable collections
   *
   * @default false
   */
  debug?: boolean
  /**
   * Enables the multi-tenant plugin
   *
   * @default true
   */
  enabled?: boolean
  /**
   * Field configuration for the field added to all tenant enabled collections
   */
  tenantField?: {
    access?: RelationshipField['access']
    /**
     * The name of the field added to all tenant enabled collections
     *
     * @default 'tenant'
     */
    name?: string
  }
  /**
   * Field configuration for the field added to the users collection
   *
   * If `includeDefaultField` is `false`, you must include the field on your users collection manually
   * This is useful if you want to customize the field or place the field in a specific location
   */
  tenantsArrayField?:
    | {
        /**
         * Access configuration for the array field
         */
        arrayFieldAccess?: ArrayField['access']
        /**
         * Name of the array field
         *
         * @default 'tenants'
         */
        arrayFieldName?: string
        /**
         * Name of the tenant field
         *
         * @default 'tenant'
         */
        arrayTenantFieldName?: string
        /**
         * When `includeDefaultField` is `true`, the field will be added to the users collection automatically
         */
        includeDefaultField?: true
        /**
         * Additional fields to include on the tenants array field
         */
        rowFields?: Field[]
        /**
         * Access configuration for the tenant field
         */
        tenantFieldAccess?: RelationshipField['access']
      }
    | {
        arrayFieldAccess?: never
        arrayFieldName?: string
        arrayTenantFieldName?: string
        /**
         * When `includeDefaultField` is `false`, you must include the field on your users collection manually
         */
        includeDefaultField?: false
        rowFields?: never
        tenantFieldAccess?: never
      }
  /**
   * Customize tenant selector label
   *
   * Either a string or an object where the keys are i18n codes and the values are the string labels
   */
  tenantSelectorLabel?:
    | Partial<{
        [key in AcceptedLanguages]?: string
      }>
    | string
  /**
   * The slug for the tenant collection
   *
   * @default 'tenants'
   */
  tenantsSlug?: string
  /**
   * Function that determines if a user has access to _all_ tenants
   *
   * Useful for super-admin type users
   */
  userHasAccessToAllTenants?: (
    user: ConfigTypes extends { user: unknown } ? ConfigTypes['user'] : User,
  ) => boolean
  /**
   * Opt out of adding access constraints to the tenants collection
   */
  useTenantsCollectionAccess?: boolean
  /**
   * Opt out including the baseListFilter to filter tenants by selected tenant
   */
  useTenantsListFilter?: boolean
  /**
   * Opt out including the baseListFilter to filter users by selected tenant
   */
  useUsersTenantFilter?: boolean
}
```

----------------------------------------

TITLE: Configuring AWS S3 Storage in PayloadCMS
DESCRIPTION: Configuration example for implementing AWS S3 storage adapter in PayloadCMS. Includes AWS credentials setup and region configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { s3Storage } from '@payloadcms/storage-s3'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    s3Storage({
      collections: {
        media: true,
        'media-with-prefix': {
          prefix,
        },
      },
      bucket: process.env.S3_BUCKET,
      config: {
        credentials: {
          accessKeyId: process.env.S3_ACCESS_KEY_ID,
          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
        },
        region: process.env.S3_REGION,
        // ... Other S3 configuration
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Running Jobs Using Payload Bin Script in Shell
DESCRIPTION: These shell commands demonstrate how to run jobs using Payload's bin script. It shows running jobs with a specified queue and limit, as well as running jobs on a scheduled basis using a cron expression.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/queues.mdx#2025-04-12_snippet_5

LANGUAGE: shell
CODE:
```
npx payload jobs:run --queue default --limit 10

npx payload jobs:run --cron "*/5 * * * *"
```

----------------------------------------

TITLE: Customizing Search Collection with Overrides
DESCRIPTION: Demonstrates how to override the default search collection configuration, including adding custom fields and modifying existing ones.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/search.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  searchPlugin({
    searchOverrides: {
      slug: 'search-results',
      fields: ({ defaultFields }) => [
        ...defaultFields,
        {
          name: 'excerpt',
          type: 'textarea',
          admin: {
            position: 'sidebar',
          },
        },
      ],
    },
  }),
}
```

----------------------------------------

TITLE: Customizing Tenants Array Field in Users Collection
DESCRIPTION: Example of customizing the tenants array field in the users collection by manually adding it instead of using the default field. This allows for customization of properties like label and placement within the UI.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/plugin-multi-tenant/README.md#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'
import { tenantsArrayField } from '@payloadcms/plugin-multi-tenant/fields'

const customTenantsArrayField = tenantsArrayField({
  arrayFieldAccess: {}, // access control for the array field
  tenantFieldAccess: {}, // access control for the tenants field on the array row
  rowFields: [], // additional row fields
})

export const UsersCollection: CollectionConfig = {
  slug: 'users',
  fields: [
    {
      ...customTenantsArrayField,
      label: 'Associated Tenants',
    },
  ],
}
```

----------------------------------------

TITLE: Basic I18n Configuration in Payload Config
DESCRIPTION: Minimal example of configuring internationalization in the Payload config file by adding the i18n property.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/i18n.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  i18n: {
    // highlight-line
    // ...
  },
})
```

----------------------------------------

TITLE: Configuring Lexical Editor for Individual Fields
DESCRIPTION: Example showing how to configure the Lexical editor for specific rich text fields within a collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'
import { lexicalEditor } from '@payloadcms/richtext-lexical'

export const Pages: CollectionConfig = {
  slug: 'pages',
  fields: [
    {
      name: 'content',
      type: 'richText',
      // Pass the Lexical editor here and override base settings as necessary
      editor: lexicalEditor({}),
    },
  ],
}
```

----------------------------------------

TITLE: Creating Custom Server-Side SaveDraftButton Component in React
DESCRIPTION: This code shows how to create a custom server-side SaveDraftButton component in React for Payload CMS. It uses the SaveDraftButton component from @payloadcms/ui and the SaveDraftButtonServerProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_9

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { SaveDraftButton } from '@payloadcms/ui'
import type { SaveDraftButtonServerProps } from 'payload'

export function MySaveDraftButton(props: SaveDraftButtonServerProps) {
  return <SaveDraftButton />
}
```

----------------------------------------

TITLE: Payload Data Seeding Function
DESCRIPTION: Example seed function for populating test data in development environment.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/build-your-own.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
export const seed = async (payload: Payload): Promise<void> => {
  payload.logger.info('Seeding data...')

  await payload.create({
    collection: 'new-collection',
    data: {
      title: 'Seeded title',
    },
  })

  // Add additional seed data here
}
```

----------------------------------------

TITLE: TypeScript Type Augmentation for Payload Context
DESCRIPTION: Shows how to extend the default TypeScript interface for context objects to add custom typed properties using type augmentation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/context.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { RequestContext as OriginalRequestContext } from 'payload'

declare module 'payload' {
  // Create a new interface that merges your additional fields with the original one
  export interface RequestContext extends OriginalRequestContext {
    myObject?: string
    // ...
  }
}
```

----------------------------------------

TITLE: Basic Collection Admin Configuration in Payload CMS
DESCRIPTION: Basic example of implementing the admin property in a Collection configuration to customize its behavior in the Admin Panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/collections.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating a Basic Collapsible Field in Payload CMS
DESCRIPTION: Example showing how to create a basic Collapsible field in Payload CMS. This snippet demonstrates the minimal required configuration with type set to 'collapsible' and containing child fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/collapsible.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyCollapsibleField: Field = {
  // ...
  // highlight-start
  type: 'collapsible',
  fields: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Implementing beforeDuplicate Hook for Number Fields in Payload CMS
DESCRIPTION: Demonstrates how to use the beforeDuplicate hook to handle unique constraint violations when duplicating documents. Increments a number field's value by 1 during document duplication.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/fields.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

const numberField: Field = {
  name: 'number',
  type: 'number',
  hooks: {
    // increment existing value by 1
    beforeDuplicate: [
      ({ value }) => {
        return (value ?? 0) + 1
      },
    ],
  },
}
```

----------------------------------------

TITLE: Custom Number Field Label Client Component
DESCRIPTION: Implementation of a custom client-side label component for Number fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/number.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { NumberFieldLabelClientComponent } from 'payload'

export const CustomNumberFieldLabelClient: NumberFieldLabelClientComponent = ({
  field,
  path,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Defining a Global with GraphQL Support in Payload CMS
DESCRIPTION: This snippet demonstrates how to define a global config in Payload CMS, which will automatically generate corresponding GraphQL queries and mutations.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { GlobalConfig } from 'payload';

const Header: GlobalConfig = {
  slug: 'header',
  fields: [
    ...
  ],
}
```

----------------------------------------

TITLE: Registering a Client Feature with a Server Feature in Payload CMS
DESCRIPTION: Shows how to register a client feature with a server feature by providing an import path. The server feature includes configuration options like key and dependencies priority.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
import { createServerFeature } from '@payloadcms/richtext-lexical'

export const MyFeature = createServerFeature({
  feature: {
    ClientFeature: './path/to/feature.client#MyClientFeature',
  },
  key: 'myFeature',
  dependenciesPriority: ['otherFeature'],
})
```

----------------------------------------

TITLE: Configuring Admin Options for Code Field (TypeScript)
DESCRIPTION: This example shows how to customize the appearance and behavior of a Code field in the Payload CMS Admin Panel. It uses the 'admin' property to specify additional options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyCodeField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Sample Payload Configuration
DESCRIPTION: Example Payload configuration with users and posts collections
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/typescript/generating-types.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { Config } from 'payload'

const config: Config = {
  serverURL: process.env.NEXT_PUBLIC_SERVER_URL,
  admin: {
    user: 'users',
  },
  collections: [
    {
      slug: 'users',
      fields: [
        {
          name: 'name',
          type: 'text',
          required: true,
        },
      ],
    },
    {
      slug: 'posts',
      admin: {
        useAsTitle: 'title',
      },
      fields: [
        {
          name: 'title',
          type: 'text',
        },
        {
          name: 'author',
          type: 'relationship',
          relationTo: 'users',
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Payload with MongoDB Adapter
DESCRIPTION: TypeScript configuration example showing how to integrate the MongoDB adapter with Payload CMS using the buildConfig function. The configuration includes setting up the database connection URL through an environment variable.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/db-mongodb/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { mongooseAdapter } from '@payloadcms/db-mongodb'

export default buildConfig({
  db: mongooseAdapter({
    url: process.env.DATABASE_URI,
  }),
  // ...rest of config
})
```

----------------------------------------

TITLE: Customizing Access Control for Multi-Tenant Collections
DESCRIPTION: Example of customizing access control to allow for documents shared between tenants. This code shows how to disable the default tenant access control and implement custom access rules for a media collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/plugin-multi-tenant/README.md#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
// File: payload.config.ts

import { buildConfig } from 'payload'
import { multiTenantPlugin } from '@payloadcms/plugin-multi-tenant'
import { getTenantAccess } from '@payloadcms/plugin-multi-tenant/utilities'
import { Config as ConfigTypes } from './payload-types'

// Add the plugin to your payload config
export default buildConfig({
  plugins: [
    multiTenantPlugin<ConfigTypes>({
      collections: {
        media: {
          useTenantAccess: false,
        },
      },
    }),
  ],
  collections: [
    {
      slug: 'media',
      fields: [
        {
          name: 'isShared',
          type: 'checkbox',
          defaultValue: false,
          // you likely want to set access control on fields like this
          // to prevent just any user from modifying it
        },
      ],
      access: {
        read: ({ req, doc }) => {
          if (!req.user) return false

          const whereConstraint = {
            or: [
              {
                isShared: {
                  equals: true,
                },
              },
            ],
          }

          const tenantAccessResult = getTenantAccess({ user: req.user })

          if (tenantAccessResult) {
            whereConstraint.or.push(tenantAccessResult)
          }

          return whereConstraint
        },
      },
    },
  ],
})
```

----------------------------------------

TITLE: Serializing Rich Text JSON to JSX in React
DESCRIPTION: This function converts Payload CMS Rich Text JSON data into React JSX elements. It recursively processes text nodes with formatting (bold, italic, code) and structural elements like headings, lists, and links. The function escapes HTML to prevent injection vulnerabilities while preserving formatting.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/slate.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import React, { Fragment } from "react";
import escapeHTML from "escape-html";
import { Text } from "slate";

const serialize = (children) =>
  children.map((node, i) => {
    if (Text.isText(node)) {
      let text = (
        <span dangerouslySetInnerHTML={{ __html: escapeHTML(node.text) }} />
      );

      if (node.bold) {
        text = <strong key={i}>{text}</strong>;
      }

      if (node.code) {
        text = <code key={i}>{text}</code>;
      }

      if (node.italic) {
        text = <em key={i}>{text}</em>;
      }

      // Handle other leaf types here...

      return <Fragment key={i}>{text}</Fragment>;
    }

    if (!node) {
      return null;
    }

    switch (node.type) {
      case "h1":
        return <h1 key={i}>{serialize(node.children)}</h1>;
      // Iterate through all headings here...
      case "h6":
        return <h6 key={i}>{serialize(node.children)}</h6>;
      case "blockquote":
        return <blockquote key={i}>{serialize(node.children)}</blockquote>;
      case "ul":
        return <ul key={i}>{serialize(node.children)}</ul>;
      case "ol":
        return <ol key={i}>{serialize(node.children)}</ol>;
      case "li":
        return <li key={i}>{serialize(node.children)}</li>;
      case "link":
        return (
          <a href={escapeHTML(node.url)} key={i}>
            {serialize(node.children)}
          </a>
        );

      default:
        return <p key={i}>{serialize(node.children)}</p>;
    }
  });
```

----------------------------------------

TITLE: Configuring Query Presets in Payload Config
DESCRIPTION: This snippet demonstrates how to add custom configuration for Query Presets in the main Payload config file, including options for access control, constraints, and labels.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/query-presets/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  // highlight-start
  queryPresets: {
    // ...
  },
  // highlight-end
})
```

----------------------------------------

TITLE: Method Override Implementation for GET Requests in PayloadCMS
DESCRIPTION: Examples showing how to implement method override functionality to send GET requests using POST method, useful for handling long query strings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rest-api/overview.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
const res = await fetch(`${api}/${collectionSlug}`, {
  method: 'POST',
  credentials: 'include',
  headers: {
    'Accept-Language': i18n.language,
    'Content-Type': 'application/x-www-form-urlencoded',
    'X-HTTP-Method-Override': 'GET',
  },
  body: qs.stringify({
    depth: 1,
    locale: 'en',
  }),
})
```

----------------------------------------

TITLE: Client-Side Live Preview Component
DESCRIPTION: Example of implementing client-side Live Preview using the useLivePreview hook in a React component.
SOURCE: https://github.com/payloadcms/payload/blob/main/examples/live-preview/README.md#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import { useLivePreview } from '@payloadcms/live-preview-react'
import { Page as PageType } from '@/payload-types'

export const PageClient: React.FC<{
  page: {
    title: string
  }
}> = ({ page: initialPage }) => {
  const { data } = useLivePreview<PageType>({
    initialData: initialPage,
    serverURL: PAYLOAD_SERVER_URL,
    depth: 2,
  })

  return <h1>{data.title}</h1>
}
```

----------------------------------------

TITLE: Configuring Upload Field in TypeScript
DESCRIPTION: Basic configuration of an Upload field in Payload CMS, specifying the type and relation to a media collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/upload.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyUploadField: Field = {
  // ...
  // highlight-start
  type: 'upload',
  relationTo: 'media',
  // highlight-end
}
```

----------------------------------------

TITLE: Group Field Admin Configuration Example
DESCRIPTION: Demonstrates how to customize the admin panel appearance for a Group field using the admin configuration options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/group.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyGroupField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating Custom Client-Side SaveDraftButton Component in React
DESCRIPTION: This snippet demonstrates how to create a custom client-side SaveDraftButton component in React for Payload CMS. It uses the 'use client' directive, the SaveDraftButton component from @payloadcms/ui, and the SaveDraftButtonClientProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { SaveDraftButton } from '@payloadcms/ui'
import type { SaveDraftButtonClientProps } from 'payload'

export function MySaveDraftButton(props: SaveDraftButtonClientProps) {
  return <SaveDraftButton />
}
```

----------------------------------------

TITLE: Configuring Custom Domain in Payload Config
DESCRIPTION: Setting the serverURL in payload.config.ts to use a custom domain with your Payload Cloud project.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/cloud/projects.mdx#2025-04-12_snippet_2

LANGUAGE: ts
CODE:
```
export default buildConfig({
  serverURL: 'https://example.com',
  // the rest of your config,
})
```

----------------------------------------

TITLE: Implementing a Lexical Plugin with Command Registration for Payload CMS Rich Text Editor
DESCRIPTION: Example of a plugin that registers a custom command to insert a node into the editor. The plugin uses lexical hooks to access the editor instance and registers a command handler.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_14

LANGUAGE: typescript
CODE:
```
'use client'
import type { LexicalCommand } from '@payloadcms/richtext-lexical/lexical'

import {
  createCommand,
  $getSelection,
  $isRangeSelection,
  COMMAND_PRIORITY_EDITOR,
} from '@payloadcms/richtext-lexical/lexical'

import { useLexicalComposerContext } from '@payloadcms/richtext-lexical/lexical/react/LexicalComposerContext'
import { $insertNodeToNearestRoot } from '@payloadcms/richtext-lexical/lexical/utils'
import { useEffect } from 'react'

import type { PluginComponent } from '@payloadcms/richtext-lexical' // type imports can be imported from @payloadcms/richtext-lexical - even on the client

import { $createMyNode } from '../nodes/MyNode'
import './index.scss'

export const INSERT_MYNODE_COMMAND: LexicalCommand<void> = createCommand(
  'INSERT_MYNODE_COMMAND',
)

/**
 * Plugin which registers a lexical command to insert a new MyNode into the editor
 */
export const MyNodePlugin: PluginComponent = () => {
  // The useLexicalComposerContext hook can be used to access the lexical editor instance
  const [editor] = useLexicalComposerContext()

  useEffect(() => {
    return editor.registerCommand(
      INSERT_MYNODE_COMMAND,
      (type) => {
        const selection = $getSelection()

        if (!$isRangeSelection(selection)) {
          return false
        }

        const focusNode = selection.focus.getNode()

        if (focusNode !== null) {
          const newMyNode = $createMyNode()
          $insertNodeToNearestRoot(newMyNode)
        }

        return true
      },
      COMMAND_PRIORITY_EDITOR,
    )
  }, [editor])

  return null
}
```

----------------------------------------

TITLE: Using Nodemailer's createTransport in Payload CMS
DESCRIPTION: Example showing how to use nodemailer.createTransport directly when configuring the email adapter in Payload CMS. This provides more flexibility for custom transport configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/email/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { nodemailerAdapter } from '@payloadcms/email-nodemailer'
import nodemailer from 'nodemailer'

export default buildConfig({
  email: nodemailerAdapter({
    defaultFromAddress: 'info@payloadcms.com',
    defaultFromName: 'Payload',
    // Any Nodemailer transport can be used
    transport: nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: 587,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    }),
  }),
})
```

----------------------------------------

TITLE: Importing Payload SCSS Variables and Utilities
DESCRIPTION: How to import and reuse Payload's SCSS variables and utilities in your custom stylesheets.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/customizing-css.mdx#2025-04-12_snippet_2

LANGUAGE: scss
CODE:
```
@import '~@payloadcms/ui/scss';
```

----------------------------------------

TITLE: Updating Payload Cloud Plugin
DESCRIPTION: Commands to uninstall the old Payload Cloud plugin and install the new one, along with the required config changes.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_2

LANGUAGE: bash
CODE:
```
pnpm remove @payloadcms/plugin-cloud
```

LANGUAGE: bash
CODE:
```
pnpm i @payloadcms/payload-cloud
```

LANGUAGE: diff
CODE:
```
// payload.config.ts
- import { payloadCloud } from '@payloadcms/plugin-cloud'
+ import { payloadCloudPlugin } from '@payloadcms/payload-cloud'

buildConfig({
  // ...
  plugins: [
-   payloadCloud()
+   payloadCloudPlugin()
  ]
})
```

----------------------------------------

TITLE: Customizing Diff Component in PayloadCMS
DESCRIPTION: Shows how to replace the default Diff Component with a custom implementation using the admin.components.Diff property. The Diff component is used in version comparison views.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_29

LANGUAGE: ts
CODE:
```
import type { Field } from 'payload'

export const myField: Field = {
  name: 'myField',
  type: 'text',
  admin: {
    components: {
      Diff: '/path/to/MyCustomDiffComponent', // highlight-line
    },
  },
}
```

----------------------------------------

TITLE: Configuring a Text Field in Payload CMS
DESCRIPTION: Demonstrates how to configure a basic Text field in a Payload CMS collection. This example shows setting the field type to 'text' and making it a required field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyTextField: Field = {
  // ...
  type: 'text', // highlight-line
}
```

----------------------------------------

TITLE: Creating Custom Lexical Editor Config in TypeScript
DESCRIPTION: Shows how to create a custom Lexical editor configuration by specifying additional features in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converters.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { FixedToolbarFeature } from '@payloadcms/richtext-lexical'

const customEditorConfig = await editorConfigFactory.fromFeatures({
  config,
  features: ({ defaultFeatures }) => [
    ...defaultFeatures,
    FixedToolbarFeature(),
  ],
})
```

----------------------------------------

TITLE: Example .env file content for Payload
DESCRIPTION: A sample .env file showing common environment variables used in Payload projects, including the server URL and database connection string.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/environment-vars.mdx#2025-04-12_snippet_1

LANGUAGE: plaintext
CODE:
```
SERVER_URL=localhost:3000
DATABASE_URI=mongodb://localhost:27017/my-database
```

----------------------------------------

TITLE: Custom Radio Field Label Client Component (TypeScript/TSX)
DESCRIPTION: Example of a custom client component for rendering the label of a Radio field in the Payload CMS admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/radio.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { RadioFieldLabelClientComponent } from 'payload'

export const CustomRadioFieldLabelClient: RadioFieldLabelClientComponent = ({
  field,
  path,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Querying Localized Data via GraphQL API
DESCRIPTION: Illustrates how to use the 'locale' and 'fallbackLocale' arguments in a GraphQL query to retrieve localized data. The example queries for Posts in German with no fallback locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_6

LANGUAGE: graphql
CODE:
```
query {
  Posts(locale: de, fallbackLocale: none) {
    docs {
      title
    }
  }
}
```

----------------------------------------

TITLE: Configuring Custom Components for Globals
DESCRIPTION: Example demonstrating how to configure custom components for Global-specific UI in the admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/globals.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { SanitizedGlobalConfig } from 'payload'

export const MyGlobal: SanitizedGlobalConfig = {
  // ...
  admin: {
    components: {
      // highlight-line
      // ...
    },
  },
}
```

----------------------------------------

TITLE: Configuring Lexical Editor in PayloadCMS Root Config
DESCRIPTION: Basic configuration to set up the Lexical editor at the root level of a PayloadCMS application.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { lexicalEditor } from '@payloadcms/richtext-lexical'

export default buildConfig({
  collections: [
    // your collections here
  ],
  // Pass the Lexical editor to the root config
  editor: lexicalEditor({}),
})
```

----------------------------------------

TITLE: Configuring Document Locking for a Collection in Payload CMS
DESCRIPTION: This snippet demonstrates how to configure document locking for a collection in Payload CMS. It shows how to set a custom lock duration of 600 seconds (10 minutes), which controls how long a document remains locked without user interaction.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/locked-documents.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const Posts: CollectionConfig = {
  slug: 'posts',
  fields: [
    {
      name: 'title',
      type: 'text',
    },
    // other fields...
  ],
  lockDocuments: {
    duration: 600, // Duration in seconds
  },
}
```

----------------------------------------

TITLE: Overriding Document Root View in PayloadCMS
DESCRIPTION: Shows how to override the root document view in a PayloadCMS collection, which replaces the entire document view layout including controls and tabs.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/document-views.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  slug: 'my-collection',
  admin: {
    components: {
      views: {
        edit: {
          root: {
            Component: '/path/to/MyCustomRootComponent',
          },
        },
      },
    },
  },
}
```

----------------------------------------

TITLE: Custom Block Conversion Implementation
DESCRIPTION: Shows how to implement custom converters for Lexical blocks and inline blocks. Includes type definitions and example implementations for different block types.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-jsx.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import type { MyInlineBlock, MyNumberBlock, MyTextBlock } from '@/payload-types'
import type {
  DefaultNodeTypes,
  SerializedBlockNode,
  SerializedInlineBlockNode,
} from '@payloadcms/richtext-lexical'
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import {
  type JSXConvertersFunction,
  RichText,
} from '@payloadcms/richtext-lexical/react'
import React from 'react'

type NodeTypes =
  | DefaultNodeTypes
  | SerializedBlockNode<MyNumberBlock | MyTextBlock>
  | SerializedInlineBlockNode<MyInlineBlock>

const jsxConverters: JSXConvertersFunction<NodeTypes> = ({
  defaultConverters,
}) => ({
  ...defaultConverters,
  blocks: {
    myNumberBlock: ({ node }) => <div>{node.fields.number}</div>,
    myTextBlock: ({ node }) => (
      <div style={{ backgroundColor: 'red' }}>{node.fields.text}</div>
    ),
  },
  inlineBlocks: {
    myInlineBlock: ({ node }) => <span>{node.fields.text}</span>,
  },
})

export const MyComponent: React.FC<{
  lexicalData: SerializedEditorState
}> = ({ lexicalData }) => {
  return <RichText converters={jsxConverters} data={lexicalData} />
}
```

----------------------------------------

TITLE: Creating Basic Custom View Component
DESCRIPTION: Example of a basic custom view component that renders a simple header and paragraph using the Gutter component from Payload UI.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import type { AdminViewServerProps } from 'payload'

import { Gutter } from '@payloadcms/ui'
import React from 'react'

export function MyCustomView(props: AdminViewServerProps) {
  return (
    <Gutter>
      <h1>Custom Default Root View</h1>
      <p>This view uses the Default Template.</p>
    </Gutter>
  )
}
```

----------------------------------------

TITLE: Configuring Admin Options for Array Fields
DESCRIPTION: Shows how to customize the appearance and behavior of Array Fields in the PayloadCMS Admin Panel by using the admin configuration object.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/array.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyArrayField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating Custom Server-Side SaveButton Component in React
DESCRIPTION: This snippet demonstrates how to create a custom server-side SaveButton component in React for Payload CMS. It uses the SaveButton component from @payloadcms/ui and the SaveButtonServerProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { SaveButton } from '@payloadcms/ui'
import type { SaveButtonServerProps } from 'payload'

export function MySaveButton(props: SaveButtonServerProps) {
  return <SaveButton label="Save" />
}
```

----------------------------------------

TITLE: Creating a Custom After Nav Links Component for Payload CMS
DESCRIPTION: Example of a simple React component that can be injected after the navigation links in the Payload CMS admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_14

LANGUAGE: tsx
CODE:
```
export default function MyAfterNavLinksComponent() {
  return <p>This is a custom component injected after the Nav links.</p>
}
```

----------------------------------------

TITLE: Conditionally Enabling/Disabling Payload Cloud Storage Plugin
DESCRIPTION: Example showing how to conditionally enable or disable the cloud storage plugin based on environment variables or other conditions. This approach properly handles webpack configuration issues.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/plugin-cloud-storage/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
cloudStoragePlugin({
  enabled: process.env.MY_CONDITION === 'true',
  collections: {
    'my-collection-slug': {
      adapter: theAdapterToUse, // see docs for the adapter you want to use
    },
  },
}),
```

----------------------------------------

TITLE: Creating a Basic Client Feature in TypeScript for Payload CMS Rich Text Editor
DESCRIPTION: Demonstrates how to create a minimal client feature using the createClientFeature function. The feature is marked with 'use client' directive and imports from the client-specific package path.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
'use client'

import { createClientFeature } from '@payloadcms/richtext-lexical/client'

export const MyClientFeature = createClientFeature({})
```

----------------------------------------

TITLE: Using Helper Functions in PayloadCMS Custom Endpoints
DESCRIPTION: Example demonstrating the use of helper functions addDataAndFileToRequest, addLocalesToRequestFromData, and headersWithCors in custom endpoint handlers.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rest-api/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { addDataAndFileToRequest } from 'payload'

{
  path: '/:id/tracking',
  method: 'post',
  handler: async (req) => {
    await addDataAndFileToRequest(req)
    await req.payload.update({
      collection: 'tracking',
      data: {
        // data to update the document with
      }
    })
    return Response.json({
      message: 'successfully updated tracking info'
    })
  }
}
```

----------------------------------------

TITLE: Setting up Payload CMS and Remix Environment
DESCRIPTION: Shell commands for setting up the development environment, including copying environment files and starting both the Payload CMS and Remix applications.
SOURCE: https://github.com/payloadcms/payload/blob/main/examples/remix/README.md#2025-04-12_snippet_0

LANGUAGE: shell
CODE:
```
cp ./payload/.env.example ./payload./.env
cp ./website/.env.example ./website/.env
pnpm install
pnpm run dev:payload
pnpm run dev:website
```

----------------------------------------

TITLE: Configuring Multi-Tenant Plugin in PayloadCMS
DESCRIPTION: TypeScript configuration example showing how to set up the multi-tenant plugin in PayloadCMS config, including tenant collection setup and plugin options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/multi-tenant.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { multiTenantPlugin } from '@payloadcms/plugin-multi-tenant'
import type { Config } from './payload-types'

const config = buildConfig({
  collections: [
    {
      slug: 'tenants',
      admin: {
        useAsTitle: 'name'
      }
      fields: [
        // remember, you own these fields
        // these are merely suggestions/examples
        {
        name: 'name',
        type: 'text',
        required: true,
        },
        {
          name: 'slug',
          type: 'text',
          required: true,
        },
        {
          name: 'domain',
          type: 'text',
          required: true,
        }
      ],
    },
  ],
  plugins: [
    multiTenantPlugin<Config>({
      collections: {
        pages: {},
        navigation: {
          isGlobal: true,
        }
      },
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Implementing Create Access Control
DESCRIPTION: Example showing how to implement create access control in a Collection to allow only authenticated users to create documents.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/collections.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionWithCreateAccess: CollectionConfig = {
  // ...
  access: {
    // highlight-start
    create: ({ req: { user }, data }) => {
      return Boolean(user)
    },
    // highlight-end
  },
}
```

----------------------------------------

TITLE: Creating a Client-Side Component in Payload
DESCRIPTION: Illustrates how to create a client-side component in Payload using the 'use client' directive and React hooks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'
import React, { useState } from 'react'

export function MyClientComponent() {
  const [count, setCount] = useState(0)

  return (
    <button onClick={() => setCount(count + 1)}>Clicked {count} times</button>
  )
}
```

----------------------------------------

TITLE: Dockerfile for Payload CMS Production Deployment
DESCRIPTION: A multi-stage Dockerfile for building and deploying a Payload CMS application in production. It includes stages for dependency installation, build process, and final production image setup.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/production/deployment.mdx#2025-04-12_snippet_1

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
# From https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile

FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD HOSTNAME="0.0.0.0" node server.js
```

----------------------------------------

TITLE: Adding Custom Styles to Payload Component
DESCRIPTION: Demonstrates how to add custom styles to a Payload component by importing a CSS or SCSS file.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_16

LANGUAGE: tsx
CODE:
```
import './index.scss'

export function MyComponent() {
  return <div className="my-component">My Custom Component</div>
}
```

----------------------------------------

TITLE: Complex AND/OR Query Logic
DESCRIPTION: Shows how to construct complex queries using AND/OR logic operators to combine multiple conditions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/overview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Where } from 'payload'

const query: Where = {
  or: [
    {
      color: {
        equals: 'mint',
      },
    },
    {
      and: [
        {
          color: {
            equals: 'white',
          },
        },
        {
          featured: {
            equals: false,
          },
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Defining Upload Field in Collection Configuration
DESCRIPTION: Example of how to include an Upload field in a Payload CMS collection configuration, setting it as required and relating it to a media collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/upload.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      name: 'backgroundImage', // required
      type: 'upload', // required
      relationTo: 'media', // required
      required: true,
    },
  ],
}
```

----------------------------------------

TITLE: Configuring Max Depth for a Relationship Field in Payload CMS (JavaScript)
DESCRIPTION: This snippet demonstrates how to set a maximum depth for a relationship field in Payload CMS. It uses the 'maxDepth' property in the field configuration to limit population depth to 2 levels.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/depth.mdx#2025-04-12_snippet_4

LANGUAGE: javascript
CODE:
```
{
  slug: 'posts',
  fields: [
    {
      name: 'author',
      type: 'relationship',
      relationTo: 'users',
      maxDepth: 2, // highlight-line
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Task Restoration in Payload CMS
DESCRIPTION: Example of configuring task restoration behavior using the shouldRestore property. This snippet demonstrates how to disable automatic task restoration for a specific task.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/tasks.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    tasks: [
      {
        slug: 'myTask',
        retries: {
          shouldRestore: false,
        },
        // ...
      } as TaskConfig<'myTask'>,
    ],
  },
})
```

----------------------------------------

TITLE: Overriding Form Collection in Form Builder Plugin
DESCRIPTION: Example of how to override the default form collection configuration in the Form Builder Plugin. This allows for customization of the form collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
formBuilderPlugin({
  // ...
  formOverrides: {
    slug: 'contact-forms',
    access: {
      read: ({ req: { user } }) => !!user, // authenticated users only
      update: () => false,
    },
    fields: ({ defaultFields }) => {
      return [
        ...defaultFields,
        {
          name: 'custom',
          type: 'text',
        },
      ]
    },
  },
})
```

----------------------------------------

TITLE: Importing Label Component Types in PayloadCMS
DESCRIPTION: Shows how to import TypeScript types for Label Components to ensure type safety in custom implementations. There are specific types for server and client environments for each field type.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_24

LANGUAGE: tsx
CODE:
```
import type {
  TextFieldLabelServerComponent,
  TextFieldLabelClientComponent,
  // ...and so on for each Field Type
} from 'payload'
```

----------------------------------------

TITLE: Implementing a Custom Text Field Server Component in Payload CMS
DESCRIPTION: Demonstrates how to create a custom server component for a Text field in Payload CMS. This component wraps the default TextField component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { TextField } from '@payloadcms/ui'
import type { TextFieldServerComponent } from 'payload'

export const CustomTextFieldServer: TextFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <TextField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Defining UI Field Type in Payload CMS TypeScript Config
DESCRIPTION: This snippet demonstrates how to set the type of a field to 'ui' in a Payload CMS field configuration. UI fields are used to add custom React components to the Admin Panel without affecting document data.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/ui.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyUIField: Field = {
  // ...
  type: 'ui', // highlight-line
}
```

----------------------------------------

TITLE: Implementing Client-Side Preview Button in PayloadCMS
DESCRIPTION: Client component implementation of a custom preview button using PayloadCMS UI components. Uses the 'use client' directive and accepts PreviewButtonClientProps.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_16

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { PreviewButton } from '@payloadcms/ui'
import type { PreviewButtonClientProps } from 'payload'

export function MyPreviewButton(props: PreviewButtonClientProps) {
  return <PreviewButton />
}
```

----------------------------------------

TITLE: Custom Schema Type Generation
DESCRIPTION: Example of extending JSON schema to generate custom types
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/typescript/generating-types.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
{
  // ...
  typescript: {
    schema: [
      ({ jsonSchema }) => {
        // Modify the JSON schema here
        jsonSchema.definitions.Test = {
          type: 'object',
          properties: {
            title: { type: 'string' },
            content: { type: 'string' },
          },
          required: ['title', 'content'],
        }
        return jsonSchema
      },
    ]
  }
}
```

----------------------------------------

TITLE: Updating Endpoint Handlers in Payload CMS v3
DESCRIPTION: This diff shows how endpoint handlers have changed in v3. The response pattern now uses the Web API Response object instead of Express-style response methods, and parameters are accessed differently.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_22

LANGUAGE: diff
CODE:
```
// collections/Posts.ts
import type { CollectionConfig } from 'payload'

export const PostsCollection: CollectionConfig = {
  slug: 'posts',
  endpoints: [
-   {
-     path: '/whoami/:parameter',
-     method: 'post',
-     handler: (req, res) => {
-       res.json({
-         parameter: req.params.parameter,
-         name: req.body.name,
-         age: req.body.age,
-       })
-     }
-   },
+   {
+     path: '/whoami/:parameter',
+     method: 'post',
+     handler: (req) => {
+       return Response.json({
+         parameter: req.routeParams.parameter,
+         // ^^ `params` is now `routeParams`
+         name: req.data.name,
+         age: req.data.age,
+       })
+     }
+   }
  ]
}
```

----------------------------------------

TITLE: Finding Version by ID using Local API
DESCRIPTION: JavaScript code example demonstrating how to find a specific version by ID using Payload's Local API.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/overview.mdx#2025-04-12_snippet_3

LANGUAGE: javascript
CODE:
```
const result = await payload.findVersionByID({
  collection: 'posts',
  id: '507f1f77bcf86cd799439013',
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Using Auth Hook in PayloadCMS
DESCRIPTION: Shows how to use useAuth hook to access current user information and authentication methods.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'
import { useAuth } from '@payloadcms/ui'
import type { User } from '../payload-types.ts'

const Greeting: React.FC = () => {
  const { user } = useAuth<User>()

  return <span>Hi, {user.email}!</span>
}
```

----------------------------------------

TITLE: Installing Payload with TailwindCSS Template
DESCRIPTION: Command to create a new Payload project using the TailwindCSS and shadcn/ui template.
SOURCE: https://github.com/payloadcms/payload/blob/main/examples/tailwind-shadcn-ui/README.md#2025-04-12_snippet_0

LANGUAGE: bash
CODE:
```
npx create-payload-app --example tailwind-shadcn-ui
```

----------------------------------------

TITLE: Dynamic Field Description with i18n Function in TypeScript
DESCRIPTION: Demonstrates how to create a dynamic field description using a function with internationalization support.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_16

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollectionConfig: CollectionConfig = {
  // ...
  fields: [
    // ...
    {
      name: 'myField',
      type: 'text',
      admin: {
        description: ({ t }) => `${t('Hello, world!')}`, // highlight-line
      },
    },
  ],
}
```

----------------------------------------

TITLE: Custom ID Field Configuration in TypeScript
DESCRIPTION: Shows how to configure a custom ID field for a Payload collection using a number type.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_13

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  fields: [
    {
      name: 'id',
      required: true,
      type: 'number',
    },
  ],
}
```

----------------------------------------

TITLE: Accessing Field Config in Server Component
DESCRIPTION: Illustrates how to access the field configuration in a server-side field component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_9

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { TextFieldServerComponent } from 'payload'

export const MyClientFieldComponent: TextFieldServerComponent = ({
  field: { name },
}) => {
  return <p>{`This field's name is ${name}`}</p>
}
```

----------------------------------------

TITLE: Configuring Radio Field in Payload CMS (TypeScript)
DESCRIPTION: Example of how to configure a Radio field in Payload CMS, including type specification and options array.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/radio.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyRadioField: Field = {
  // ...
  // highlight-start
  type: 'radio',
  options: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Custom Code Field Label Server Component (TypeScript React)
DESCRIPTION: This code defines a custom server component for the Code field label in Payload CMS. It uses the FieldLabel component from @payloadcms/ui and implements the CodeFieldLabelServerComponent interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { CodeFieldLabelServerComponent } from 'payload'

export const CustomCodeFieldLabelServer: CodeFieldLabelServerComponent = ({
  clientField,
  path,
}) => {
  return (
    <FieldLabel
      label={clientField?.label || clientField?.name}
      path={path}
      required={clientField?.required}
    />
  )
}
```

----------------------------------------

TITLE: Configuring Vercel Blob Storage in PayloadCMS
DESCRIPTION: Configuration example for implementing Vercel Blob storage adapter in PayloadCMS. Shows how to set up collections with optional prefixes and environment variables.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { vercelBlobStorage } from '@payloadcms/storage-vercel-blob'
import { Media } from './collections/Media'
import { MediaWithPrefix } from './collections/MediaWithPrefix'

export default buildConfig({
  collections: [Media, MediaWithPrefix],
  plugins: [
    vercelBlobStorage({
      enabled: true, // Optional, defaults to true
      // Specify which collections should use Vercel Blob
      collections: {
        media: true,
        'media-with-prefix': {
          prefix: 'my-prefix',
        },
      },
      // Token provided by Vercel once Blob storage is added to your Vercel project
      token: process.env.BLOB_READ_WRITE_TOKEN,
    }),
  ],
})
```

----------------------------------------

TITLE: Customizing Form Builder Fields Configuration
DESCRIPTION: Demonstrates how to override default field configurations in the form builder plugin
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
formBuilderPlugin({
  // ...
  fields: {
    text: {
      ...fields.text,
      labels: {
        singular: 'Custom Text Field',
        plural: 'Custom Text Fields',
      },
    },
  },
})
```

----------------------------------------

TITLE: Implementing Forgot Password with REST API in TypeScript
DESCRIPTION: Example of making a POST request to the forgot password endpoint to initiate password reset process by sending an email to the user.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_17

LANGUAGE: typescript
CODE:
```
const res = await fetch(
  `http://localhost:3000/api/[collection-slug]/forgot-password`,
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      email: 'dev@payloadcms.com',
    }),
  },
)
```

----------------------------------------

TITLE: Generating Fully Qualified Preview URL in Payload CMS
DESCRIPTION: This snippet demonstrates how to create a fully qualified preview URL using the request object, useful for deployments like Vercel Preview.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/preview.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
preview: (doc, { req }) => `${req.protocol}//${req.host}/${doc.slug}`
```

----------------------------------------

TITLE: Custom Select Field Label Server Component
DESCRIPTION: Server-side implementation of a custom label component for Select fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/select.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { SelectFieldLabelServerComponent } from 'payload'

export const CustomSelectFieldLabelServer: SelectFieldLabelServerComponent = ({
  clientField,
  path,
}) => {
  return (
    <FieldLabel
      label={clientField?.label || clientField?.name}
      path={path}
      required={clientField?.required}
    />
  )
}
```

----------------------------------------

TITLE: Creating Custom Server-Side Edit View Component in React
DESCRIPTION: This code shows how to create a custom server-side Edit View component in React for Payload CMS. It uses the DocumentViewServerProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { DocumentViewServerProps } from 'payload'

export function MyCustomServerEditView(props: DocumentViewServerProps) {
  return <div>This is a custom Edit View (Server)</div>
}
```

----------------------------------------

TITLE: Custom View with Default Template
DESCRIPTION: Demonstrates how to use the Default Template in a custom view to maintain consistent layout and navigation in the admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import type { AdminViewServerProps } from 'payload'

import { DefaultTemplate } from '@payloadcms/next/templates'
import { Gutter } from '@payloadcms/ui'
import React from 'react'

export function MyCustomView({
  initPageResult,
  params,
  searchParams,
}: AdminViewServerProps) {
  return (
    <DefaultTemplate
      i18n={initPageResult.req.i18n}
      locale={initPageResult.locale}
      params={params}
      payload={initPageResult.req.payload}
      permissions={initPageResult.permissions}
      searchParams={searchParams}
      user={initPageResult.req.user || undefined}
      visibleEntities={initPageResult.visibleEntities}
    >
      <Gutter>
        <h1>Custom Default Root View</h1>
        <p>This view uses the Default Template.</p>
      </Gutter>
    </DefaultTemplate>
  )
}
```

----------------------------------------

TITLE: Structuring Polymorphic Join Field Data in JSON
DESCRIPTION: Example of how a document with a populated polymorphic Join field is structured in JSON format. It includes 'relationTo' to specify the collection and 'value' containing the related document or ID.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/join.mdx#2025-04-12_snippet_2

LANGUAGE: json
CODE:
```
{
  "id": "66e3431a3f23e684075aae9c",
  "relatedPosts": {
    "docs": [
      {
        "relationTo": "posts",
        "value": {
          "id": "66e3431a3f23e684075aaeb9",
          // other fields...
          "category": "66e3431a3f23e684075aae9c"
        }
      }
      // { ... }
    ],
    "hasNextPage": false,
    "totalDocs": 10 // if count: true is passed
  }
  // other fields...
}
```

----------------------------------------

TITLE: Creating a Custom Server-Side BeforeList Component
DESCRIPTION: This snippet shows an example of a custom server-side BeforeList component in React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { BeforeListServerProps } from 'payload'

export function MyBeforeListComponent(props: BeforeListServerProps) {
  return <div>This is a custom beforeList component (Server)</div>
}
```

----------------------------------------

TITLE: Using a Payload CMS Plugin in Configuration
DESCRIPTION: Example showing how to use a plugin in the Payload CMS configuration file. This demonstrates how to import and register a plugin with the Payload instance.
SOURCE: https://github.com/payloadcms/payload/blob/main/templates/plugin/README.md#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload/config';
import { myPlugin } from './my-plugin';

const config = buildConfig({
  // ... other config options
  plugins: [
    myPlugin,
    // Or with options:
    myPlugin({
      customOption: 'value',
    }),
  ],
});

export default config;
```

----------------------------------------

TITLE: Custom Blocks Field Label Client Component in TypeScript/React
DESCRIPTION: Client-side implementation of a custom field label component for blocks.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { BlocksFieldLabelClientComponent } from 'payload'

export const CustomBlocksFieldLabelClient: BlocksFieldLabelClientComponent = ({
  label,
  path,
  required,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Filtering Upload Options in TypeScript
DESCRIPTION: Demonstrates how to filter upload options in an Upload field by specifying MIME type constraints, limiting the selection to image files.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/upload.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
const uploadField = {
  name: 'image',
  type: 'upload',
  relationTo: 'media',
  filterOptions: {
    mimeType: { contains: 'image' },
  },
}
```

----------------------------------------

TITLE: Creating a User with Default Access Control Behavior in Payload CMS
DESCRIPTION: This snippet demonstrates the default behavior of local API operations in Payload CMS, where access control is skipped. It creates a new user without checking permissions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/access-control.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const test = await payload.create({
  collection: 'users',
  data: {
    email: 'test@test.com',
    password: 'test',
  },
})
```

----------------------------------------

TITLE: Setting Step Navigation with React Hook
DESCRIPTION: This snippet is about using the `useStepNav` hook to configure breadcrumb navigation links. It involves setting a `stepNav` array which can be dynamically updated through a state setter function provided by the hook.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_18

LANGUAGE: tsx
CODE:
```
"use client"
import { type StepNavItem, useStepNav } from '@payloadcms/ui'
import { useEffect } from 'react'

export const MySetStepNavComponent: React.FC<{
  nav: StepNavItem[]
}> = ({ nav }) => {
  const { setStepNav } = useStepNav()

  useEffect(() => {
    setStepNav(nav)
  }, [setStepNav, nav])

  return null
}

```

----------------------------------------

TITLE: Configuring Admin Options for Globals
DESCRIPTION: Example showing how to configure admin panel options for a Global configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/globals.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { GlobalConfig } from 'payload'

export const MyGlobal: GlobalConfig = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: beforeChange Hook Implementation
DESCRIPTION: Demonstrates implementation of a beforeChange hook that runs after validation but before saving, allowing modification of validated data.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { GlobalBeforeChangeHook } from 'payload'

const beforeChangeHook: GlobalBeforeChangeHook = async ({
  data,
  req,
  originalDoc,
}) => {
  return data
}
```

----------------------------------------

TITLE: Handling Localization in Server Component
DESCRIPTION: Illustrates how to handle localization in a server-side component by using the locale prop.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_13

LANGUAGE: tsx
CODE:
```
import React from 'react'

export default async function MyServerComponent({ payload, locale }) {
  const localizedPage = await payload.findByID({
    collection: 'pages',
    id: '123',
    locale,
  })

  return <p>{localizedPage.title}</p>
}
```

----------------------------------------

TITLE: Importing and Configuring SEO Fields in PayloadCMS
DESCRIPTION: Demonstrates how to import and configure individual SEO fields from the plugin, including meta title, description, image, preview, and overview fields. Each field can be configured with specific options like relation collections and generate function flags.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
import {
  MetaDescriptionField,
  MetaImageField,
  MetaTitleField,
  OverviewField,
  PreviewField,
} from '@payloadcms/plugin-seo/fields'

// Used as fields
MetaImageField({
  // the upload collection slug
  relationTo: 'media',

  // if the `generateImage` function is configured
  hasGenerateFn: true,
})

MetaDescriptionField({
  // if the `generateDescription` function is configured
  hasGenerateFn: true,
})

MetaTitleField({
  // if the `generateTitle` function is configured
  hasGenerateFn: true,
})

PreviewField({
  // if the `generateUrl` function is configured
  hasGenerateFn: true,

  // field paths to match the target field for data
  titlePath: 'meta.title',
  descriptionPath: 'meta.description',
})

OverviewField({
  // field paths to match the target field for data
  titlePath: 'meta.title',
  descriptionPath: 'meta.description',
  imagePath: 'meta.image',
})
```

----------------------------------------

TITLE: Creating a Custom Text Field Label Client Component in Payload CMS
DESCRIPTION: Shows how to implement a custom client-side component for a Text field label in Payload CMS. This component wraps the FieldLabel component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/text.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { TextFieldLabelClientComponent } from 'payload'

export const CustomTextFieldLabelClient: TextFieldLabelClientComponent = ({
  field,
  path,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Basic React Implementation of Payload Admin Bar
DESCRIPTION: Simple example showing how to implement the PayloadAdminBar component in a React application with basic configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/admin-bar/README.md#2025-04-12_snippet_1

LANGUAGE: jsx
CODE:
```
import { PayloadAdminBar } from '@payloadcms/admin-bar'

export const App = () => {
  return <PayloadAdminBar cmsURL="https://cms.website.com" collection="pages" id="12345" />
}
```

----------------------------------------

TITLE: Configuring Redirect Relationships in Form Builder Plugin
DESCRIPTION: Example of how to set up redirect relationships in the Form Builder Plugin. This allows forms to redirect to specific pages upon submission.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
formBuilderPlugin({
  // ...
  redirectRelationships: ['pages'],
})
```

----------------------------------------

TITLE: Configuring Block References in PayloadCMS
DESCRIPTION: Demonstrates how to define reusable blocks in the Payload config and reference them across multiple collections and rich text editors. Shows optimization through block references instead of duplicate definitions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_9

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { lexicalEditor, BlocksFeature } from '@payloadcms/richtext-lexical'

// Payload Config
const config = buildConfig({
  // Define the block once
  blocks: [
    {
      slug: 'TextBlock',
      fields: [
        {
          name: 'text',
          type: 'text',
        },
      ],
    },
  ],
  collections: [
    {
      slug: 'collection1',
      fields: [
        {
          name: 'content',
          type: 'blocks',
          // Reference the block by slug
          blockReferences: ['TextBlock'],
          blocks: [], // Required to be empty, for compatibility reasons
        },
      ],
    },
     {
      slug: 'collection2',
      fields: [
        {
          name: 'editor',
          type: 'richText',
          editor: lexicalEditor({
            BlocksFeature({
              // Same reference can be reused anywhere, even in the lexical editor, without incurred performance hit
              blocks: ['TextBlock'],
            })
          })
        },
      ],
    },
  ],
})
```

----------------------------------------

TITLE: Generating SEO Image in Payload Config
DESCRIPTION: Example of how to define a custom function to generate the SEO image using document content.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  seoPlugin({
    generateImage: ({ doc }) => doc?.featuredImage,
  })
}
```

----------------------------------------

TITLE: Configuring Date Field Admin Options in TypeScript
DESCRIPTION: Example showing how to customize the appearance and behavior of a Date field in the Admin Panel using the admin configuration option in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyDateField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Migrating Slate to Lexical using Migration Script
DESCRIPTION: Script to automatically migrate all Slate rich text content to Lexical format. Requires payload object as parameter and should be run after proper backup and configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/migration.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { migrateSlateToLexical } from '@payloadcms/richtext-lexical/migrate'

await migrateSlateToLexical({ payload })
```

----------------------------------------

TITLE: Implementing Custom GraphQL Validation Rules in Payload CMS
DESCRIPTION: This snippet shows how to add custom validation rules to the GraphQL API in Payload CMS, including an example rule to disable introspection in production.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { GraphQL } from '@payloadcms/graphql/types'
import { buildConfig } from 'payload'

export default buildConfig({
  // ...
  graphQL: {
    validationRules: (args) => [NoProductionIntrospection],
  },
  // ...
})

const NoProductionIntrospection: GraphQL.ValidationRule = (context) => ({
  Field(node) {
    if (process.env.NODE_ENV === 'production') {
      if (node.name.value === '__schema' || node.name.value === '__type') {
        context.reportError(
          new GraphQL.GraphQLError(
            'GraphQL introspection is not allowed, but the query contained __schema or __type',
            { nodes: [node] },
          ),
        )
      }
    }
  },
})
```

----------------------------------------

TITLE: Custom Code Field Server Component (TypeScript React)
DESCRIPTION: This code defines a custom server component for the Code field in Payload CMS. It uses the CodeField component from @payloadcms/ui and implements the CodeFieldServerComponent interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { CodeField } from '@payloadcms/ui'
import type { CodeFieldServerComponent } from 'payload'

export const CustomCodeFieldServer: CodeFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <CodeField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Creating a Custom Client-Side BeforeList Component
DESCRIPTION: This snippet demonstrates how to create a custom client-side BeforeList component in React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import type { BeforeListClientProps } from 'payload'

export function MyBeforeListComponent(props: BeforeListClientProps) {
  return <div>This is a custom beforeList component (Client)</div>
}
```

----------------------------------------

TITLE: Custom Output Path Configuration
DESCRIPTION: Configuration to specify custom output path for generated types
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/typescript/generating-types.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
{
  // ...
	typescript: {
    // defaults to: path.resolve(__dirname, './payload-types.ts')
		outputFile: path.resolve(__dirname, './generated-types.ts'),
	},
}
```

----------------------------------------

TITLE: Implementing Custom RefreshRouteOnSave Component
DESCRIPTION: Example of a custom RefreshRouteOnSave React component using the base @payloadcms/live-preview package. It demonstrates how to listen for document events and refresh the route.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/server.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import type React from 'react'

import { isDocumentEvent, ready } from '@payloadcms/live-preview'
import { useCallback, useEffect, useRef } from 'react'

export const RefreshRouteOnSave: React.FC<{
  apiRoute?: string
  depth?: number
  refresh: () => void
  serverURL: string
}> = (props) => {
  const { apiRoute, depth, refresh, serverURL } = props
  const hasSentReadyMessage = useRef<boolean>(false)

  const onMessage = useCallback(
    (event: MessageEvent) => {
      if (isDocumentEvent(event, serverURL)) {
        if (typeof refresh === 'function') {
          refresh()
        }
      }
    },
    [refresh, serverURL],
  )

  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.addEventListener('message', onMessage)
    }

    if (!hasSentReadyMessage.current) {
      hasSentReadyMessage.current = true

      ready({
        serverURL,
      })
    }

    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('message', onMessage)
      }
    }
  }, [serverURL, onMessage, depth, apiRoute])

  return null
}
```

----------------------------------------

TITLE: Configuring Slate Editor Per Field
DESCRIPTION: Example showing how to configure the Slate editor for a specific field with custom elements and leaves.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/slate.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'
import { slateEditor } from '@payloadcms/richtext-slate'

export const Pages: CollectionConfig = {
  slug: 'pages',
  fields: [
    {
      name: 'content',
      type: 'richText',
      // Pass the Slate editor here and configure it accordingly
      editor: slateEditor({
        admin: {
          elements: [
            // customize elements allowed in Slate editor here
          ],
          leaves: [
            // customize leaves allowed in Slate editor here
          ],
        },
      }),
    },
  ],
}
```

----------------------------------------

TITLE: Implementing a Custom Email Field Server Component in React
DESCRIPTION: This code snippet shows how to create a custom server-side component for an Email field in Payload CMS using React and TypeScript. It uses the EmailField component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/email.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { EmailField } from '@payloadcms/ui'
import type { EmailFieldServerComponent } from 'payload'

export const CustomEmailFieldServer: EmailFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <EmailField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Querying Documents with Depth 1 in Payload CMS (JSON)
DESCRIPTION: This snippet shows the JSON response structure when querying a document with a depth of 1. Related documents are populated with their basic information.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/depth.mdx#2025-04-12_snippet_1

LANGUAGE: json
CODE:
```
{
  "id": "5ae8f9bde69e394e717c8832",
  "title": "This is a great post",
  "author": {
    "id": "5f7dd05cd50d4005f8bcab17",
    "name": "John Doe"
  }
}
```

----------------------------------------

TITLE: Relationship Data Structure Examples
DESCRIPTION: JSON examples showing various data structures for relationship fields including single references and polymorphic relationships.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_4

LANGUAGE: json
CODE:
```
{
  "owner": "6031ac9e1289176380734024"
}
```

LANGUAGE: json
CODE:
```
{
  "owner": {
    "relationTo": "organizations",
    "value": "6031ac9e1289176380734024"
  }
}
```

LANGUAGE: json
CODE:
```
{
  "owners": ["6031ac9e1289176380734024", "602c3c327b811235943ee12b"]
}
```

LANGUAGE: json
CODE:
```
{
  "owners": [
    {
      "relationTo": "users",
      "value": "6031ac9e1289176380734024"
    },
    {
      "relationTo": "organizations",
      "value": "602c3c327b811235943ee12b"
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Payload with Content Source Maps Plugin
DESCRIPTION: TypeScript code snippet showing how to configure Payload CMS with the Content Source Maps plugin, enabling it for specific collections.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/integrations/vercel-content-link.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from "payload/config"
import contentSourceMaps from "@payloadcms/plugin-csm"

const config = buildConfig({
  collections: [
    {
      slug: "pages",
      fields: [
        {
          name: 'slug',
          type: 'text',
        },
        {
          name: 'title,'
          type: 'text',
        },
      ],
    },
  ],
  plugins: [
    contentSourceMaps({
      collections: ["pages"],
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Using Payload SCSS Library in Custom Styles
DESCRIPTION: Illustrates how to import and use Payload's SCSS library in custom component styles, including mixins for responsive design.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_18

LANGUAGE: scss
CODE:
```
@import '~@payloadcms/ui/scss';

.my-component {
  @include mid-break {
    background-color: var(--theme-elevation-900);
  }
}
```

----------------------------------------

TITLE: Managing Array Fields with useForm Hook in React
DESCRIPTION: Example showing how to add rows to array fields using the addFieldRow method from useForm hook. Demonstrates custom array management with type safety in TypeScript.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import { useForm } from "@payloadcms/ui"

export const CustomArrayManager = () => {
  const { addFieldRow } = useForm()

return (

<button
  type="button"
  onClick={() => {
    addFieldRow({
      path: 'arrayField',
      schemaPath: 'arrayField',
      rowIndex: 0, // optionally specify the index to add the row at
      subFieldState: {
        textField: {
          initialValue: 'New row text',
          valid: true,
          value: 'New row text',
        },
      },
      // blockType: "yourBlockSlug",
      // ^ if managing a block array, you need to specify the block type
    })
  }}
>
  Add Row
</button>
) }
```

----------------------------------------

TITLE: Custom Code Field Label Client Component (TypeScript React)
DESCRIPTION: This snippet demonstrates a custom client component for the Code field label in Payload CMS. It's a client-side component that uses the FieldLabel from @payloadcms/ui and implements the CodeFieldLabelClientComponent interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/code.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { CodeFieldLabelClientComponent } from 'payload'

export const CustomCodeFieldLabelClient: CodeFieldLabelClientComponent = ({
  field,
  path,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Converting Lexical Richtext to Markdown in Payload CMS
DESCRIPTION: Basic example of converting Lexical editor state to Markdown format using the convertLexicalToMarkdown utility. Requires access to Payload Config and editor configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-markdown.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import {
  convertLexicalToMarkdown,
  editorConfigFactory,
} from '@payloadcms/richtext-lexical'

// Your richtext data here
const data: SerializedEditorState = {}

const markdown = convertLexicalToMarkdown({
  data,
  editorConfig: await editorConfigFactory.default({
    config, // <= make sure you have access to your Payload Config
  }),
})
```

----------------------------------------

TITLE: Generating SEO URL in Payload Config
DESCRIPTION: Example of how to define a custom function to generate the SEO URL for the search preview component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/seo.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  seoPlugin({
    generateURL: ({ doc, collectionSlug }) =>
      `https://yoursite.com/${collectionSlug}/${doc?.slug}`,
  })
}
```

----------------------------------------

TITLE: Defining a Task in Payload Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a task named 'createPost' in the Payload configuration. It includes input and output schemas, a handler function, and retry settings.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/tasks.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    tasks: [
      {
        // Configure this task to automatically retry
        // up to two times
        retries: 2,

        // This is a unique identifier for the task

        slug: 'createPost',

        // These are the arguments that your Task will accept
        inputSchema: [
          {
            name: 'title',
            type: 'text',
            required: true,
          },
        ],

        // These are the properties that the function should output
        outputSchema: [
          {
            name: 'postID',
            type: 'text',
            required: true,
          },
        ],

        // This is the function that is run when the task is invoked
        handler: async ({ input, job, req }) => {
          const newPost = await req.payload.create({
            collection: 'post',
            req,
            data: {
              title: input.title,
            },
          })
          return {
            output: {
              postID: newPost.id,
            },
          }
        },
      } as TaskConfig<'createPost'>,
    ],
  },
})
```

----------------------------------------

TITLE: Configuring Admin Options for Relationship Field
DESCRIPTION: Shows how to add admin-specific configuration to a Relationship field. This is used to customize the field's appearance and behavior in the Payload CMS Admin Panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/relationship.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyRelationshipField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Basic Group Field Configuration in TypeScript
DESCRIPTION: Shows the basic structure for creating a Group field in PayloadCMS with type definition and fields array.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/group.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyGroupField: Field = {
  // ...
  // highlight-start
  type: 'group',
  fields: [
    // ...
  ],
  // highlight-end
}
```

----------------------------------------

TITLE: Accessing Drizzle Schema in Payload CMS
DESCRIPTION: Example showing how to access and use Drizzle schema after generating it with Payload. Demonstrates querying functionality with Drizzle's API, including complex queries with conditions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
// Import table from the generated file
import { posts } from './payload-generated-schema'
// To avoid installing Drizzle, you can import everything that drizzle has from our re-export path.
import { eq, sql, and } from '@payloadcms/db-sqlite/drizzle'

// Drizzle's Querying API: https://orm.drizzle.team/docs/rqb
const posts = await payload.db.drizzle.query.posts.findMany()
// Drizzle's Select API https://orm.drizzle.team/docs/select
const result = await payload.db.drizzle
  .select()
  .from(posts)
  .where(
    and(eq(posts.id, 50), sql`lower(${posts.title}) = 'example post title'`),
  )
```

----------------------------------------

TITLE: Creating a Custom Email Field Client Component in React
DESCRIPTION: This snippet demonstrates how to implement a custom client-side component for an Email field in Payload CMS using React and TypeScript. It uses the EmailField component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/email.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { EmailField } from '@payloadcms/ui'
import type { EmailFieldClientComponent } from 'payload'

export const CustomEmailFieldClient: EmailFieldClientComponent = (props) => {
  return <EmailField {...props} />
}
```

----------------------------------------

TITLE: Configuring Form Builder Plugin in Payload Config
DESCRIPTION: Example of how to include the Form Builder Plugin in the Payload CMS configuration file. It demonstrates basic usage with plugin options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/form-builder.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import { formBuilderPlugin } from '@payloadcms/plugin-form-builder'

const config = buildConfig({
  collections: [
    {
      slug: 'pages',
      fields: [],
    },
  ],
  plugins: [
    formBuilderPlugin({
      // see below for a list of available options
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Creating a Custom Client-Side List View Component
DESCRIPTION: This snippet demonstrates how to create a custom client-side List View component in React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import type { ListViewClientProps } from 'payload'

export function MyCustomClientListView(props: ListViewClientProps) {
  return <div>This is a custom List View (Client)</div>
}
```

----------------------------------------

TITLE: Generating GraphQL Schema in Payload CMS
DESCRIPTION: Command to generate the GraphQL schema from your Payload CMS collections and globals.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/graphql/graphql-schema.mdx#2025-04-12_snippet_1

LANGUAGE: bash
CODE:
```
pnpm payload-graphql generate:schema
```

----------------------------------------

TITLE: Complete Example of Collapsible Field Implementation in a Collection
DESCRIPTION: A comprehensive example showing a Collapsible field implementation in a collection configuration. This example uses a dynamic label based on the content's title and contains multiple text fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/collapsible.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      label: ({ data }) => data?.title || 'Untitled',
      type: 'collapsible', // required
      fields: [
        // required
        {
          name: 'title',
          type: 'text',
          required: true,
        },
        {
          name: 'someTextField',
          type: 'text',
          required: true,
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Collection Configuration with Custom Converters
DESCRIPTION: Example showing how to configure a collection with custom Slate to Lexical converters, combining default and custom converters in the feature configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/migration.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

import { lexicalEditor } from '@payloadcms/richtext-lexical'
import {
  SlateToLexicalFeature,
  defaultSlateConverters,
} from '@payloadcms/richtext-lexical'

import { YourCustomConverter } from '../converters/YourCustomConverter'

const Pages: CollectionConfig = {
  slug: 'pages',
  fields: [
    {
      name: 'nameOfYourRichTextField',
      type: 'richText',
      editor: lexicalEditor({
        features: ({ defaultFeatures }) => [
          ...defaultFeatures,
          SlateToLexicalFeature({
            converters: [...defaultSlateConverters, YourCustomConverter],
          }),
        ],
      }),
    },
  ],
}
```

----------------------------------------

TITLE: Extracting Lexical Editor Config from Field in TypeScript
DESCRIPTION: Demonstrates how to extract the Lexical editor configuration directly from a field configuration in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converters.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
const fieldEditorConfig = editorConfigFactory.fromField({
  field: config.collections[0].fields[1],
})
```

----------------------------------------

TITLE: Typing and Sanitizing Props in Client Feature for Lexical Editor
DESCRIPTION: This example demonstrates how to type and sanitize props in a client feature for the Lexical editor. It shows the generic type parameters and how to process and return sanitized props from the feature function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_23

LANGUAGE: typescript
CODE:
```
createClientFeature<UnSanitizedClientProps, SanitizedClientProps>(
  ({
    clientFunctions,
    featureProviderMap,
    props,
    resolvedFeatures,
    unSanitizedEditorConfig,
  }) => {
    const sanitizedProps = doSomethingWithProps(props)
    return {
      sanitizedClientFeatureProps: sanitizedProps,
      //Actual client feature here...
    }
  },
)
```

----------------------------------------

TITLE: Using TypeScript Translation Types in Custom Components
DESCRIPTION: Example of using typed translations in a custom React component with the useTranslation hook, properly typed with custom translation keys and objects.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/i18n.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
// <rootDir>/components/MyComponent.tsx

'use client'
import type React from 'react'
import { useTranslation } from '@payloadcms/ui'

import type {
  CustomTranslationsObject,
  CustomTranslationsKeys,
} from '../custom-translations'

export const MyComponent: React.FC = () => {
  const { i18n, t } = useTranslation<
    CustomTranslationsObject,
    CustomTranslationsKeys
  >() // These generics merge your custom translations with the default client translations

  return t('general:myCustomKey')
}
```

----------------------------------------

TITLE: Retrieving Logged-in User Information in Payload CMS using GraphQL
DESCRIPTION: Shows how to query information about the currently logged-in user using GraphQL. This query retrieves the user's email and token expiration time.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/operations.mdx#2025-04-12_snippet_3

LANGUAGE: graphql
CODE:
```
query {
  me[collection-singular-label] {
    user {
      email
    }
    exp
  }
}
```

----------------------------------------

TITLE: Creating a Custom Server-Side List View Component
DESCRIPTION: This snippet shows an example of a custom server-side List View component in React.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { ListViewServerProps } from 'payload'
import { DefaultListView } from '@payloadcms/ui'

export function MyCustomServerListView(props: ListViewServerProps) {
  return <div>This is a custom List View (Server)</div>
}
```

----------------------------------------

TITLE: Configuring Admin Options for Blocks Field in Payload CMS
DESCRIPTION: Example showing how to customize the Admin Panel appearance and behavior for a Blocks Field in Payload CMS using the admin configuration option.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyBlocksField: Field = {
  // ...
  admin: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Creating a Custom Checkbox Field Client Component
DESCRIPTION: Implementation of a custom client-side component for a Checkbox field, using the 'use client' directive for React Server Components compatibility.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/checkbox.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { CheckboxField } from '@payloadcms/ui'
import type { CheckboxFieldClientComponent } from 'payload'

export const CustomCheckboxFieldClient: CheckboxFieldClientComponent = (
  props,
) => {
  return <CheckboxField {...props} />
}
```

----------------------------------------

TITLE: Restoring Versions in Payload CMS Collections
DESCRIPTION: Example of restoring a version of a document in a collection using the Payload Local API. The method requires collection name and document ID, with optional parameters for customizing the restoration process.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/versions/overview.mdx#2025-04-12_snippet_4

LANGUAGE: javascript
CODE:
```
// Result will be the restored global document.
const result = await payload.restoreVersion({
  collection: 'posts', // required
  id: '507f1f77bcf86cd799439013', // required
  depth: 2,
  user: dummyUser,
  overrideAccess: false,
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Adding a Custom BeforeList Component
DESCRIPTION: This snippet demonstrates how to add a custom component before the list of documents in the List View.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_4

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      // highlight-start
      beforeList: ['/path/to/MyBeforeListComponent'],
      // highlight-end
    },
  },
}
```

----------------------------------------

TITLE: Importing Existing Schema in Payload CMS with beforeSchemaInit Hook
DESCRIPTION: Shows how to import an existing database schema generated by Drizzle Introspection into Payload CMS using the beforeSchemaInit hook. This is useful when migrating an existing database to Payload without losing the current structure.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/postgres.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { postgresAdapter } from '@payloadcms/db-postgres'
import { users, countries } from '../drizzle/schema'

postgresAdapter({
  beforeSchemaInit: [
    ({ schema, adapter }) => {
      return {
        ...schema,
        tables: {
          ...schema.tables,
          users,
          countries,
        },
      }
    },
  ],
})
```

----------------------------------------

TITLE: Specifying Admin User Collection in Payload Config
DESCRIPTION: Code example showing how to specify which Collection should have access to the Admin Panel by setting the admin.user property to a collection slug.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    user: 'admins', // highlight-line
  },
})
```

----------------------------------------

TITLE: Configuring Custom Bin Scripts in Payload CMS
DESCRIPTION: Demonstrates how to add custom bin scripts to the Payload config, allowing them to be executed using the payload CLI.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/overview.mdx#2025-04-12_snippet_8

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  bin: [
    {
      scriptPath: path.resolve(dirname, 'seed.ts'),
      key: 'seed',
    },
  ],
})
```

----------------------------------------

TITLE: Using Locale Hook in PayloadCMS
DESCRIPTION: Demonstrates usage of useLocale hook for accessing current locale information including label, RTL status, and locale code.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_11

LANGUAGE: tsx
CODE:
```
'use client'
import { useLocale } from '@payloadcms/ui'

const Greeting: React.FC = () => {
  const locale = useLocale()

  const trans = {
    en: 'Hello',
    es: 'Hola',
  }

  return <span> {trans[locale.code]} </span>
}
```

----------------------------------------

TITLE: Default Access Control Function in Payload CMS
DESCRIPTION: This snippet shows the default Access Control function provided by Payload CMS. It checks if a user is present on the request and returns a boolean value.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/access-control/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
const defaultPayloadAccess = ({ req: { user } }) => {
  // Return `true` if a user is found
  // and `false` if it is undefined or null
  return Boolean(user) // highlight-line
}
```

----------------------------------------

TITLE: Using Select with REST API in Payload CMS
DESCRIPTION: Example of making REST API requests with select parameters to filter returned fields, including usage of qs-esm package for complex query string generation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/select.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
fetch('https://localhost:3000/api/posts?select[color]=true&select[group][number]=true')
  .then((res) => res.json())
  .then((data) => console.log(data))
```

LANGUAGE: typescript
CODE:
```
import { stringify } from 'qs-esm'
import type { Where } from 'payload'

const select: Where = {
  text: true,
  group: {
    number: true,
  },
}

const getPosts = async () => {
  const stringifiedQuery = stringify(
    {
      select,
    },
    { addQueryPrefix: true },
  )

  const response = await fetch(
    `http://localhost:3000/api/posts${stringifiedQuery}`,
  )
}
```

----------------------------------------

TITLE: Creating a Custom Client-Side Description Component
DESCRIPTION: This snippet shows an example of a custom client-side Description component for a collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import type { ViewDescriptionClientProps } from 'payload'

export function MyDescriptionComponent(props: ViewDescriptionClientProps) {
  return <div>This is a custom Collection description component (Client)</div>
}
```

----------------------------------------

TITLE: TypeScript Configuration for Payload
DESCRIPTION: TSConfig paths configuration for Payload configuration file.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/getting-started/installation.mdx#2025-04-12_snippet_6

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@payload-config": ["./payload.config.ts"]
    }
  }
}
```

----------------------------------------

TITLE: Extending DefaultTypedEditorState with Custom Node Types
DESCRIPTION: Example showing how to extend the DefaultTypedEditorState type by adding custom node types. This allows for combining the default node types with custom ones for a fully typed editor experience.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/overview.mdx#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
DefaultTypedEditorState<SerializedBlockNode | YourCustomSerializedNode>
```

----------------------------------------

TITLE: Adding Plugins to a Client Feature in Payload CMS Rich Text Editor
DESCRIPTION: Shows how to add a plugin to a client feature by including it in the plugins array of the createClientFeature function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_13

LANGUAGE: typescript
CODE:
```
'use client'

import { createClientFeature } from '@payloadcms/richtext-lexical/client'
import { MyPlugin } from './plugin'

export const MyClientFeature = createClientFeature({
  plugins: [MyPlugin],
})
```

----------------------------------------

TITLE: Adding a Custom Description Component
DESCRIPTION: This snippet shows how to add a custom Description component for a collection in the Collection Config.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_7

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      // highlight-start
      Description: '/path/to/MyDescriptionComponent',
      // highlight-end
    },
  },
}
```

----------------------------------------

TITLE: Customizing Collection Edit View
DESCRIPTION: Shows how to customize the edit view for a specific collection by specifying a custom component in the collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollectionConfig: CollectionConfig = {
  // ...
  admin: {
    components: {
      views: {
        edit: {
          Component: '/path/to/MyCustomView',
        },
      },
    },
  },
}
```

----------------------------------------

TITLE: Row Field Implementation Example in a Payload CMS Collection
DESCRIPTION: Complete example showing how to implement a Row field in a collection configuration. This example creates a row with two text fields (label and value) that each take up 50% of the row width.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/row.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const ExampleCollection: CollectionConfig = {
  slug: 'example-collection',
  fields: [
    {
      type: 'row', // required
      fields: [
        // required
        {
          name: 'label',
          type: 'text',
          required: true,
          admin: {
            width: '50%',
          },
        },
        {
          name: 'value',
          type: 'text',
          required: true,
          admin: {
            width: '50%',
          },
        },
      ],
    },
  ],
}
```

----------------------------------------

TITLE: Setting Default Priorities for Search Results
DESCRIPTION: Example of configuring default priorities for search results in the Search Plugin. It shows how to set static and dynamic priorities based on document content.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/search.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
// payload.config.ts
{
  // ...
  searchPlugin({
    defaultPriorities: {
      pages: ({ doc }) => (doc.title.startsWith('Hello, world!') ? 1 : 10),
      posts: 20,
    },
  }),
}
```

----------------------------------------

TITLE: Creating a Custom Server-Side Description Component
DESCRIPTION: This snippet demonstrates how to create a custom server-side Description component for a collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_8

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { ViewDescriptionServerProps } from 'payload'

export function MyDescriptionComponent(props: ViewDescriptionServerProps) {
  return <div>This is a custom Collection description component (Server)</div>
}
```

----------------------------------------

TITLE: Replacing Dashboard View in Payload Config
DESCRIPTION: Example of how to replace the built-in dashboard view with a custom component in the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/custom-views.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      views: {
        dashboard: {
          Component: '/path/to/MyCustomDashboard',
        },
      },
    },
  },
})
```

----------------------------------------

TITLE: Uploading Files via FormData in Payload CMS
DESCRIPTION: Example showing how to upload a file to Payload CMS using FormData. The code demonstrates appending a file from an input element and including additional metadata through the _payload field.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/overview.mdx#2025-04-12_snippet_6

LANGUAGE: ts
CODE:
```
const fileInput = document.querySelector('#your-file-input')
const formData = new FormData()

formData.append('file', fileInput.files[0])

// Replace with the fields defined in your upload-enabled collection.
// The example below includes an optional field like 'title'.
formData.append(
  '_payload',
  JSON.stringify({
    title: 'Example Title',
    description: 'An optional description for the file',
  }),
)

fetch('api/:upload-slug', {
  method: 'POST',
  body: formData,
  /**
   * Do not manually add the Content-Type Header
   * the browser will handle this.
   *
   * headers: {
   *  'Content-Type': 'multipart/form-data'
   * }
   */
})
```

----------------------------------------

TITLE: Custom Radio Field Server Component (TypeScript/TSX)
DESCRIPTION: Example of a custom server component for rendering a Radio field in the Payload CMS admin panel.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/radio.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { RadioGroupField } from '@payloadcms/ui'
import type { RadioFieldServerComponent } from 'payload'

export const CustomRadioFieldServer: RadioFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <RadioGroupField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Deleting Document by ID in PayloadCMS
DESCRIPTION: Shows how to delete a specific document by its ID with access control options.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_9

LANGUAGE: javascript
CODE:
```
const result = await payload.delete({
  collection: 'posts', // required
  id: '507f1f77bcf86cd799439011', // required
  depth: 2,
  locale: 'en',
  fallbackLocale: false,
  user: dummyUser,
  overrideAccess: false,
  overrideLock: false, // By default, document locks are ignored. Set to false to enforce locks.
  showHiddenFields: true,
})
```

----------------------------------------

TITLE: Initializing AfterForgotPassword Hook in TypeScript
DESCRIPTION: A hook that runs after a successful forgot password operation in an auth-enabled collection. Allows custom post-password reset logic with access to operation arguments, collection context, and additional parameters.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_17

LANGUAGE: typescript
CODE:
```
import type { CollectionAfterForgotPasswordHook } from 'payload'

const afterForgotPasswordHook: CollectionAfterForgotPasswordHook = async ({
  args,
  context,
  collection,
}) => {...}
```

----------------------------------------

TITLE: Installing Payload Plugin Configuration
DESCRIPTION: Example of how to install and configure a plugin in Payload CMS config file.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/build-your-own.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import samplePlugin from 'sample-plugin';

const config = buildConfig({
  plugins: [
    // Add plugins here
    samplePlugin({
		enabled: true,
    }),
  ],
});

export default config;
```

----------------------------------------

TITLE: Adding Context Providers to Lexical Editor Client Feature
DESCRIPTION: This example demonstrates how to add context providers to a client feature in the Lexical editor. Providers are nested below the EditorConfigProvider and can be used to provide context to nodes or other parts of a feature.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_21

LANGUAGE: typescript
CODE:
```
'use client'

import { createClientFeature } from '@payloadcms/richtext-lexical/client'
import { TableContext } from './context'

export const MyClientFeature = createClientFeature({
  providers: [TableContext],
})
```

----------------------------------------

TITLE: Dynamic HTML Generation with REST Population
DESCRIPTION: React component implementing dynamic HTML generation with REST-based population for handling uploads and links.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-html.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'

import { getRestPopulateFn } from '@payloadcms/richtext-lexical/client'
import { convertLexicalToHTMLAsync } from '@payloadcms/richtext-lexical/html-async'
import React, { useEffect, useState } from 'react'

export const MyComponent = ({ data }: { data: SerializedEditorState }) => {
  const [html, setHTML] = useState<null | string>(null)
  useEffect(() => {
    async function convert() {
      const html = await convertLexicalToHTMLAsync({
        data,
        populate: getRestPopulateFn({
          apiURL: `http://localhost:3000/api`,
        }),
      })
      setHTML(html)
    }

    void convert()
  }, [data])

  return html && <div dangerouslySetInnerHTML={{ __html: html }} />
}
```

----------------------------------------

TITLE: Basic Global Hook Configuration in TypeScript
DESCRIPTION: Shows how to add hooks property to a Global configuration in PayloadCMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/globals.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { GlobalConfig } from 'payload'

export const GlobalWithHooks: GlobalConfig = {
  // ...
  hooks: {
    // highlight-line
    // ...
  },
}
```

----------------------------------------

TITLE: Typing and Sanitizing Props in Server Feature for Lexical Editor
DESCRIPTION: This snippet shows how to type and sanitize props in a server feature for the Lexical editor. It demonstrates the generic type parameters for unsanitized and sanitized props, and how to process props within the feature function.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_22

LANGUAGE: typescript
CODE:
```
createServerFeature<UnSanitizedProps, SanitizedProps, UnSanitizedClientProps>({
  //...
  feature: async ({
    config,
    isRoot,
    props,
    resolvedFeatures,
    unSanitizedEditorConfig,
    featureProviderMap,
  }) => {
    const sanitizedProps = doSomethingWithProps(props)

    return {
      sanitizedServerFeatureProps: sanitizedProps,
      //Actual server feature here...
    }
  },
})
```

----------------------------------------

TITLE: Creating Custom Client-Side Edit View Component in React
DESCRIPTION: This snippet demonstrates how to create a custom client-side Edit View component in React for Payload CMS. It uses the 'use client' directive and the DocumentViewClientProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import type { DocumentViewClientProps } from 'payload'

export function MyCustomClientEditView(props: DocumentViewClientProps) {
  return <div>This is a custom Edit View (Client)</div>
}
```

----------------------------------------

TITLE: Initializing Payload CMS with pnpx
DESCRIPTION: This code snippet demonstrates how to create a new Payload CMS project using pnpx. It requires pnpx as a dependency and creates a new application with the latest Payload CMS version. The tool shows full setup examples, including frontend integration with Tailwind.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/payload/README.md#2025-04-12_snippet_0

LANGUAGE: text
CODE:
```
pnpx create-payload-app@latest
```

----------------------------------------

TITLE: NextJS Admin Bar Component Integration
DESCRIPTION: Example showing how to integrate the PayloadAdminBar component with dynamic props in a NextJS application.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/admin-bar/README.md#2025-04-12_snippet_3

LANGUAGE: ts
CODE:
```
import { PayloadAdminBar } from '@payloadcms/admin-bar';

export const App = (appProps) => {
  const {
    pageProps: {
      collection,
      collectionLabels,
      id
    }
  } = appProps;

  return (
    <PayloadAdminBar
      {...{
        cmsURL: 'https://cms.website.com',
        collection,
        collectionLabels,
        id
      }}
    />
  )
}
```

----------------------------------------

TITLE: Using Translation Hook in Client Component
DESCRIPTION: Shows how to use the useTranslation hook for handling translations in a client-side component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { useTranslation } from '@payloadcms/ui'

export function MyClientComponent() {
  const { t, i18n } = useTranslation()

  return (
    <ul>
      <li>{t('namespace1:key', { variable: 'value' })}</li>
      <li>{t('namespace2:key', { variable: 'value' })}</li>
      <li>{i18n.language}</li>
    </ul>
  )
}
```

----------------------------------------

TITLE: Importing Custom Translations in Payload Config
DESCRIPTION: Example of importing and using custom translations in the Payload configuration file to make them available throughout the application.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/i18n.mdx#2025-04-12_snippet_7

LANGUAGE: typescript
CODE:
```
// <rootDir>/payload.config.ts

import { buildConfig } from 'payload'

import { customTranslations } from './custom-translations'

export default buildConfig({
  //...
  i18n: {
    translations: customTranslations,
  },
  //...
})
```

----------------------------------------

TITLE: Replacing Pill Labels in View Tabs
DESCRIPTION: This snippet captures the update of the pill label definition in View Tabs from a simple string to a custom component reference within the admin components structure.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_20

LANGUAGE: diff
CODE:
```
// collections/Posts.ts
import type { CollectionConfig } from 'payload'

export const PostsCollection: CollectionConfig = {
  slug: 'posts',
  admin: {
    components: {
-     views: {
-       Edit: {
-         Tab: {
-           pillLabel: 'Hello, world!',
-         },
-       },
+       edit: {
+         tab: {
+           Pill: './path/to/CustomPill.tsx',
+         }
+       },
    },
  },
}
```

----------------------------------------

TITLE: GraphQL Query Example
DESCRIPTION: Shows how to write a GraphQL query with filtering conditions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/overview.mdx#2025-04-12_snippet_4

LANGUAGE: graphql
CODE:
```
query {
  Posts(where: { color: { equals: mint } }) {
    docs {
      color
    }
    totalDocs
  }
}
```

----------------------------------------

TITLE: Extending Drizzle Schema with afterSchemaInit Hook
DESCRIPTION: Demonstrates how to use the afterSchemaInit hook to add custom columns and indexes to a Payload CMS collection. Shows adding an extra integer column and a composite index on country and city fields.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/database/sqlite.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import { sqliteAdapter } from '@payloadcms/db-sqlite'
import { index, integer } from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { buildConfig } from 'payload'

export default buildConfig({
  collections: [
    {
      slug: 'places',
      fields: [
        {
          name: 'country',
          type: 'text',
        },
        {
          name: 'city',
          type: 'text',
        },
      ],
    },
  ],
  db: sqliteAdapter({
    afterSchemaInit: [
      ({ schema, extendTable, adapter }) => {
        extendTable({
          table: schema.tables.places,
          columns: {
            extraIntegerColumn: integer('extra_integer_column'),
          },
          extraConfig: (table) => ({
            country_city_composite_index: index(
              'country_city_composite_index',
            ).on(table.country, table.city),
          }),
        })

        return schema
      },
    ],
  }),
})
```

----------------------------------------

TITLE: Configuring Custom SaveButton Component for Collections in Payload CMS
DESCRIPTION: This code shows how to configure a custom SaveButton component for Collections in Payload CMS. It uses the 'components.edit.SaveButton' property in the Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_5

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        SaveButton: '/path/to/MySaveButton',
      },
    },
  },
}
```

----------------------------------------

TITLE: Custom Code Component Implementation in React
DESCRIPTION: React component implementation for the code field that handles language selection and code editing functionality using PayloadCMS UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/custom-features.mdx#2025-04-12_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'
import type { CodeFieldClient, CodeFieldClientProps } from 'payload'

import { CodeField, useFormFields } from '@payloadcms/ui'
import React, { useMemo } from 'react'

import { languages } from './yourFieldConfig'

const languageKeyToMonacoLanguageMap = {
  plaintext: 'plaintext',
  ts: 'typescript',
  tsx: 'typescript',
}

type Language = keyof typeof languageKeyToMonacoLanguageMap

export const Code: React.FC<CodeFieldClientProps> = ({
  autoComplete,
  field,
  forceRender,
  path,
  permissions,
  readOnly,
  renderedBlocks,
  schemaPath,
  validate,
}) => {
  const languageField = useFormFields(([fields]) => fields['language'])

  const language: Language =
    (languageField?.value as Language) ||
    (languageField?.initialValue as Language) ||
    'ts'

  const label = languages[language]

  const props: CodeFieldClient = useMemo<CodeFieldClient>(
    () => ({
      ...field,
      type: 'code',
      admin: {
        ...field.admin,
        editorOptions: undefined,
        language: languageKeyToMonacoLanguageMap[language] || language,
      },
      label,
    }),
    [field, language, label],
  )

  const key = `${field.name}-${language}-${label}`

  return (
    <CodeField
      autoComplete={autoComplete}
      field={props}
      forceRender={forceRender}
      key={key}
      path={path}
      permissions={permissions}
      readOnly={readOnly}
      renderedBlocks={renderedBlocks}
      schemaPath={schemaPath}
      validate={validate}
    />
  )
}
```

----------------------------------------

TITLE: Enabling Username Login Authentication in Payload
DESCRIPTION: Shows how to enable username-based login instead of email-based login in a Payload CMS collection, with a simple boolean configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/authentication/overview.mdx#2025-04-12_snippet_2

LANGUAGE: typescript
CODE:
```
{
  slug: 'customers',
  auth: {
    loginWithUsername: true,
  },
}
```

----------------------------------------

TITLE: Implementing Server-Side Description Component
DESCRIPTION: Server component implementation of a custom description component. Accepts ViewDescriptionServerProps and renders a simple div with description text.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_18

LANGUAGE: tsx
CODE:
```
import React from 'react'
import type { ViewDescriptionServerProps } from 'payload'

export function MyDescriptionComponent(props: ViewDescriptionServerProps) {
  return <div>This is a custom description component (Server)</div>
}
```

----------------------------------------

TITLE: Counting Documents in PayloadCMS Collection
DESCRIPTION: Demonstrates how to count documents in a collection with optional filtering and access control.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/local-api/overview.mdx#2025-04-12_snippet_6

LANGUAGE: javascript
CODE:
```
const result = await payload.count({
  collection: 'posts', // required
  locale: 'en',
  where: {}, // pass a `where` query here
  user: dummyUser,
  overrideAccess: false,
})
```

----------------------------------------

TITLE: Configuring Custom PublishButton Component for Collections in Payload CMS
DESCRIPTION: This code shows how to configure a custom PublishButton component for Collections in Payload CMS. It uses the 'components.edit.PublishButton' property in the Collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        PublishButton: '/path/to/MyPublishButton',
      },
    },
  },
}
```

----------------------------------------

TITLE: Sorting Documents using REST API in Payload CMS (JavaScript)
DESCRIPTION: This snippet shows how to sort documents in descending order by the 'createdAt' field using the REST API in Payload CMS. It uses the 'sort' query parameter in the API request.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/sort.mdx#2025-04-12_snippet_2

LANGUAGE: javascript
CODE:
```
fetch('https://localhost:3000/api/posts?sort=-createdAt') // highlight-line
  .then((response) => response.json())
  .then((data) => console.log(data))
```

----------------------------------------

TITLE: Custom Block Row Label Component in TypeScript/React
DESCRIPTION: Implementation of a custom row label component for blocks using the useRowLabel hook.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import { useRowLabel } from '@payloadcms/ui'

export const BlockRowLabel = () => {
  const { data, rowNumber } = useRowLabel<{ title?: string }>()

  const customLabel = `${data.type} ${String(rowNumber).padStart(2, '0')} `

  return <div>Custom Label: {customLabel}</div>
}
```

----------------------------------------

TITLE: Configuring Stripe Webhooks in Payload
DESCRIPTION: Example of how to configure Stripe webhooks in the Payload config. It demonstrates handling specific webhook events and includes a commented-out example of handling all events.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/plugins/stripe.mdx#2025-04-12_snippet_3

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'
import stripePlugin from '@payloadcms/plugin-stripe'

const config = buildConfig({
  plugins: [
    stripePlugin({
      stripeSecretKey: process.env.STRIPE_SECRET_KEY,
      stripeWebhooksEndpointSecret: process.env.STRIPE_WEBHOOKS_ENDPOINT_SECRET,
      webhooks: {
        'customer.subscription.updated': ({ event, stripe, stripeConfig }) => {
          // do something...
        },
      },
      // NOTE: you can also catch all Stripe webhook events and handle the event types yourself
      // webhooks: (event, stripe, stripeConfig) => {
      //   switch (event.type): {
      //     case 'customer.subscription.updated': {
      //       // do something...
      //       break;
      //     }
      //     default: {
      //       break;
      //     }
      //   }
      // }
    }),
  ],
})

export default config
```

----------------------------------------

TITLE: Custom Converters for Richtext to Plaintext in TypeScript
DESCRIPTION: Shows how to implement custom converters for specific node types when converting richtext to plaintext. Includes handling of custom text blocks and link nodes with type definitions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/rich-text/converting-plaintext.mdx#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import type {
  DefaultNodeTypes,
  SerializedBlockNode,
} from '@payloadcms/richtext-lexical'
import type { SerializedEditorState } from '@payloadcms/richtext-lexical/lexical'
import type { MyTextBlock } from '@/payload-types'

import {
  convertLexicalToPlaintext,
  type PlaintextConverters,
} from '@payloadcms/richtext-lexical/plaintext'

// Your richtext data here
const data: SerializedEditorState = {}

const converters: PlaintextConverters<
  DefaultNodeTypes | SerializedBlockNode<MyTextBlock>
> = {
  blocks: {
    textBlock: ({ node }) => {
      return node.fields.text ?? ''
    },
  },
  link: ({ node }) => {
    return node.fields.url ?? ''
  },
}

const plaintext = convertLexicalToPlaintext({
  converters,
  data,
})
```

----------------------------------------

TITLE: Configuring Vercel Blob Storage in Payload CMS
DESCRIPTION: TypeScript configuration snippet showing how to implement the Vercel Blob storage plugin in a Payload CMS configuration file, setting up media collection storage with authentication.
SOURCE: https://github.com/payloadcms/payload/blob/main/templates/website/README.md#2025-04-12_snippet_6

LANGUAGE: typescript
CODE:
```
// payload.config.ts
import { vercelBlobStorage } from '@payloadcms/storage-vercel-blob'

export default buildConfig({
  // ...
  plugins: [
    vercelBlobStorage({
      collections: {
        [Media.slug]: true,
      },
      token: process.env.BLOB_READ_WRITE_TOKEN || '',
    }),
  ],
  // ...
```

----------------------------------------

TITLE: Implementing Custom Logout Button Component in React
DESCRIPTION: This snippet shows an example of a simple custom logout button component implemented in React. It creates a button that alerts the user when clicked.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_24

LANGUAGE: tsx
CODE:
```
export default function MyCustomLogoutButton() {
  return <button onClick={() => alert('Logging out!')}>Log Out</button>
}
```

----------------------------------------

TITLE: Installing Uploadthing Storage Plugin
DESCRIPTION: This command installs the `@payloadcms/storage-uploadthing` package using `pnpm`.  This is a prerequisite for using the Uploadthing storage adapter with Payload CMS. It adds the necessary files to your project to enable interaction with Uploadthing's services.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_8

LANGUAGE: shell
CODE:
```
pnpm add @payloadcms/storage-uploadthing
```

----------------------------------------

TITLE: Importing Block Type in TypeScript
DESCRIPTION: Shows how to import and use the Block type from Payload for TypeScript integration when creating block configurations in separate files.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/blocks.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Block } from 'payload'
```

----------------------------------------

TITLE: Implementing a Custom Email Field Label Server Component in React
DESCRIPTION: This code shows how to create a custom server-side label component for an Email field in Payload CMS using React and TypeScript. It uses the FieldLabel component from @payloadcms/ui.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/email.mdx#2025-04-12_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { EmailFieldLabelServerComponent } from 'payload'

export const CustomEmailFieldLabelServer: EmailFieldLabelServerComponent = ({
  clientField,
  path,
}) => {
  return (
    <FieldLabel
      label={clientField?.label || clientField?.name}
      path={path}
      required={clientField?.required}
    />
  )
}
```

----------------------------------------

TITLE: Basic Query Structure in TypeScript
DESCRIPTION: Demonstrates the basic structure of a Payload query using TypeScript types and the equals operator.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/overview.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Where } from 'payload'

const query: Where = {
  color: {
    equals: 'blue',
  },
}
```

----------------------------------------

TITLE: Client-side Date Field Label Component Implementation
DESCRIPTION: React client component for rendering date field labels in PayloadCMS. Takes field and path props to display field labels with optional required status.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { FieldLabel } from '@payloadcms/ui'
import type { DateFieldLabelClientComponent } from 'payload'

export const CustomDateFieldLabelClient: DateFieldLabelClientComponent = ({
  field,
  path,
}) => {
  return (
    <FieldLabel
      label={field?.label || field?.name}
      path={path}
      required={field?.required}
    />
  )
}
```

----------------------------------------

TITLE: Fetching Localized Data via REST API in JavaScript
DESCRIPTION: Demonstrates how to use URL query parameters to specify locale and fallback locale when fetching data through the REST API. The example shows a fetch request to retrieve pages in Spanish with no fallback locale.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/configuration/localization.mdx#2025-04-12_snippet_5

LANGUAGE: javascript
CODE:
```
fetch('https://localhost:3000/api/pages?locale=es&fallback-locale=none');
```

----------------------------------------

TITLE: Configuring Custom List View in Payload Config
DESCRIPTION: This snippet demonstrates how to replace the entire List View with a custom component in the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/list-view.mdx#2025-04-12_snippet_0

LANGUAGE: tsx
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      views: {
        // highlight-start
        list: '/path/to/MyCustomListView',
        // highlight-end
      },
    },
  },
})
```

----------------------------------------

TITLE: Creating Custom Client-Side SaveButton Component in React
DESCRIPTION: This code shows how to create a custom client-side SaveButton component in React for Payload CMS. It uses the 'use client' directive, the SaveButton component from @payloadcms/ui, and the SaveButtonClientProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'
import React from 'react'
import { SaveButton } from '@payloadcms/ui'
import type { SaveButtonClientProps } from 'payload'

export function MySaveButton(props: SaveButtonClientProps) {
  return <SaveButton label="Save" />
}
```

----------------------------------------

TITLE: Defining Generated Adapter Interface
DESCRIPTION: This TypeScript interface defines the structure for a custom storage adapter to be used with the `@payloadcms/plugin-cloud-storage` package. It specifies the required methods and properties for handling file uploads, deletes, URL generation, and initialization.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_11

LANGUAGE: typescript
CODE:
```
export interface GeneratedAdapter {
  /**
   * Additional fields to be injected into the base collection and image sizes
   */
  fields?: Field[]
  /**
   * Generates the public URL for a file
   */
  generateURL?: GenerateURL
  handleDelete: HandleDelete
  handleUpload: HandleUpload
  name: string
  onInit?: () => void
  staticHandler: StaticHandler
}
```

----------------------------------------

TITLE: Configuring Custom Component with Client Props in Payload
DESCRIPTION: Demonstrates how to configure a custom logout button component in Payload's admin interface, passing custom client-side props.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload'

const config = buildConfig({
  // ...
  admin: {
    components: {
      logout: {
        Button: {
          path: '/src/components/Logout#MyComponent',
          clientProps: {
            myCustomProp: 'Hello, World!',
          },
        },
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring SQLite Adapter in Payload Config
DESCRIPTION: TypeScript configuration example showing how to set up the SQLite adapter in Payload CMS config file. Uses environment variable for database URI connection string.
SOURCE: https://github.com/payloadcms/payload/blob/main/packages/db-sqlite/README.md#2025-04-12_snippet_1

LANGUAGE: typescript
CODE:
```
import { buildConfig } from 'payload/config'
import { sqliteAdapter } from '@payloadcms/db-sqlite'

export default buildConfig({
  db: sqliteAdapter({
    client: {
      url: process.env.DATABASE_URI,
    },
  }),
  // ...rest of config
})
```

----------------------------------------

TITLE: Customizing Label Component in PayloadCMS
DESCRIPTION: Shows how to replace the default Label Component with a custom implementation using the admin.components.Label property. The Label component represents field labels throughout the admin interface.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_23

LANGUAGE: ts
CODE:
```
import type { Field } from 'payload'

export const myField: Field = {
  name: 'myField',
  type: 'text',
  admin: {
    components: {
      Label: '/path/to/MyCustomLabelComponent', // highlight-line
    },
  },
}
```

----------------------------------------

TITLE: Creating Custom Server-Side PublishButton Component in React
DESCRIPTION: This snippet demonstrates how to create a custom server-side PublishButton component in React for Payload CMS. It uses the PublishButton component from @payloadcms/ui and the PublishButtonServerProps type from Payload.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_12

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { PublishButton } from '@payloadcms/ui'
import type { PublishButtonClientProps } from 'payload'

export function MyPublishButton(props: PublishButtonServerProps) {
  return <PublishButton label="Publish" />
}
```

----------------------------------------

TITLE: Multi-field Sorting using REST API in Payload CMS (JavaScript)
DESCRIPTION: This example demonstrates how to sort documents by multiple fields using the REST API in Payload CMS. It sorts by 'priority' in ascending order and then by 'createdAt' in descending order.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/sort.mdx#2025-04-12_snippet_3

LANGUAGE: javascript
CODE:
```
fetch('https://localhost:3000/api/posts?sort=priority,-createdAt') // highlight-line
  .then((response) => response.json())
  .then((data) => console.log(data))
```

----------------------------------------

TITLE: Basic JSON Field Configuration in TypeScript
DESCRIPTION: Basic example of configuring a JSON field type in Payload CMS.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/json.mdx#2025-04-12_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Field } from 'payload'

export const MyJSONField: Field = {
  // ...
  type: 'json', // highlight-line
}
```

----------------------------------------

TITLE: Creating a Custom Date Field Server Component in React
DESCRIPTION: Example of creating a custom server component for a Date field in Payload CMS, using the DateTimeField component from the Payload UI package.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/date.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { DateTimeField } from '@payloadcms/ui'
import type { DateFieldServerComponent } from 'payload'

export const CustomDateFieldServer: DateFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <DateTimeField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Basic Admin Field Configuration in TypeScript
DESCRIPTION: Demonstrates the basic structure for configuring admin options on a field within a Payload CMS collection.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_14

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionConfig: CollectionConfig = {
  // ...
  fields: [
    // ...
    {
      name: 'myField',
      type: 'text',
      admin: {
        // highlight-line
        // ...
      },
    },
  ],
}
```

----------------------------------------

TITLE: Migrating from Cloud Storage Plugin to Standalone Storage Packages in Payload CMS v3
DESCRIPTION: This example demonstrates how to migrate from the @payloadcms/plugin-cloud-storage package to the new standalone storage packages in Payload CMS v3.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx#2025-04-12_snippet_33

LANGUAGE: typescript
CODE:
```
// ❌ Before (required peer dependencies depending on adapter)

import { cloudStorage } from '@payloadcms/plugin-cloud-storage'
import { s3Adapter } from '@payloadcms/plugin-cloud-storage/s3'

plugins: [
    cloudStorage({
      collections: {
        media: {
          adapter: s3Adapter({
            bucket: process.env.S3_BUCKET,
            config: {
              credentials: {
                accessKeyId: process.env.S3_ACCESS_KEY_ID,
                secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
              },
              region: process.env.S3_REGION,
            },
          }),
        },
      },
    }),
  ],

 // ✅ After

 import { s3Storage } from '@payloadcms/storage-s3'

 plugins: [
    s3Storage({
      collections: {
        media: true,
      },
      bucket: process.env.S3_BUCKET,
      config: {
        credentials: {
          accessKeyId: process.env.S3_ACCESS_KEY_ID,
          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
        },
        region: process.env.S3_REGION,
      },
    }),
  ],
```

----------------------------------------

TITLE: Creating a Custom Action Component for Payload CMS
DESCRIPTION: Example of a simple React component that can be used as a custom action in the Payload CMS admin panel. This component renders a button that shows an alert when clicked.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/root-components.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
export default function MyCustomAction() {
  return (
    <button onClick={() => alert('Hello, world!')}>
      This is a custom action component
    </button>
  )
}
```

----------------------------------------

TITLE: Installing Vercel Blob Storage Adapter
DESCRIPTION: Command to install the Vercel Blob storage adapter package using pnpm package manager
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/upload/storage-adapters.mdx#2025-04-12_snippet_0

LANGUAGE: shell
CODE:
```
pnpm add @payloadcms/storage-vercel-blob
```

----------------------------------------

TITLE: Conditional Task Restoration Based on Input Data
DESCRIPTION: Implementation of conditional task restoration logic based on input data. This example shows how to use a function to determine whether a task should be restored based on a date comparison.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/jobs-queue/tasks.mdx#2025-04-12_snippet_4

LANGUAGE: typescript
CODE:
```
export default buildConfig({
  // ...
  jobs: {
    tasks: [
      {
        slug: 'myTask',
        inputSchema: [
          {
            name: 'someDate',
            type: 'date',
            required: true,
          },
        ],
        retries: {
          shouldRestore: ({ input }) => {
            if (new Date(input.someDate) > new Date()) {
              return false
            }
            return true
          },
        },
        // ...
      } as TaskConfig<'myTask'>,
    ],
  },
})
```

----------------------------------------

TITLE: Implementing Custom Field Component in Collection Config
DESCRIPTION: Shows how to replace the default Field component with a custom implementation by specifying a path to the custom component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_19

LANGUAGE: typescript
CODE:
```
import type { CollectionConfig } from 'payload'

export const CollectionConfig: CollectionConfig = {
  // ...
  fields: [
    // ...
    {
      // ...
      admin: {
        components: {
          Field: '/path/to/MyFieldComponent', // highlight-line
        },
      },
    },
  ],
}
```

----------------------------------------

TITLE: Handling Route Transitions Programmatically Using React Hook
DESCRIPTION: This code shows how to initiate route transitions programmatically with the `useRouteTransition` hook. The hook provides `startRouteTransition`, which wraps navigation functions like `router.push` to provide smooth transitions between routes.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_20

LANGUAGE: ts
CODE:
```
"use client"
import React, { useCallback } from 'react'
import { useTransition } from '@payloadcms/ui'
import { useRouter } from 'next/navigation'

const MyComponent: React.FC = () => {
  const router = useRouter()
  const { startRouteTransition } = useRouteTransition()

  const redirectSomewhere = useCallback(() => {
    startRouteTransition(() => router.push('/somewhere'))
  }, [startRouteTransition, router])

  // ...
}

```

----------------------------------------

TITLE: Implementing Custom Logout Component in React
DESCRIPTION: Shows how to create a custom logout button component that receives and uses a custom prop passed from the Payload configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/overview.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { Link } from '@payloadcms/ui'

export function MyComponent({ myCustomProp }: { myCustomProp: string }) {
  return <Link href="/admin/logout">{myCustomProp}</Link>
}
```

----------------------------------------

TITLE: Building Custom Live Preview Hook for Payload CMS
DESCRIPTION: Example of how to use the subscribe and unsubscribe functions from @payloadcms/live-preview to create a custom live preview hook. This snippet outlines the key steps and responsibilities of a custom hook implementation.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/live-preview/client.mdx#2025-04-12_snippet_5

LANGUAGE: tsx
CODE:
```
import { subscribe, unsubscribe } from '@payloadcms/live-preview'

// To build your own hook, subscribe to Live Preview events using the `subscribe` function
// It handles everything from:
// 1. Listening to `window.postMessage` events
// 2. Merging initial data with active form state
// 3. Populating relationships and uploads
// 4. Calling the `onChange` callback with the result
// Your hook should also:
// 1. Tell the Admin Panel when it is ready to receive messages
// 2. Handle the results of the `onChange` callback to update the UI
// 3. Unsubscribe from the `window.postMessage` events when it unmounts
```

----------------------------------------

TITLE: Custom Textarea Field Server Component
DESCRIPTION: Server-side implementation of a custom textarea field component using Payload UI components.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/textarea.mdx#2025-04-12_snippet_2

LANGUAGE: tsx
CODE:
```
import type React from 'react'
import { TextareaField } from '@payloadcms/ui'
import type { TextareaFieldServerComponent } from 'payload'

export const CustomTextareaFieldServer: TextareaFieldServerComponent = ({
  clientField,
  path,
  schemaPath,
  permissions,
}) => {
  return (
    <TextareaField
      field={clientField}
      path={path}
      schemaPath={schemaPath}
      permissions={permissions}
    />
  )
}
```

----------------------------------------

TITLE: Configuring Upload Component in Collection Config
DESCRIPTION: Configuration example showing how to add a custom Upload component to a PayloadCMS collection configuration.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_20

LANGUAGE: ts
CODE:
```
import type { CollectionConfig } from 'payload'

export const MyCollection: CollectionConfig = {
  // ...
  admin: {
    components: {
      edit: {
        // highlight-start
        Upload: '/path/to/MyUploadComponent',
        // highlight-end
      },
    },
  },
}
```

----------------------------------------

TITLE: Sorting Documents using GraphQL API in Payload CMS (GraphQL)
DESCRIPTION: This snippet illustrates how to sort documents in descending order by the 'createdAt' field using the GraphQL API in Payload CMS. It uses the 'sort' argument in the GraphQL query.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/queries/sort.mdx#2025-04-12_snippet_4

LANGUAGE: graphql
CODE:
```
query {
  Posts(sort: "-createdAt") {
    docs {
      color
    }
  }
}
```

----------------------------------------

TITLE: Implementing Refresh Hook in TypeScript
DESCRIPTION: A collection hook that provides custom logic for the refresh operation, allowing developers to override the default refresh behavior. Can optionally return a value to prevent default operation logic.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/hooks/collections.mdx#2025-04-12_snippet_18

LANGUAGE: typescript
CODE:
```
import type { CollectionRefreshHook } from 'payload'

const myRefreshHook: CollectionRefreshHook = async ({
  args,
  user,
}) => {...}
```

----------------------------------------

TITLE: Using useAllFormFields for Complete Form State Access
DESCRIPTION: Example showing how to use the useAllFormFields hook to access the entire form state and dispatch actions. It includes utility functions for reducing fields to values and retrieving sibling data.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/admin/react-hooks.mdx#2025-04-12_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'
import { useAllFormFields } from '@payloadcms/ui'
import { reduceFieldsToValues, getSiblingData } from 'payload/shared'

const ExampleComponent: React.FC = () => {
  // the `fields` const will be equal to all fields' state,
  // and the `dispatchFields` method is usable to send field state up to the form
  const [fields, dispatchFields] = useAllFormFields();

  // Pass in fields, and indicate if you'd like to "unflatten" field data.
  // The result below will reflect the data stored in the form at the given time
  const formData = reduceFieldsToValues(fields, true);

  // Pass in field state and a path,
  // and you will be sent all sibling data of the path that you've specified
  const siblingData = getSiblingData(fields, 'someFieldName');

  return (
    // return some JSX here if necessary
  )
};
```

----------------------------------------

TITLE: Reusing Default Validations in TypeScript
DESCRIPTION: Shows how to combine custom validation logic with Payload's default field validation functions.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/fields/overview.mdx#2025-04-12_snippet_10

LANGUAGE: typescript
CODE:
```
import { text } from 'payload/shared'

const field: Field = {
  name: 'notBad',
  type: 'text',
  validate: (val, args) => {
    if (val === 'bad') return 'This cannot be "bad"'
    return text(val, args)
  },
}
```

----------------------------------------

TITLE: Implementing Server-Side Preview Button in PayloadCMS
DESCRIPTION: Server component implementation of a custom preview button using PayloadCMS UI components. Accepts PreviewButtonServerProps and renders the base PreviewButton component.
SOURCE: https://github.com/payloadcms/payload/blob/main/docs/custom-components/edit-view.mdx#2025-04-12_snippet_15

LANGUAGE: tsx
CODE:
```
import React from 'react'
import { PreviewButton } from '@payloadcms/ui'
import type { PreviewButtonServerProps } from 'payload'

export function MyPreviewButton(props: PreviewButtonServerProps) {
  return <PreviewButton />
}
```